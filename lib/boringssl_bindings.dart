// ignore_for_file: non_constant_identifier_names, camel_case_types, unnecessary_brace_in_string_interps

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Direct FFI bindings to the BoringSSL library.
/// Generated from the version specified in CMakeLists.txt.
///
class BoringSSLBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BoringSSLBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BoringSSLBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  int EVP_EncodeBlock(
    ffi.Pointer<ffi.Uint8> dst,
    ffi.Pointer<ffi.Uint8> src,
    int src_len,
  ) {
    return _EVP_EncodeBlock(dst, src, src_len);
  }

  late final _EVP_EncodeBlockPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_EncodeBlock');
  late final _EVP_EncodeBlock =
      _EVP_EncodeBlockPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int EVP_EncodedLength(ffi.Pointer<ffi.Size> out_len, int len) {
    return _EVP_EncodedLength(out_len, len);
  }

  late final _EVP_EncodedLengthPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Size>, ffi.Size)>
      >('EVP_EncodedLength');
  late final _EVP_EncodedLength =
      _EVP_EncodedLengthPtr.asFunction<
        int Function(ffi.Pointer<ffi.Size>, int)
      >();

  int EVP_DecodedLength(ffi.Pointer<ffi.Size> out_len, int len) {
    return _EVP_DecodedLength(out_len, len);
  }

  late final _EVP_DecodedLengthPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Size>, ffi.Size)>
      >('EVP_DecodedLength');
  late final _EVP_DecodedLength =
      _EVP_DecodedLengthPtr.asFunction<
        int Function(ffi.Pointer<ffi.Size>, int)
      >();

  int EVP_DecodeBase64(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    int max_out,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _EVP_DecodeBase64(out, out_len, max_out, in1, in_len);
  }

  late final _EVP_DecodeBase64Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_DecodeBase64');
  late final _EVP_DecodeBase64 =
      _EVP_DecodeBase64Ptr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  ffi.Pointer<EVP_ENCODE_CTX> EVP_ENCODE_CTX_new() {
    return _EVP_ENCODE_CTX_new();
  }

  late final _EVP_ENCODE_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_ENCODE_CTX> Function()>>(
        'EVP_ENCODE_CTX_new',
      );
  late final _EVP_ENCODE_CTX_new =
      _EVP_ENCODE_CTX_newPtr.asFunction<
        ffi.Pointer<EVP_ENCODE_CTX> Function()
      >();

  void EVP_ENCODE_CTX_free(ffi.Pointer<EVP_ENCODE_CTX> ctx) {
    return _EVP_ENCODE_CTX_free(ctx);
  }

  late final _EVP_ENCODE_CTX_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ENCODE_CTX>)>
      >('EVP_ENCODE_CTX_free');
  late final _EVP_ENCODE_CTX_free =
      _EVP_ENCODE_CTX_freePtr.asFunction<
        void Function(ffi.Pointer<EVP_ENCODE_CTX>)
      >();

  void EVP_EncodeInit(ffi.Pointer<EVP_ENCODE_CTX> ctx) {
    return _EVP_EncodeInit(ctx);
  }

  late final _EVP_EncodeInitPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ENCODE_CTX>)>
      >('EVP_EncodeInit');
  late final _EVP_EncodeInit =
      _EVP_EncodeInitPtr.asFunction<
        void Function(ffi.Pointer<EVP_ENCODE_CTX>)
      >();

  void EVP_EncodeUpdate(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _EVP_EncodeUpdate(ctx, out, out_len, in1, in_len);
  }

  late final _EVP_EncodeUpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EVP_ENCODE_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_EncodeUpdate');
  late final _EVP_EncodeUpdate =
      _EVP_EncodeUpdatePtr.asFunction<
        void Function(
          ffi.Pointer<EVP_ENCODE_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  void EVP_EncodeFinal(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
  ) {
    return _EVP_EncodeFinal(ctx, out, out_len);
  }

  late final _EVP_EncodeFinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EVP_ENCODE_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('EVP_EncodeFinal');
  late final _EVP_EncodeFinal =
      _EVP_EncodeFinalPtr.asFunction<
        void Function(
          ffi.Pointer<EVP_ENCODE_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  void EVP_DecodeInit(ffi.Pointer<EVP_ENCODE_CTX> ctx) {
    return _EVP_DecodeInit(ctx);
  }

  late final _EVP_DecodeInitPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ENCODE_CTX>)>
      >('EVP_DecodeInit');
  late final _EVP_DecodeInit =
      _EVP_DecodeInitPtr.asFunction<
        void Function(ffi.Pointer<EVP_ENCODE_CTX>)
      >();

  int EVP_DecodeUpdate(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _EVP_DecodeUpdate(ctx, out, out_len, in1, in_len);
  }

  late final _EVP_DecodeUpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_ENCODE_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_DecodeUpdate');
  late final _EVP_DecodeUpdate =
      _EVP_DecodeUpdatePtr.asFunction<
        int Function(
          ffi.Pointer<EVP_ENCODE_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_DecodeFinal(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
  ) {
    return _EVP_DecodeFinal(ctx, out, out_len);
  }

  late final _EVP_DecodeFinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_ENCODE_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('EVP_DecodeFinal');
  late final _EVP_DecodeFinal =
      _EVP_DecodeFinalPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_ENCODE_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int EVP_DecodeBlock(
    ffi.Pointer<ffi.Uint8> dst,
    ffi.Pointer<ffi.Uint8> src,
    int src_len,
  ) {
    return _EVP_DecodeBlock(dst, src, src_len);
  }

  late final _EVP_DecodeBlockPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_DecodeBlock');
  late final _EVP_DecodeBlock =
      _EVP_DecodeBlockPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int)
      >();

  ffi.Pointer<BUF_MEM> BUF_MEM_new() {
    return _BUF_MEM_new();
  }

  late final _BUF_MEM_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BUF_MEM> Function()>>(
        'BUF_MEM_new',
      );
  late final _BUF_MEM_new =
      _BUF_MEM_newPtr.asFunction<ffi.Pointer<BUF_MEM> Function()>();

  void BUF_MEM_free(ffi.Pointer<BUF_MEM> buf) {
    return _BUF_MEM_free(buf);
  }

  late final _BUF_MEM_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BUF_MEM>)>>(
        'BUF_MEM_free',
      );
  late final _BUF_MEM_free =
      _BUF_MEM_freePtr.asFunction<void Function(ffi.Pointer<BUF_MEM>)>();

  int BUF_MEM_reserve(ffi.Pointer<BUF_MEM> buf, int cap) {
    return _BUF_MEM_reserve(buf, cap);
  }

  late final _BUF_MEM_reservePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BUF_MEM>, ffi.Size)>
      >('BUF_MEM_reserve');
  late final _BUF_MEM_reserve =
      _BUF_MEM_reservePtr.asFunction<int Function(ffi.Pointer<BUF_MEM>, int)>();

  int BUF_MEM_grow(ffi.Pointer<BUF_MEM> buf, int len) {
    return _BUF_MEM_grow(buf, len);
  }

  late final _BUF_MEM_growPtr =
      _lookup<
        ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BUF_MEM>, ffi.Size)>
      >('BUF_MEM_grow');
  late final _BUF_MEM_grow =
      _BUF_MEM_growPtr.asFunction<int Function(ffi.Pointer<BUF_MEM>, int)>();

  int BUF_MEM_grow_clean(ffi.Pointer<BUF_MEM> buf, int len) {
    return _BUF_MEM_grow_clean(buf, len);
  }

  late final _BUF_MEM_grow_cleanPtr =
      _lookup<
        ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BUF_MEM>, ffi.Size)>
      >('BUF_MEM_grow_clean');
  late final _BUF_MEM_grow_clean =
      _BUF_MEM_grow_cleanPtr.asFunction<
        int Function(ffi.Pointer<BUF_MEM>, int)
      >();

  int BUF_MEM_append(
    ffi.Pointer<BUF_MEM> buf,
    ffi.Pointer<ffi.Void> in1,
    int len,
  ) {
    return _BUF_MEM_append(buf, in1, len);
  }

  late final _BUF_MEM_appendPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BUF_MEM>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('BUF_MEM_append');
  late final _BUF_MEM_append =
      _BUF_MEM_appendPtr.asFunction<
        int Function(ffi.Pointer<BUF_MEM>, ffi.Pointer<ffi.Void>, int)
      >();

  ffi.Pointer<ffi.Char> BUF_strdup(ffi.Pointer<ffi.Char> str) {
    return _BUF_strdup(str);
  }

  late final _BUF_strdupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('BUF_strdup');
  late final _BUF_strdup =
      _BUF_strdupPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
      >();

  int BUF_strnlen(ffi.Pointer<ffi.Char> str, int max_len) {
    return _BUF_strnlen(str, max_len);
  }

  late final _BUF_strnlenPtr =
      _lookup<
        ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>
      >('BUF_strnlen');
  late final _BUF_strnlen =
      _BUF_strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> BUF_strndup(ffi.Pointer<ffi.Char> str, int size) {
    return _BUF_strndup(str, size);
  }

  late final _BUF_strndupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size)
        >
      >('BUF_strndup');
  late final _BUF_strndup =
      _BUF_strndupPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)
      >();

  ffi.Pointer<ffi.Void> BUF_memdup(ffi.Pointer<ffi.Void> data, int size) {
    return _BUF_memdup(data, size);
  }

  late final _BUF_memdupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)
        >
      >('BUF_memdup');
  late final _BUF_memdup =
      _BUF_memdupPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)
      >();

  int BUF_strlcpy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int dst_size,
  ) {
    return _BUF_strlcpy(dst, src, dst_size);
  }

  late final _BUF_strlcpyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('BUF_strlcpy');
  late final _BUF_strlcpy =
      _BUF_strlcpyPtr.asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)
      >();

  int BUF_strlcat(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int dst_size,
  ) {
    return _BUF_strlcat(dst, src, dst_size);
  }

  late final _BUF_strlcatPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('BUF_strlcat');
  late final _BUF_strlcat =
      _BUF_strlcatPtr.asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)
      >();

  ffi.Pointer<BIO> BIO_new(ffi.Pointer<BIO_METHOD> method) {
    return _BIO_new(method);
  }

  late final _BIO_newPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO_METHOD>)>
      >('BIO_new');
  late final _BIO_new =
      _BIO_newPtr.asFunction<
        ffi.Pointer<BIO> Function(ffi.Pointer<BIO_METHOD>)
      >();

  int BIO_free(ffi.Pointer<BIO> bio) {
    return _BIO_free(bio);
  }

  late final _BIO_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_free',
      );
  late final _BIO_free =
      _BIO_freePtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_vfree(ffi.Pointer<BIO> bio) {
    return _BIO_vfree(bio);
  }

  late final _BIO_vfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
        'BIO_vfree',
      );
  late final _BIO_vfree =
      _BIO_vfreePtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  int BIO_up_ref(ffi.Pointer<BIO> bio) {
    return _BIO_up_ref(bio);
  }

  late final _BIO_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_up_ref',
      );
  late final _BIO_up_ref =
      _BIO_up_refPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_read(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Void> data, int len) {
    return _BIO_read(bio, data, len);
  }

  late final _BIO_readPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Int)
        >
      >('BIO_read');
  late final _BIO_read =
      _BIO_readPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int)
      >();

  int BIO_gets(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Char> buf, int size) {
    return _BIO_gets(bio, buf, size);
  }

  late final _BIO_getsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
        >
      >('BIO_gets');
  late final _BIO_gets =
      _BIO_getsPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, int)
      >();

  int BIO_write(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Void> data, int len) {
    return _BIO_write(bio, data, len);
  }

  late final _BIO_writePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Int)
        >
      >('BIO_write');
  late final _BIO_write =
      _BIO_writePtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int)
      >();

  int BIO_write_all(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Void> data, int len) {
    return _BIO_write_all(bio, data, len);
  }

  late final _BIO_write_allPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Size)
        >
      >('BIO_write_all');
  late final _BIO_write_all =
      _BIO_write_allPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int)
      >();

  int BIO_puts(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Char> buf) {
    return _BIO_puts(bio, buf);
  }

  late final _BIO_putsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
        >
      >('BIO_puts');
  late final _BIO_puts =
      _BIO_putsPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
      >();

  int BIO_flush(ffi.Pointer<BIO> bio) {
    return _BIO_flush(bio);
  }

  late final _BIO_flushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_flush',
      );
  late final _BIO_flush =
      _BIO_flushPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl(
    ffi.Pointer<BIO> bio,
    int cmd,
    int larg,
    ffi.Pointer<ffi.Void> parg,
  ) {
    return _BIO_ctrl(bio, cmd, larg, parg);
  }

  late final _BIO_ctrlPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Long Function(
            ffi.Pointer<BIO>,
            ffi.Int,
            ffi.Long,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('BIO_ctrl');
  late final _BIO_ctrl =
      _BIO_ctrlPtr.asFunction<
        int Function(ffi.Pointer<BIO>, int, int, ffi.Pointer<ffi.Void>)
      >();

  ffi.Pointer<ffi.Char> BIO_ptr_ctrl(ffi.Pointer<BIO> bp, int cmd, int larg) {
    return _BIO_ptr_ctrl(bp, cmd, larg);
  }

  late final _BIO_ptr_ctrlPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long)
        >
      >('BIO_ptr_ctrl');
  late final _BIO_ptr_ctrl =
      _BIO_ptr_ctrlPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>, int, int)
      >();

  int BIO_int_ctrl(ffi.Pointer<BIO> bp, int cmd, int larg, int iarg) {
    return _BIO_int_ctrl(bp, cmd, larg, iarg);
  }

  late final _BIO_int_ctrlPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long, ffi.Int)
        >
      >('BIO_int_ctrl');
  late final _BIO_int_ctrl =
      _BIO_int_ctrlPtr.asFunction<
        int Function(ffi.Pointer<BIO>, int, int, int)
      >();

  int BIO_reset(ffi.Pointer<BIO> bio) {
    return _BIO_reset(bio);
  }

  late final _BIO_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_reset',
      );
  late final _BIO_reset =
      _BIO_resetPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_eof(ffi.Pointer<BIO> bio) {
    return _BIO_eof(bio);
  }

  late final _BIO_eofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_eof',
      );
  late final _BIO_eof =
      _BIO_eofPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_set_flags(ffi.Pointer<BIO> bio, int flags) {
    return _BIO_set_flags(bio, flags);
  }

  late final _BIO_set_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
        'BIO_set_flags',
      );
  late final _BIO_set_flags =
      _BIO_set_flagsPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  void BIO_clear_flags(ffi.Pointer<BIO> bio, int flags) {
    return _BIO_clear_flags(bio, flags);
  }

  late final _BIO_clear_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
        'BIO_clear_flags',
      );
  late final _BIO_clear_flags =
      _BIO_clear_flagsPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  int BIO_test_flags(ffi.Pointer<BIO> bio, int flags) {
    return _BIO_test_flags(bio, flags);
  }

  late final _BIO_test_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int)>>(
        'BIO_test_flags',
      );
  late final _BIO_test_flags =
      _BIO_test_flagsPtr.asFunction<int Function(ffi.Pointer<BIO>, int)>();

  int BIO_should_read(ffi.Pointer<BIO> bio) {
    return _BIO_should_read(bio);
  }

  late final _BIO_should_readPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_should_read',
      );
  late final _BIO_should_read =
      _BIO_should_readPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_should_write(ffi.Pointer<BIO> bio) {
    return _BIO_should_write(bio);
  }

  late final _BIO_should_writePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_should_write',
      );
  late final _BIO_should_write =
      _BIO_should_writePtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_should_retry(ffi.Pointer<BIO> bio) {
    return _BIO_should_retry(bio);
  }

  late final _BIO_should_retryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_should_retry',
      );
  late final _BIO_should_retry =
      _BIO_should_retryPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_should_io_special(ffi.Pointer<BIO> bio) {
    return _BIO_should_io_special(bio);
  }

  late final _BIO_should_io_specialPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_should_io_special',
      );
  late final _BIO_should_io_special =
      _BIO_should_io_specialPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_get_retry_reason(ffi.Pointer<BIO> bio) {
    return _BIO_get_retry_reason(bio);
  }

  late final _BIO_get_retry_reasonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_get_retry_reason',
      );
  late final _BIO_get_retry_reason =
      _BIO_get_retry_reasonPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_set_retry_reason(ffi.Pointer<BIO> bio, int reason) {
    return _BIO_set_retry_reason(bio, reason);
  }

  late final _BIO_set_retry_reasonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
        'BIO_set_retry_reason',
      );
  late final _BIO_set_retry_reason =
      _BIO_set_retry_reasonPtr.asFunction<
        void Function(ffi.Pointer<BIO>, int)
      >();

  void BIO_set_retry_read(ffi.Pointer<BIO> bio) {
    return _BIO_set_retry_read(bio);
  }

  late final _BIO_set_retry_readPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
        'BIO_set_retry_read',
      );
  late final _BIO_set_retry_read =
      _BIO_set_retry_readPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  void BIO_set_retry_write(ffi.Pointer<BIO> bio) {
    return _BIO_set_retry_write(bio);
  }

  late final _BIO_set_retry_writePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
        'BIO_set_retry_write',
      );
  late final _BIO_set_retry_write =
      _BIO_set_retry_writePtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  int BIO_get_retry_flags(ffi.Pointer<BIO> bio) {
    return _BIO_get_retry_flags(bio);
  }

  late final _BIO_get_retry_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_get_retry_flags',
      );
  late final _BIO_get_retry_flags =
      _BIO_get_retry_flagsPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_clear_retry_flags(ffi.Pointer<BIO> bio) {
    return _BIO_clear_retry_flags(bio);
  }

  late final _BIO_clear_retry_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
        'BIO_clear_retry_flags',
      );
  late final _BIO_clear_retry_flags =
      _BIO_clear_retry_flagsPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  int BIO_method_type(ffi.Pointer<BIO> bio) {
    return _BIO_method_type(bio);
  }

  late final _BIO_method_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_method_type',
      );
  late final _BIO_method_type =
      _BIO_method_typePtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_callback_ctrl(
    ffi.Pointer<BIO> bio,
    int cmd,
    ffi.Pointer<BIO_info_cb> fp,
  ) {
    return _BIO_callback_ctrl(bio, cmd, fp);
  }

  late final _BIO_callback_ctrlPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)
        >
      >('BIO_callback_ctrl');
  late final _BIO_callback_ctrl =
      _BIO_callback_ctrlPtr.asFunction<
        int Function(ffi.Pointer<BIO>, int, ffi.Pointer<BIO_info_cb>)
      >();

  int BIO_pending(ffi.Pointer<BIO> bio) {
    return _BIO_pending(bio);
  }

  late final _BIO_pendingPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
        'BIO_pending',
      );
  late final _BIO_pending =
      _BIO_pendingPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_pending(ffi.Pointer<BIO> bio) {
    return _BIO_ctrl_pending(bio);
  }

  late final _BIO_ctrl_pendingPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
        'BIO_ctrl_pending',
      );
  late final _BIO_ctrl_pending =
      _BIO_ctrl_pendingPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_wpending(ffi.Pointer<BIO> bio) {
    return _BIO_wpending(bio);
  }

  late final _BIO_wpendingPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
        'BIO_wpending',
      );
  late final _BIO_wpending =
      _BIO_wpendingPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_set_close(ffi.Pointer<BIO> bio, int close_flag) {
    return _BIO_set_close(bio, close_flag);
  }

  late final _BIO_set_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int)>>(
        'BIO_set_close',
      );
  late final _BIO_set_close =
      _BIO_set_closePtr.asFunction<int Function(ffi.Pointer<BIO>, int)>();

  int BIO_number_read(ffi.Pointer<BIO> bio) {
    return _BIO_number_read(bio);
  }

  late final _BIO_number_readPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<BIO>)>>(
        'BIO_number_read',
      );
  late final _BIO_number_read =
      _BIO_number_readPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_number_written(ffi.Pointer<BIO> bio) {
    return _BIO_number_written(bio);
  }

  late final _BIO_number_writtenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<BIO>)>>(
        'BIO_number_written',
      );
  late final _BIO_number_written =
      _BIO_number_writtenPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> BIO_push(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<BIO> appended_bio,
  ) {
    return _BIO_push(bio, appended_bio);
  }

  late final _BIO_pushPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)
        >
      >('BIO_push');
  late final _BIO_push =
      _BIO_pushPtr.asFunction<
        ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)
      >();

  ffi.Pointer<BIO> BIO_pop(ffi.Pointer<BIO> bio) {
    return _BIO_pop(bio);
  }

  late final _BIO_popPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>>(
        'BIO_pop',
      );
  late final _BIO_pop =
      _BIO_popPtr.asFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> BIO_next(ffi.Pointer<BIO> bio) {
    return _BIO_next(bio);
  }

  late final _BIO_nextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>>(
        'BIO_next',
      );
  late final _BIO_next =
      _BIO_nextPtr.asFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>();

  void BIO_free_all(ffi.Pointer<BIO> bio) {
    return _BIO_free_all(bio);
  }

  late final _BIO_free_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
        'BIO_free_all',
      );
  late final _BIO_free_all =
      _BIO_free_allPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> BIO_find_type(ffi.Pointer<BIO> bio, int type) {
    return _BIO_find_type(bio, type);
  }

  late final _BIO_find_typePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Int)>
      >('BIO_find_type');
  late final _BIO_find_type =
      _BIO_find_typePtr.asFunction<
        ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, int)
      >();

  void BIO_copy_next_retry(ffi.Pointer<BIO> bio) {
    return _BIO_copy_next_retry(bio);
  }

  late final _BIO_copy_next_retryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
        'BIO_copy_next_retry',
      );
  late final _BIO_copy_next_retry =
      _BIO_copy_next_retryPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  int BIO_printf(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Char> format) {
    return _BIO_printf(bio, format);
  }

  late final _BIO_printfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
        >
      >('BIO_printf');
  late final _BIO_printf =
      _BIO_printfPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
      >();

  int BIO_indent(ffi.Pointer<BIO> bio, int indent, int max_indent) {
    return _BIO_indent(bio, indent, max_indent);
  }

  late final _BIO_indentPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.UnsignedInt, ffi.UnsignedInt)
        >
      >('BIO_indent');
  late final _BIO_indent =
      _BIO_indentPtr.asFunction<int Function(ffi.Pointer<BIO>, int, int)>();

  int BIO_hexdump(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Uint8> data,
    int len,
    int indent,
  ) {
    return _BIO_hexdump(bio, data, len, indent);
  }

  late final _BIO_hexdumpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.UnsignedInt,
          )
        >
      >('BIO_hexdump');
  late final _BIO_hexdump =
      _BIO_hexdumpPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Uint8>, int, int)
      >();

  void ERR_print_errors(ffi.Pointer<BIO> bio) {
    return _ERR_print_errors(bio);
  }

  late final _ERR_print_errorsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
        'ERR_print_errors',
      );
  late final _ERR_print_errors =
      _ERR_print_errorsPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  int BIO_read_asn1(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out,
    ffi.Pointer<ffi.Size> out_len,
    int max_len,
  ) {
    return _BIO_read_asn1(bio, out, out_len, max_len);
  }

  late final _BIO_read_asn1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
          )
        >
      >('BIO_read_asn1');
  late final _BIO_read_asn1 =
      _BIO_read_asn1Ptr.asFunction<
        int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Size>,
          int,
        )
      >();

  ffi.Pointer<BIO_METHOD> BIO_s_mem() {
    return _BIO_s_mem();
  }

  late final _BIO_s_memPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
        'BIO_s_mem',
      );
  late final _BIO_s_mem =
      _BIO_s_memPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_mem_buf(ffi.Pointer<ffi.Void> buf, int len) {
    return _BIO_new_mem_buf(buf, len);
  }

  late final _BIO_new_mem_bufPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Void>, ossl_ssize_t)
        >
      >('BIO_new_mem_buf');
  late final _BIO_new_mem_buf =
      _BIO_new_mem_bufPtr.asFunction<
        ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Void>, int)
      >();

  int BIO_mem_contents(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_contents,
    ffi.Pointer<ffi.Size> out_len,
  ) {
    return _BIO_mem_contents(bio, out_contents, out_len);
  }

  late final _BIO_mem_contentsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('BIO_mem_contents');
  late final _BIO_mem_contents =
      _BIO_mem_contentsPtr.asFunction<
        int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  int BIO_get_mem_data(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> contents,
  ) {
    return _BIO_get_mem_data(bio, contents);
  }

  late final _BIO_get_mem_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Long Function(
            ffi.Pointer<BIO>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('BIO_get_mem_data');
  late final _BIO_get_mem_data =
      _BIO_get_mem_dataPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>)
      >();

  int BIO_get_mem_ptr(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<BUF_MEM>> out,
  ) {
    return _BIO_get_mem_ptr(bio, out);
  }

  late final _BIO_get_mem_ptrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<BUF_MEM>>)
        >
      >('BIO_get_mem_ptr');
  late final _BIO_get_mem_ptr =
      _BIO_get_mem_ptrPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<BUF_MEM>>)
      >();

  int BIO_set_mem_buf(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<BUF_MEM> b,
    int take_ownership,
  ) {
    return _BIO_set_mem_buf(bio, b, take_ownership);
  }

  late final _BIO_set_mem_bufPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BUF_MEM>, ffi.Int)
        >
      >('BIO_set_mem_buf');
  late final _BIO_set_mem_buf =
      _BIO_set_mem_bufPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<BUF_MEM>, int)
      >();

  int BIO_set_mem_eof_return(ffi.Pointer<BIO> bio, int eof_value) {
    return _BIO_set_mem_eof_return(bio, eof_value);
  }

  late final _BIO_set_mem_eof_returnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int)>>(
        'BIO_set_mem_eof_return',
      );
  late final _BIO_set_mem_eof_return =
      _BIO_set_mem_eof_returnPtr.asFunction<
        int Function(ffi.Pointer<BIO>, int)
      >();

  ffi.Pointer<BIO_METHOD> BIO_s_fd() {
    return _BIO_s_fd();
  }

  late final _BIO_s_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
        'BIO_s_fd',
      );
  late final _BIO_s_fd =
      _BIO_s_fdPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_fd(int fd, int close_flag) {
    return _BIO_new_fd(fd, close_flag);
  }

  late final _BIO_new_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Int, ffi.Int)>>(
        'BIO_new_fd',
      );
  late final _BIO_new_fd =
      _BIO_new_fdPtr.asFunction<ffi.Pointer<BIO> Function(int, int)>();

  int BIO_set_fd(ffi.Pointer<BIO> bio, int fd, int close_flag) {
    return _BIO_set_fd(bio, fd, close_flag);
  }

  late final _BIO_set_fdPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Int)>
      >('BIO_set_fd');
  late final _BIO_set_fd =
      _BIO_set_fdPtr.asFunction<int Function(ffi.Pointer<BIO>, int, int)>();

  int BIO_get_fd(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Int> out_fd) {
    return _BIO_get_fd(bio, out_fd);
  }

  late final _BIO_get_fdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>)
        >
      >('BIO_get_fd');
  late final _BIO_get_fd =
      _BIO_get_fdPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>)
      >();

  ffi.Pointer<BIO_METHOD> BIO_s_file() {
    return _BIO_s_file();
  }

  late final _BIO_s_filePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
        'BIO_s_file',
      );
  late final _BIO_s_file =
      _BIO_s_filePtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_file(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _BIO_new_file(filename, mode);
  }

  late final _BIO_new_filePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('BIO_new_file');
  late final _BIO_new_file =
      _BIO_new_filePtr.asFunction<
        ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<BIO> BIO_new_fp(ffi.Pointer<FILE> file, int flags) {
    return _BIO_new_fp(file, flags);
  }

  late final _BIO_new_fpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<FILE>, ffi.Int)
        >
      >('BIO_new_fp');
  late final _BIO_new_fp =
      _BIO_new_fpPtr.asFunction<
        ffi.Pointer<BIO> Function(ffi.Pointer<FILE>, int)
      >();

  int BIO_get_fp(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<FILE>> out_file,
  ) {
    return _BIO_get_fp(bio, out_file);
  }

  late final _BIO_get_fpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<FILE>>)
        >
      >('BIO_get_fp');
  late final _BIO_get_fp =
      _BIO_get_fpPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<FILE>>)
      >();

  int BIO_set_fp(ffi.Pointer<BIO> bio, ffi.Pointer<FILE> file, int flags) {
    return _BIO_set_fp(bio, file, flags);
  }

  late final _BIO_set_fpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<FILE>, ffi.Int)
        >
      >('BIO_set_fp');
  late final _BIO_set_fp =
      _BIO_set_fpPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<FILE>, int)
      >();

  int BIO_read_filename(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Char> filename) {
    return _BIO_read_filename(bio, filename);
  }

  late final _BIO_read_filenamePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
        >
      >('BIO_read_filename');
  late final _BIO_read_filename =
      _BIO_read_filenamePtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
      >();

  int BIO_write_filename(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Char> filename) {
    return _BIO_write_filename(bio, filename);
  }

  late final _BIO_write_filenamePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
        >
      >('BIO_write_filename');
  late final _BIO_write_filename =
      _BIO_write_filenamePtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
      >();

  int BIO_append_filename(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _BIO_append_filename(bio, filename);
  }

  late final _BIO_append_filenamePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
        >
      >('BIO_append_filename');
  late final _BIO_append_filename =
      _BIO_append_filenamePtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
      >();

  int BIO_rw_filename(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Char> filename) {
    return _BIO_rw_filename(bio, filename);
  }

  late final _BIO_rw_filenamePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
        >
      >('BIO_rw_filename');
  late final _BIO_rw_filename =
      _BIO_rw_filenamePtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
      >();

  int BIO_tell(ffi.Pointer<BIO> bio) {
    return _BIO_tell(bio);
  }

  late final _BIO_tellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<BIO>)>>(
        'BIO_tell',
      );
  late final _BIO_tell =
      _BIO_tellPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_seek(ffi.Pointer<BIO> bio, int offset) {
    return _BIO_seek(bio, offset);
  }

  late final _BIO_seekPtr =
      _lookup<
        ffi.NativeFunction<ffi.Long Function(ffi.Pointer<BIO>, ffi.Long)>
      >('BIO_seek');
  late final _BIO_seek =
      _BIO_seekPtr.asFunction<int Function(ffi.Pointer<BIO>, int)>();

  ffi.Pointer<BIO_METHOD> BIO_s_socket() {
    return _BIO_s_socket();
  }

  late final _BIO_s_socketPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
        'BIO_s_socket',
      );
  late final _BIO_s_socket =
      _BIO_s_socketPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_socket(int fd, int close_flag) {
    return _BIO_new_socket(fd, close_flag);
  }

  late final _BIO_new_socketPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Int, ffi.Int)>>(
        'BIO_new_socket',
      );
  late final _BIO_new_socket =
      _BIO_new_socketPtr.asFunction<ffi.Pointer<BIO> Function(int, int)>();

  ffi.Pointer<BIO_METHOD> BIO_s_connect() {
    return _BIO_s_connect();
  }

  late final _BIO_s_connectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
        'BIO_s_connect',
      );
  late final _BIO_s_connect =
      _BIO_s_connectPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_connect(
    ffi.Pointer<ffi.Char> host_and_optional_port,
  ) {
    return _BIO_new_connect(host_and_optional_port);
  }

  late final _BIO_new_connectPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>
      >('BIO_new_connect');
  late final _BIO_new_connect =
      _BIO_new_connectPtr.asFunction<
        ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)
      >();

  int BIO_set_conn_hostname(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Char> host_and_optional_port,
  ) {
    return _BIO_set_conn_hostname(bio, host_and_optional_port);
  }

  late final _BIO_set_conn_hostnamePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
        >
      >('BIO_set_conn_hostname');
  late final _BIO_set_conn_hostname =
      _BIO_set_conn_hostnamePtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
      >();

  int BIO_set_conn_port(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Char> port_str) {
    return _BIO_set_conn_port(bio, port_str);
  }

  late final _BIO_set_conn_portPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
        >
      >('BIO_set_conn_port');
  late final _BIO_set_conn_port =
      _BIO_set_conn_portPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
      >();

  int BIO_set_conn_int_port(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Int> port) {
    return _BIO_set_conn_int_port(bio, port);
  }

  late final _BIO_set_conn_int_portPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>)
        >
      >('BIO_set_conn_int_port');
  late final _BIO_set_conn_int_port =
      _BIO_set_conn_int_portPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>)
      >();

  int BIO_set_nbio(ffi.Pointer<BIO> bio, int on1) {
    return _BIO_set_nbio(bio, on1);
  }

  late final _BIO_set_nbioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int)>>(
        'BIO_set_nbio',
      );
  late final _BIO_set_nbio =
      _BIO_set_nbioPtr.asFunction<int Function(ffi.Pointer<BIO>, int)>();

  int BIO_do_connect(ffi.Pointer<BIO> bio) {
    return _BIO_do_connect(bio);
  }

  late final _BIO_do_connectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_do_connect',
      );
  late final _BIO_do_connect =
      _BIO_do_connectPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_new_bio_pair(
    ffi.Pointer<ffi.Pointer<BIO>> out1,
    int writebuf1,
    ffi.Pointer<ffi.Pointer<BIO>> out2,
    int writebuf2,
  ) {
    return _BIO_new_bio_pair(out1, writebuf1, out2, writebuf2);
  }

  late final _BIO_new_bio_pairPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<BIO>>,
            ffi.Size,
            ffi.Pointer<ffi.Pointer<BIO>>,
            ffi.Size,
          )
        >
      >('BIO_new_bio_pair');
  late final _BIO_new_bio_pair =
      _BIO_new_bio_pairPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<BIO>>,
          int,
          ffi.Pointer<ffi.Pointer<BIO>>,
          int,
        )
      >();

  int BIO_ctrl_get_read_request(ffi.Pointer<BIO> bio) {
    return _BIO_ctrl_get_read_request(bio);
  }

  late final _BIO_ctrl_get_read_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
        'BIO_ctrl_get_read_request',
      );
  late final _BIO_ctrl_get_read_request =
      _BIO_ctrl_get_read_requestPtr.asFunction<
        int Function(ffi.Pointer<BIO>)
      >();

  int BIO_ctrl_get_write_guarantee(ffi.Pointer<BIO> bio) {
    return _BIO_ctrl_get_write_guarantee(bio);
  }

  late final _BIO_ctrl_get_write_guaranteePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<BIO>)>>(
        'BIO_ctrl_get_write_guarantee',
      );
  late final _BIO_ctrl_get_write_guarantee =
      _BIO_ctrl_get_write_guaranteePtr.asFunction<
        int Function(ffi.Pointer<BIO>)
      >();

  int BIO_shutdown_wr(ffi.Pointer<BIO> bio) {
    return _BIO_shutdown_wr(bio);
  }

  late final _BIO_shutdown_wrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_shutdown_wr',
      );
  late final _BIO_shutdown_wr =
      _BIO_shutdown_wrPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_get_new_index() {
    return _BIO_get_new_index();
  }

  late final _BIO_get_new_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('BIO_get_new_index');
  late final _BIO_get_new_index =
      _BIO_get_new_indexPtr.asFunction<int Function()>();

  ffi.Pointer<BIO_METHOD> BIO_meth_new(int type, ffi.Pointer<ffi.Char> name) {
    return _BIO_meth_new(type, name);
  }

  late final _BIO_meth_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIO_METHOD> Function(ffi.Int, ffi.Pointer<ffi.Char>)
        >
      >('BIO_meth_new');
  late final _BIO_meth_new =
      _BIO_meth_newPtr.asFunction<
        ffi.Pointer<BIO_METHOD> Function(int, ffi.Pointer<ffi.Char>)
      >();

  void BIO_meth_free(ffi.Pointer<BIO_METHOD> method) {
    return _BIO_meth_free(method);
  }

  late final _BIO_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_METHOD>)>>(
        'BIO_meth_free',
      );
  late final _BIO_meth_free =
      _BIO_meth_freePtr.asFunction<void Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_create(
    ffi.Pointer<BIO_METHOD> method,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
    create_func,
  ) {
    return _BIO_meth_set_create(method, create_func);
  }

  late final _BIO_meth_set_createPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO_METHOD>,
            ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>,
          )
        >
      >('BIO_meth_set_create');
  late final _BIO_meth_set_create =
      _BIO_meth_set_createPtr.asFunction<
        int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>,
        )
      >();

  int BIO_meth_set_destroy(
    ffi.Pointer<BIO_METHOD> method,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
    destroy_func,
  ) {
    return _BIO_meth_set_destroy(method, destroy_func);
  }

  late final _BIO_meth_set_destroyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO_METHOD>,
            ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>,
          )
        >
      >('BIO_meth_set_destroy');
  late final _BIO_meth_set_destroy =
      _BIO_meth_set_destroyPtr.asFunction<
        int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>,
        )
      >();

  int BIO_meth_set_write(
    ffi.Pointer<BIO_METHOD> method,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
      >
    >
    write_func,
  ) {
    return _BIO_meth_set_write(method, write_func);
  }

  late final _BIO_meth_set_writePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO_METHOD>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<BIO>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int,
                )
              >
            >,
          )
        >
      >('BIO_meth_set_write');
  late final _BIO_meth_set_write =
      _BIO_meth_set_writePtr.asFunction<
        int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
            >
          >,
        )
      >();

  int BIO_meth_set_read(
    ffi.Pointer<BIO_METHOD> method,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
      >
    >
    read_func,
  ) {
    return _BIO_meth_set_read(method, read_func);
  }

  late final _BIO_meth_set_readPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO_METHOD>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<BIO>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int,
                )
              >
            >,
          )
        >
      >('BIO_meth_set_read');
  late final _BIO_meth_set_read =
      _BIO_meth_set_readPtr.asFunction<
        int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
            >
          >,
        )
      >();

  int BIO_meth_set_gets(
    ffi.Pointer<BIO_METHOD> method,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
      >
    >
    gets_func,
  ) {
    return _BIO_meth_set_gets(method, gets_func);
  }

  late final _BIO_meth_set_getsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO_METHOD>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(
                  ffi.Pointer<BIO>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int,
                )
              >
            >,
          )
        >
      >('BIO_meth_set_gets');
  late final _BIO_meth_set_gets =
      _BIO_meth_set_getsPtr.asFunction<
        int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
            >
          >,
        )
      >();

  int BIO_meth_set_ctrl(
    ffi.Pointer<BIO_METHOD> method,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Long Function(
          ffi.Pointer<BIO>,
          ffi.Int,
          ffi.Long,
          ffi.Pointer<ffi.Void>,
        )
      >
    >
    ctrl_func,
  ) {
    return _BIO_meth_set_ctrl(method, ctrl_func);
  }

  late final _BIO_meth_set_ctrlPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO_METHOD>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Long Function(
                  ffi.Pointer<BIO>,
                  ffi.Int,
                  ffi.Long,
                  ffi.Pointer<ffi.Void>,
                )
              >
            >,
          )
        >
      >('BIO_meth_set_ctrl');
  late final _BIO_meth_set_ctrl =
      _BIO_meth_set_ctrlPtr.asFunction<
        int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Long Function(
                ffi.Pointer<BIO>,
                ffi.Int,
                ffi.Long,
                ffi.Pointer<ffi.Void>,
              )
            >
          >,
        )
      >();

  int BIO_meth_set_callback_ctrl(
    ffi.Pointer<BIO_METHOD> method,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)
      >
    >
    callback_ctrl_func,
  ) {
    return _BIO_meth_set_callback_ctrl(method, callback_ctrl_func);
  }

  late final _BIO_meth_set_callback_ctrlPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO_METHOD>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Long Function(
                  ffi.Pointer<BIO>,
                  ffi.Int,
                  ffi.Pointer<BIO_info_cb>,
                )
              >
            >,
          )
        >
      >('BIO_meth_set_callback_ctrl');
  late final _BIO_meth_set_callback_ctrl =
      _BIO_meth_set_callback_ctrlPtr.asFunction<
        int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Long Function(
                ffi.Pointer<BIO>,
                ffi.Int,
                ffi.Pointer<BIO_info_cb>,
              )
            >
          >,
        )
      >();

  void BIO_set_data(ffi.Pointer<BIO> bio, ffi.Pointer<ffi.Void> ptr) {
    return _BIO_set_data(bio, ptr);
  }

  late final _BIO_set_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)
        >
      >('BIO_set_data');
  late final _BIO_set_data =
      _BIO_set_dataPtr.asFunction<
        void Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)
      >();

  ffi.Pointer<ffi.Void> BIO_get_data(ffi.Pointer<BIO> bio) {
    return _BIO_get_data(bio);
  }

  late final _BIO_get_dataPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>)>
      >('BIO_get_data');
  late final _BIO_get_data =
      _BIO_get_dataPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>)
      >();

  void BIO_set_init(ffi.Pointer<BIO> bio, int init) {
    return _BIO_set_init(bio, init);
  }

  late final _BIO_set_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
        'BIO_set_init',
      );
  late final _BIO_set_init =
      _BIO_set_initPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  int BIO_get_init(ffi.Pointer<BIO> bio) {
    return _BIO_get_init(bio);
  }

  late final _BIO_get_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_get_init',
      );
  late final _BIO_get_init =
      _BIO_get_initPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_get_ex_new_index(
    int argl,
    ffi.Pointer<ffi.Void> argp,
    ffi.Pointer<CRYPTO_EX_unused> unused,
    ffi.Pointer<CRYPTO_EX_dup> dup_unused,
    ffi.Pointer<CRYPTO_EX_free> free_func,
  ) {
    return _BIO_get_ex_new_index(argl, argp, unused, dup_unused, free_func);
  }

  late final _BIO_get_ex_new_indexPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Long,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<CRYPTO_EX_unused>,
            ffi.Pointer<CRYPTO_EX_dup>,
            ffi.Pointer<CRYPTO_EX_free>,
          )
        >
      >('BIO_get_ex_new_index');
  late final _BIO_get_ex_new_index =
      _BIO_get_ex_new_indexPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<CRYPTO_EX_unused>,
          ffi.Pointer<CRYPTO_EX_dup>,
          ffi.Pointer<CRYPTO_EX_free>,
        )
      >();

  int BIO_set_ex_data(
    ffi.Pointer<BIO> bio,
    int idx,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _BIO_set_ex_data(bio, idx, arg);
  }

  late final _BIO_set_ex_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<ffi.Void>)
        >
      >('BIO_set_ex_data');
  late final _BIO_set_ex_data =
      _BIO_set_ex_dataPtr.asFunction<
        int Function(ffi.Pointer<BIO>, int, ffi.Pointer<ffi.Void>)
      >();

  ffi.Pointer<ffi.Void> BIO_get_ex_data(ffi.Pointer<BIO> bio, int idx) {
    return _BIO_get_ex_data(bio, idx);
  }

  late final _BIO_get_ex_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>, ffi.Int)
        >
      >('BIO_get_ex_data');
  late final _BIO_get_ex_data =
      _BIO_get_ex_dataPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>, int)
      >();

  ffi.Pointer<BIO_METHOD> BIO_f_base64() {
    return _BIO_f_base64();
  }

  late final _BIO_f_base64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
        'BIO_f_base64',
      );
  late final _BIO_f_base64 =
      _BIO_f_base64Ptr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  void BIO_set_retry_special(ffi.Pointer<BIO> bio) {
    return _BIO_set_retry_special(bio);
  }

  late final _BIO_set_retry_specialPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
        'BIO_set_retry_special',
      );
  late final _BIO_set_retry_special =
      _BIO_set_retry_specialPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  int BIO_set_write_buffer_size(ffi.Pointer<BIO> bio, int buffer_size) {
    return _BIO_set_write_buffer_size(bio, buffer_size);
  }

  late final _BIO_set_write_buffer_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int)>>(
        'BIO_set_write_buffer_size',
      );
  late final _BIO_set_write_buffer_size =
      _BIO_set_write_buffer_sizePtr.asFunction<
        int Function(ffi.Pointer<BIO>, int)
      >();

  void BIO_set_shutdown(ffi.Pointer<BIO> bio, int shutdown) {
    return _BIO_set_shutdown(bio, shutdown);
  }

  late final _BIO_set_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
        'BIO_set_shutdown',
      );
  late final _BIO_set_shutdown =
      _BIO_set_shutdownPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  int BIO_get_shutdown(ffi.Pointer<BIO> bio) {
    return _BIO_get_shutdown(bio);
  }

  late final _BIO_get_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
        'BIO_get_shutdown',
      );
  late final _BIO_get_shutdown =
      _BIO_get_shutdownPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_meth_set_puts(
    ffi.Pointer<BIO_METHOD> method,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
      >
    >
    puts,
  ) {
    return _BIO_meth_set_puts(method, puts);
  }

  late final _BIO_meth_set_putsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO_METHOD>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
              >
            >,
          )
        >
      >('BIO_meth_set_puts');
  late final _BIO_meth_set_puts =
      _BIO_meth_set_putsPtr.asFunction<
        int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
            >
          >,
        )
      >();

  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >
  BIO_meth_get_write(ffi.Pointer<BIO_METHOD> method) {
    return _BIO_meth_get_write(method);
  }

  late final _BIO_meth_get_writePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
            >
          >
          Function(ffi.Pointer<BIO_METHOD>)
        >
      >('BIO_meth_get_write');
  late final _BIO_meth_get_write =
      _BIO_meth_get_writePtr.asFunction<
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
          >
        >
        Function(ffi.Pointer<BIO_METHOD>)
      >();

  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >
  BIO_meth_get_read(ffi.Pointer<BIO_METHOD> method) {
    return _BIO_meth_get_read(method);
  }

  late final _BIO_meth_get_readPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
            >
          >
          Function(ffi.Pointer<BIO_METHOD>)
        >
      >('BIO_meth_get_read');
  late final _BIO_meth_get_read =
      _BIO_meth_get_readPtr.asFunction<
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
          >
        >
        Function(ffi.Pointer<BIO_METHOD>)
      >();

  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >
  BIO_meth_get_gets(ffi.Pointer<BIO_METHOD> method) {
    return _BIO_meth_get_gets(method);
  }

  late final _BIO_meth_get_getsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
            >
          >
          Function(ffi.Pointer<BIO_METHOD>)
        >
      >('BIO_meth_get_gets');
  late final _BIO_meth_get_gets =
      _BIO_meth_get_getsPtr.asFunction<
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
          >
        >
        Function(ffi.Pointer<BIO_METHOD>)
      >();

  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
    >
  >
  BIO_meth_get_puts(ffi.Pointer<BIO_METHOD> method) {
    return _BIO_meth_get_puts(method);
  }

  late final _BIO_meth_get_putsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
            >
          >
          Function(ffi.Pointer<BIO_METHOD>)
        >
      >('BIO_meth_get_puts');
  late final _BIO_meth_get_puts =
      _BIO_meth_get_putsPtr.asFunction<
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
          >
        >
        Function(ffi.Pointer<BIO_METHOD>)
      >();

  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Long Function(
        ffi.Pointer<BIO>,
        ffi.Int,
        ffi.Long,
        ffi.Pointer<ffi.Void>,
      )
    >
  >
  BIO_meth_get_ctrl(ffi.Pointer<BIO_METHOD> method) {
    return _BIO_meth_get_ctrl(method);
  }

  late final _BIO_meth_get_ctrlPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Long Function(
                ffi.Pointer<BIO>,
                ffi.Int,
                ffi.Long,
                ffi.Pointer<ffi.Void>,
              )
            >
          >
          Function(ffi.Pointer<BIO_METHOD>)
        >
      >('BIO_meth_get_ctrl');
  late final _BIO_meth_get_ctrl =
      _BIO_meth_get_ctrlPtr.asFunction<
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Long Function(
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Long,
              ffi.Pointer<ffi.Void>,
            )
          >
        >
        Function(ffi.Pointer<BIO_METHOD>)
      >();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
  BIO_meth_get_create(ffi.Pointer<BIO_METHOD> method) {
    return _BIO_meth_get_create(method);
  }

  late final _BIO_meth_get_createPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
          Function(ffi.Pointer<BIO_METHOD>)
        >
      >('BIO_meth_get_create');
  late final _BIO_meth_get_create =
      _BIO_meth_get_createPtr.asFunction<
        ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
        Function(ffi.Pointer<BIO_METHOD>)
      >();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
  BIO_meth_get_destroy(ffi.Pointer<BIO_METHOD> method) {
    return _BIO_meth_get_destroy(method);
  }

  late final _BIO_meth_get_destroyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
          Function(ffi.Pointer<BIO_METHOD>)
        >
      >('BIO_meth_get_destroy');
  late final _BIO_meth_get_destroy =
      _BIO_meth_get_destroyPtr.asFunction<
        ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
        Function(ffi.Pointer<BIO_METHOD>)
      >();

  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)
    >
  >
  BIO_meth_get_callback_ctrl(ffi.Pointer<BIO_METHOD> method) {
    return _BIO_meth_get_callback_ctrl(method);
  }

  late final _BIO_meth_get_callback_ctrlPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Long Function(
                ffi.Pointer<BIO>,
                ffi.Int,
                ffi.Pointer<BIO_info_cb>,
              )
            >
          >
          Function(ffi.Pointer<BIO_METHOD>)
        >
      >('BIO_meth_get_callback_ctrl');
  late final _BIO_meth_get_callback_ctrl =
      _BIO_meth_get_callback_ctrlPtr.asFunction<
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Long Function(
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Pointer<BIO_info_cb>,
            )
          >
        >
        Function(ffi.Pointer<BIO_METHOD>)
      >();

  int CBS_skip(ffi.Pointer<CBS> cbs, int len) {
    return _CBS_skip(cbs, len);
  }

  late final _CBS_skipPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBS>, ffi.Size)>>(
        'CBS_skip',
      );
  late final _CBS_skip =
      _CBS_skipPtr.asFunction<int Function(ffi.Pointer<CBS>, int)>();

  int CBS_stow(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_ptr,
    ffi.Pointer<ffi.Size> out_len,
  ) {
    return _CBS_stow(cbs, out_ptr, out_len);
  }

  late final _CBS_stowPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBS>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('CBS_stow');
  late final _CBS_stow =
      _CBS_stowPtr.asFunction<
        int Function(
          ffi.Pointer<CBS>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  int CBS_strdup(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_ptr,
  ) {
    return _CBS_strdup(cbs, out_ptr);
  }

  late final _CBS_strdupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Pointer<ffi.Char>>)
        >
      >('CBS_strdup');
  late final _CBS_strdup =
      _CBS_strdupPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Pointer<ffi.Char>>)
      >();

  int CBS_contains_zero_byte(ffi.Pointer<CBS> cbs) {
    return _CBS_contains_zero_byte(cbs);
  }

  late final _CBS_contains_zero_bytePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBS>)>>(
        'CBS_contains_zero_byte',
      );
  late final _CBS_contains_zero_byte =
      _CBS_contains_zero_bytePtr.asFunction<int Function(ffi.Pointer<CBS>)>();

  int CBS_mem_equal(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<ffi.Uint8> data,
    int len,
  ) {
    return _CBS_mem_equal(cbs, data, len);
  }

  late final _CBS_mem_equalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint8>, ffi.Size)
        >
      >('CBS_mem_equal');
  late final _CBS_mem_equal =
      _CBS_mem_equalPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int CBS_get_u8(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint8> out) {
    return _CBS_get_u8(cbs, out);
  }

  late final _CBS_get_u8Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint8>)
        >
      >('CBS_get_u8');
  late final _CBS_get_u8 =
      _CBS_get_u8Ptr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint8>)
      >();

  int CBS_get_u16(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint16> out) {
    return _CBS_get_u16(cbs, out);
  }

  late final _CBS_get_u16Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint16>)
        >
      >('CBS_get_u16');
  late final _CBS_get_u16 =
      _CBS_get_u16Ptr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint16>)
      >();

  int CBS_get_u16le(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint16> out) {
    return _CBS_get_u16le(cbs, out);
  }

  late final _CBS_get_u16lePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint16>)
        >
      >('CBS_get_u16le');
  late final _CBS_get_u16le =
      _CBS_get_u16lePtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint16>)
      >();

  int CBS_get_u24(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint32> out) {
    return _CBS_get_u24(cbs, out);
  }

  late final _CBS_get_u24Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
        >
      >('CBS_get_u24');
  late final _CBS_get_u24 =
      _CBS_get_u24Ptr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
      >();

  int CBS_get_u32(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint32> out) {
    return _CBS_get_u32(cbs, out);
  }

  late final _CBS_get_u32Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
        >
      >('CBS_get_u32');
  late final _CBS_get_u32 =
      _CBS_get_u32Ptr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
      >();

  int CBS_get_u32le(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint32> out) {
    return _CBS_get_u32le(cbs, out);
  }

  late final _CBS_get_u32lePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
        >
      >('CBS_get_u32le');
  late final _CBS_get_u32le =
      _CBS_get_u32lePtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
      >();

  int CBS_get_u64(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint64> out) {
    return _CBS_get_u64(cbs, out);
  }

  late final _CBS_get_u64Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint64>)
        >
      >('CBS_get_u64');
  late final _CBS_get_u64 =
      _CBS_get_u64Ptr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint64>)
      >();

  int CBS_get_u64le(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint64> out) {
    return _CBS_get_u64le(cbs, out);
  }

  late final _CBS_get_u64lePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint64>)
        >
      >('CBS_get_u64le');
  late final _CBS_get_u64le =
      _CBS_get_u64lePtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint64>)
      >();

  int CBS_get_last_u8(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint8> out) {
    return _CBS_get_last_u8(cbs, out);
  }

  late final _CBS_get_last_u8Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint8>)
        >
      >('CBS_get_last_u8');
  late final _CBS_get_last_u8 =
      _CBS_get_last_u8Ptr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint8>)
      >();

  int CBS_get_bytes(ffi.Pointer<CBS> cbs, ffi.Pointer<CBS> out, int len) {
    return _CBS_get_bytes(cbs, out, len);
  }

  late final _CBS_get_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>, ffi.Size)
        >
      >('CBS_get_bytes');
  late final _CBS_get_bytes =
      _CBS_get_bytesPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>, int)
      >();

  int CBS_copy_bytes(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<ffi.Uint8> out,
    int len,
  ) {
    return _CBS_copy_bytes(cbs, out, len);
  }

  late final _CBS_copy_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint8>, ffi.Size)
        >
      >('CBS_copy_bytes');
  late final _CBS_copy_bytes =
      _CBS_copy_bytesPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int CBS_get_u8_length_prefixed(ffi.Pointer<CBS> cbs, ffi.Pointer<CBS> out) {
    return _CBS_get_u8_length_prefixed(cbs, out);
  }

  late final _CBS_get_u8_length_prefixedPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>)>
      >('CBS_get_u8_length_prefixed');
  late final _CBS_get_u8_length_prefixed =
      _CBS_get_u8_length_prefixedPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>)
      >();

  int CBS_get_u16_length_prefixed(ffi.Pointer<CBS> cbs, ffi.Pointer<CBS> out) {
    return _CBS_get_u16_length_prefixed(cbs, out);
  }

  late final _CBS_get_u16_length_prefixedPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>)>
      >('CBS_get_u16_length_prefixed');
  late final _CBS_get_u16_length_prefixed =
      _CBS_get_u16_length_prefixedPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>)
      >();

  int CBS_get_u24_length_prefixed(ffi.Pointer<CBS> cbs, ffi.Pointer<CBS> out) {
    return _CBS_get_u24_length_prefixed(cbs, out);
  }

  late final _CBS_get_u24_length_prefixedPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>)>
      >('CBS_get_u24_length_prefixed');
  late final _CBS_get_u24_length_prefixed =
      _CBS_get_u24_length_prefixedPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>)
      >();

  int CBS_get_until_first(ffi.Pointer<CBS> cbs, ffi.Pointer<CBS> out, int c) {
    return _CBS_get_until_first(cbs, out, c);
  }

  late final _CBS_get_until_firstPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>, ffi.Uint8)
        >
      >('CBS_get_until_first');
  late final _CBS_get_until_first =
      _CBS_get_until_firstPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>, int)
      >();

  int CBS_get_u64_decimal(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint64> out) {
    return _CBS_get_u64_decimal(cbs, out);
  }

  late final _CBS_get_u64_decimalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint64>)
        >
      >('CBS_get_u64_decimal');
  late final _CBS_get_u64_decimal =
      _CBS_get_u64_decimalPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint64>)
      >();

  int CBS_get_asn1(ffi.Pointer<CBS> cbs, ffi.Pointer<CBS> out, int tag_value) {
    return _CBS_get_asn1(cbs, out, tag_value);
  }

  late final _CBS_get_asn1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>, CBS_ASN1_TAG)
        >
      >('CBS_get_asn1');
  late final _CBS_get_asn1 =
      _CBS_get_asn1Ptr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>, int)
      >();

  int CBS_get_asn1_element(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<CBS> out,
    int tag_value,
  ) {
    return _CBS_get_asn1_element(cbs, out, tag_value);
  }

  late final _CBS_get_asn1_elementPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>, CBS_ASN1_TAG)
        >
      >('CBS_get_asn1_element');
  late final _CBS_get_asn1_element =
      _CBS_get_asn1_elementPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<CBS>, int)
      >();

  int CBS_peek_asn1_tag(ffi.Pointer<CBS> cbs, int tag_value) {
    return _CBS_peek_asn1_tag(cbs, tag_value);
  }

  late final _CBS_peek_asn1_tagPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBS>, CBS_ASN1_TAG)>
      >('CBS_peek_asn1_tag');
  late final _CBS_peek_asn1_tag =
      _CBS_peek_asn1_tagPtr.asFunction<int Function(ffi.Pointer<CBS>, int)>();

  int CBS_get_any_asn1(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<CBS> out,
    ffi.Pointer<CBS_ASN1_TAG> out_tag,
  ) {
    return _CBS_get_any_asn1(cbs, out, out_tag);
  }

  late final _CBS_get_any_asn1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBS>,
            ffi.Pointer<CBS>,
            ffi.Pointer<CBS_ASN1_TAG>,
          )
        >
      >('CBS_get_any_asn1');
  late final _CBS_get_any_asn1 =
      _CBS_get_any_asn1Ptr.asFunction<
        int Function(
          ffi.Pointer<CBS>,
          ffi.Pointer<CBS>,
          ffi.Pointer<CBS_ASN1_TAG>,
        )
      >();

  int CBS_get_any_asn1_element(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<CBS> out,
    ffi.Pointer<CBS_ASN1_TAG> out_tag,
    ffi.Pointer<ffi.Size> out_header_len,
  ) {
    return _CBS_get_any_asn1_element(cbs, out, out_tag, out_header_len);
  }

  late final _CBS_get_any_asn1_elementPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBS>,
            ffi.Pointer<CBS>,
            ffi.Pointer<CBS_ASN1_TAG>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('CBS_get_any_asn1_element');
  late final _CBS_get_any_asn1_element =
      _CBS_get_any_asn1_elementPtr.asFunction<
        int Function(
          ffi.Pointer<CBS>,
          ffi.Pointer<CBS>,
          ffi.Pointer<CBS_ASN1_TAG>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  int CBS_get_any_ber_asn1_element(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<CBS> out,
    ffi.Pointer<CBS_ASN1_TAG> out_tag,
    ffi.Pointer<ffi.Size> out_header_len,
    ffi.Pointer<ffi.Int> out_ber_found,
    ffi.Pointer<ffi.Int> out_indefinite,
  ) {
    return _CBS_get_any_ber_asn1_element(
      cbs,
      out,
      out_tag,
      out_header_len,
      out_ber_found,
      out_indefinite,
    );
  }

  late final _CBS_get_any_ber_asn1_elementPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBS>,
            ffi.Pointer<CBS>,
            ffi.Pointer<CBS_ASN1_TAG>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('CBS_get_any_ber_asn1_element');
  late final _CBS_get_any_ber_asn1_element =
      _CBS_get_any_ber_asn1_elementPtr.asFunction<
        int Function(
          ffi.Pointer<CBS>,
          ffi.Pointer<CBS>,
          ffi.Pointer<CBS_ASN1_TAG>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int CBS_get_asn1_uint64(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint64> out) {
    return _CBS_get_asn1_uint64(cbs, out);
  }

  late final _CBS_get_asn1_uint64Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint64>)
        >
      >('CBS_get_asn1_uint64');
  late final _CBS_get_asn1_uint64 =
      _CBS_get_asn1_uint64Ptr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint64>)
      >();

  int CBS_get_asn1_uint64_with_tag(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<ffi.Uint64> out,
    int tag,
  ) {
    return _CBS_get_asn1_uint64_with_tag(cbs, out, tag);
  }

  late final _CBS_get_asn1_uint64_with_tagPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBS>,
            ffi.Pointer<ffi.Uint64>,
            CBS_ASN1_TAG,
          )
        >
      >('CBS_get_asn1_uint64_with_tag');
  late final _CBS_get_asn1_uint64_with_tag =
      _CBS_get_asn1_uint64_with_tagPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint64>, int)
      >();

  int CBS_get_asn1_int64(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Int64> out) {
    return _CBS_get_asn1_int64(cbs, out);
  }

  late final _CBS_get_asn1_int64Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Int64>)
        >
      >('CBS_get_asn1_int64');
  late final _CBS_get_asn1_int64 =
      _CBS_get_asn1_int64Ptr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Int64>)
      >();

  int CBS_get_asn1_int64_with_tag(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<ffi.Int64> out,
    int tag,
  ) {
    return _CBS_get_asn1_int64_with_tag(cbs, out, tag);
  }

  late final _CBS_get_asn1_int64_with_tagPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBS>,
            ffi.Pointer<ffi.Int64>,
            CBS_ASN1_TAG,
          )
        >
      >('CBS_get_asn1_int64_with_tag');
  late final _CBS_get_asn1_int64_with_tag =
      _CBS_get_asn1_int64_with_tagPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Int64>, int)
      >();

  int CBS_get_asn1_bool(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Int> out) {
    return _CBS_get_asn1_bool(cbs, out);
  }

  late final _CBS_get_asn1_boolPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Int>)
        >
      >('CBS_get_asn1_bool');
  late final _CBS_get_asn1_bool =
      _CBS_get_asn1_boolPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Int>)
      >();

  int CBS_get_optional_asn1(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<CBS> out,
    ffi.Pointer<ffi.Int> out_present,
    int tag,
  ) {
    return _CBS_get_optional_asn1(cbs, out, out_present, tag);
  }

  late final _CBS_get_optional_asn1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBS>,
            ffi.Pointer<CBS>,
            ffi.Pointer<ffi.Int>,
            CBS_ASN1_TAG,
          )
        >
      >('CBS_get_optional_asn1');
  late final _CBS_get_optional_asn1 =
      _CBS_get_optional_asn1Ptr.asFunction<
        int Function(
          ffi.Pointer<CBS>,
          ffi.Pointer<CBS>,
          ffi.Pointer<ffi.Int>,
          int,
        )
      >();

  int CBS_get_optional_asn1_octet_string(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<CBS> out,
    ffi.Pointer<ffi.Int> out_present,
    int tag,
  ) {
    return _CBS_get_optional_asn1_octet_string(cbs, out, out_present, tag);
  }

  late final _CBS_get_optional_asn1_octet_stringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBS>,
            ffi.Pointer<CBS>,
            ffi.Pointer<ffi.Int>,
            CBS_ASN1_TAG,
          )
        >
      >('CBS_get_optional_asn1_octet_string');
  late final _CBS_get_optional_asn1_octet_string =
      _CBS_get_optional_asn1_octet_stringPtr.asFunction<
        int Function(
          ffi.Pointer<CBS>,
          ffi.Pointer<CBS>,
          ffi.Pointer<ffi.Int>,
          int,
        )
      >();

  int CBS_get_optional_asn1_uint64(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<ffi.Uint64> out,
    int tag,
    int default_value,
  ) {
    return _CBS_get_optional_asn1_uint64(cbs, out, tag, default_value);
  }

  late final _CBS_get_optional_asn1_uint64Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBS>,
            ffi.Pointer<ffi.Uint64>,
            CBS_ASN1_TAG,
            ffi.Uint64,
          )
        >
      >('CBS_get_optional_asn1_uint64');
  late final _CBS_get_optional_asn1_uint64 =
      _CBS_get_optional_asn1_uint64Ptr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint64>, int, int)
      >();

  int CBS_get_optional_asn1_bool(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<ffi.Int> out,
    int tag,
    int default_value,
  ) {
    return _CBS_get_optional_asn1_bool(cbs, out, tag, default_value);
  }

  late final _CBS_get_optional_asn1_boolPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBS>,
            ffi.Pointer<ffi.Int>,
            CBS_ASN1_TAG,
            ffi.Int,
          )
        >
      >('CBS_get_optional_asn1_bool');
  late final _CBS_get_optional_asn1_bool =
      _CBS_get_optional_asn1_boolPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Int>, int, int)
      >();

  int CBS_is_valid_asn1_bitstring(ffi.Pointer<CBS> cbs) {
    return _CBS_is_valid_asn1_bitstring(cbs);
  }

  late final _CBS_is_valid_asn1_bitstringPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBS>)>>(
        'CBS_is_valid_asn1_bitstring',
      );
  late final _CBS_is_valid_asn1_bitstring =
      _CBS_is_valid_asn1_bitstringPtr.asFunction<
        int Function(ffi.Pointer<CBS>)
      >();

  int CBS_asn1_bitstring_has_bit(ffi.Pointer<CBS> cbs, int bit) {
    return _CBS_asn1_bitstring_has_bit(cbs, bit);
  }

  late final _CBS_asn1_bitstring_has_bitPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBS>, ffi.UnsignedInt)>
      >('CBS_asn1_bitstring_has_bit');
  late final _CBS_asn1_bitstring_has_bit =
      _CBS_asn1_bitstring_has_bitPtr.asFunction<
        int Function(ffi.Pointer<CBS>, int)
      >();

  int CBS_is_valid_asn1_integer(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<ffi.Int> out_is_negative,
  ) {
    return _CBS_is_valid_asn1_integer(cbs, out_is_negative);
  }

  late final _CBS_is_valid_asn1_integerPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Int>)
        >
      >('CBS_is_valid_asn1_integer');
  late final _CBS_is_valid_asn1_integer =
      _CBS_is_valid_asn1_integerPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Int>)
      >();

  int CBS_is_unsigned_asn1_integer(ffi.Pointer<CBS> cbs) {
    return _CBS_is_unsigned_asn1_integer(cbs);
  }

  late final _CBS_is_unsigned_asn1_integerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBS>)>>(
        'CBS_is_unsigned_asn1_integer',
      );
  late final _CBS_is_unsigned_asn1_integer =
      _CBS_is_unsigned_asn1_integerPtr.asFunction<
        int Function(ffi.Pointer<CBS>)
      >();

  int CBS_is_valid_asn1_oid(ffi.Pointer<CBS> cbs) {
    return _CBS_is_valid_asn1_oid(cbs);
  }

  late final _CBS_is_valid_asn1_oidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBS>)>>(
        'CBS_is_valid_asn1_oid',
      );
  late final _CBS_is_valid_asn1_oid =
      _CBS_is_valid_asn1_oidPtr.asFunction<int Function(ffi.Pointer<CBS>)>();

  ffi.Pointer<ffi.Char> CBS_asn1_oid_to_text(ffi.Pointer<CBS> cbs) {
    return _CBS_asn1_oid_to_text(cbs);
  }

  late final _CBS_asn1_oid_to_textPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<CBS>)>
      >('CBS_asn1_oid_to_text');
  late final _CBS_asn1_oid_to_text =
      _CBS_asn1_oid_to_textPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<CBS>)
      >();

  int CBS_parse_generalized_time(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<tm> out_tm,
    int allow_timezone_offset,
  ) {
    return _CBS_parse_generalized_time(cbs, out_tm, allow_timezone_offset);
  }

  late final _CBS_parse_generalized_timePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<tm>, ffi.Int)
        >
      >('CBS_parse_generalized_time');
  late final _CBS_parse_generalized_time =
      _CBS_parse_generalized_timePtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<tm>, int)
      >();

  int CBS_parse_utc_time(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<tm> out_tm,
    int allow_timezone_offset,
  ) {
    return _CBS_parse_utc_time(cbs, out_tm, allow_timezone_offset);
  }

  late final _CBS_parse_utc_timePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<tm>, ffi.Int)
        >
      >('CBS_parse_utc_time');
  late final _CBS_parse_utc_time =
      _CBS_parse_utc_timePtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<tm>, int)
      >();

  void CBB_zero(ffi.Pointer<CBB> cbb) {
    return _CBB_zero(cbb);
  }

  late final _CBB_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CBB>)>>(
        'CBB_zero',
      );
  late final _CBB_zero =
      _CBB_zeroPtr.asFunction<void Function(ffi.Pointer<CBB>)>();

  int CBB_init(ffi.Pointer<CBB> cbb, int initial_capacity) {
    return _CBB_init(cbb, initial_capacity);
  }

  late final _CBB_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Size)>>(
        'CBB_init',
      );
  late final _CBB_init =
      _CBB_initPtr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_init_fixed(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<ffi.Uint8> buf,
    int len,
  ) {
    return _CBB_init_fixed(cbb, buf, len);
  }

  late final _CBB_init_fixedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<ffi.Uint8>, ffi.Size)
        >
      >('CBB_init_fixed');
  late final _CBB_init_fixed =
      _CBB_init_fixedPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<ffi.Uint8>, int)
      >();

  void CBB_cleanup(ffi.Pointer<CBB> cbb) {
    return _CBB_cleanup(cbb);
  }

  late final _CBB_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CBB>)>>(
        'CBB_cleanup',
      );
  late final _CBB_cleanup =
      _CBB_cleanupPtr.asFunction<void Function(ffi.Pointer<CBB>)>();

  int CBB_finish(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_data,
    ffi.Pointer<ffi.Size> out_len,
  ) {
    return _CBB_finish(cbb, out_data, out_len);
  }

  late final _CBB_finishPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBB>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('CBB_finish');
  late final _CBB_finish =
      _CBB_finishPtr.asFunction<
        int Function(
          ffi.Pointer<CBB>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  int CBB_flush(ffi.Pointer<CBB> cbb) {
    return _CBB_flush(cbb);
  }

  late final _CBB_flushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>)>>(
        'CBB_flush',
      );
  late final _CBB_flush =
      _CBB_flushPtr.asFunction<int Function(ffi.Pointer<CBB>)>();

  ffi.Pointer<ffi.Uint8> CBB_data(ffi.Pointer<CBB> cbb) {
    return _CBB_data(cbb);
  }

  late final _CBB_dataPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<CBB>)>
      >('CBB_data');
  late final _CBB_data =
      _CBB_dataPtr.asFunction<
        ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<CBB>)
      >();

  int CBB_len(ffi.Pointer<CBB> cbb) {
    return _CBB_len(cbb);
  }

  late final _CBB_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CBB>)>>(
        'CBB_len',
      );
  late final _CBB_len =
      _CBB_lenPtr.asFunction<int Function(ffi.Pointer<CBB>)>();

  int CBB_add_u8_length_prefixed(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<CBB> out_contents,
  ) {
    return _CBB_add_u8_length_prefixed(cbb, out_contents);
  }

  late final _CBB_add_u8_length_prefixedPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<CBB>)>
      >('CBB_add_u8_length_prefixed');
  late final _CBB_add_u8_length_prefixed =
      _CBB_add_u8_length_prefixedPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<CBB>)
      >();

  int CBB_add_u16_length_prefixed(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<CBB> out_contents,
  ) {
    return _CBB_add_u16_length_prefixed(cbb, out_contents);
  }

  late final _CBB_add_u16_length_prefixedPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<CBB>)>
      >('CBB_add_u16_length_prefixed');
  late final _CBB_add_u16_length_prefixed =
      _CBB_add_u16_length_prefixedPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<CBB>)
      >();

  int CBB_add_u24_length_prefixed(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<CBB> out_contents,
  ) {
    return _CBB_add_u24_length_prefixed(cbb, out_contents);
  }

  late final _CBB_add_u24_length_prefixedPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<CBB>)>
      >('CBB_add_u24_length_prefixed');
  late final _CBB_add_u24_length_prefixed =
      _CBB_add_u24_length_prefixedPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<CBB>)
      >();

  int CBB_add_asn1(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<CBB> out_contents,
    int tag,
  ) {
    return _CBB_add_asn1(cbb, out_contents, tag);
  }

  late final _CBB_add_asn1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<CBB>, CBS_ASN1_TAG)
        >
      >('CBB_add_asn1');
  late final _CBB_add_asn1 =
      _CBB_add_asn1Ptr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<CBB>, int)
      >();

  int CBB_add_bytes(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<ffi.Uint8> data,
    int len,
  ) {
    return _CBB_add_bytes(cbb, data, len);
  }

  late final _CBB_add_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<ffi.Uint8>, ffi.Size)
        >
      >('CBB_add_bytes');
  late final _CBB_add_bytes =
      _CBB_add_bytesPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int CBB_add_zeros(ffi.Pointer<CBB> cbb, int len) {
    return _CBB_add_zeros(cbb, len);
  }

  late final _CBB_add_zerosPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Size)>>(
        'CBB_add_zeros',
      );
  late final _CBB_add_zeros =
      _CBB_add_zerosPtr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_space(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_data,
    int len,
  ) {
    return _CBB_add_space(cbb, out_data, len);
  }

  late final _CBB_add_spacePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBB>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Size,
          )
        >
      >('CBB_add_space');
  late final _CBB_add_space =
      _CBB_add_spacePtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>, int)
      >();

  int CBB_reserve(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_data,
    int len,
  ) {
    return _CBB_reserve(cbb, out_data, len);
  }

  late final _CBB_reservePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBB>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Size,
          )
        >
      >('CBB_reserve');
  late final _CBB_reserve =
      _CBB_reservePtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>, int)
      >();

  int CBB_did_write(ffi.Pointer<CBB> cbb, int len) {
    return _CBB_did_write(cbb, len);
  }

  late final _CBB_did_writePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Size)>>(
        'CBB_did_write',
      );
  late final _CBB_did_write =
      _CBB_did_writePtr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_u8(ffi.Pointer<CBB> cbb, int value) {
    return _CBB_add_u8(cbb, value);
  }

  late final _CBB_add_u8Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint8)>
      >('CBB_add_u8');
  late final _CBB_add_u8 =
      _CBB_add_u8Ptr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_u16(ffi.Pointer<CBB> cbb, int value) {
    return _CBB_add_u16(cbb, value);
  }

  late final _CBB_add_u16Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint16)>
      >('CBB_add_u16');
  late final _CBB_add_u16 =
      _CBB_add_u16Ptr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_u16le(ffi.Pointer<CBB> cbb, int value) {
    return _CBB_add_u16le(cbb, value);
  }

  late final _CBB_add_u16lePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint16)>
      >('CBB_add_u16le');
  late final _CBB_add_u16le =
      _CBB_add_u16lePtr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_u24(ffi.Pointer<CBB> cbb, int value) {
    return _CBB_add_u24(cbb, value);
  }

  late final _CBB_add_u24Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint32)>
      >('CBB_add_u24');
  late final _CBB_add_u24 =
      _CBB_add_u24Ptr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_u32(ffi.Pointer<CBB> cbb, int value) {
    return _CBB_add_u32(cbb, value);
  }

  late final _CBB_add_u32Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint32)>
      >('CBB_add_u32');
  late final _CBB_add_u32 =
      _CBB_add_u32Ptr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_u32le(ffi.Pointer<CBB> cbb, int value) {
    return _CBB_add_u32le(cbb, value);
  }

  late final _CBB_add_u32lePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint32)>
      >('CBB_add_u32le');
  late final _CBB_add_u32le =
      _CBB_add_u32lePtr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_u64(ffi.Pointer<CBB> cbb, int value) {
    return _CBB_add_u64(cbb, value);
  }

  late final _CBB_add_u64Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint64)>
      >('CBB_add_u64');
  late final _CBB_add_u64 =
      _CBB_add_u64Ptr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_u64le(ffi.Pointer<CBB> cbb, int value) {
    return _CBB_add_u64le(cbb, value);
  }

  late final _CBB_add_u64lePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint64)>
      >('CBB_add_u64le');
  late final _CBB_add_u64le =
      _CBB_add_u64lePtr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  void CBB_discard(ffi.Pointer<CBB> cbb, int len) {
    return _CBB_discard(cbb, len);
  }

  late final _CBB_discardPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CBB>, ffi.Size)>
      >('CBB_discard');
  late final _CBB_discard =
      _CBB_discardPtr.asFunction<void Function(ffi.Pointer<CBB>, int)>();

  void CBB_discard_child(ffi.Pointer<CBB> cbb) {
    return _CBB_discard_child(cbb);
  }

  late final _CBB_discard_childPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CBB>)>>(
        'CBB_discard_child',
      );
  late final _CBB_discard_child =
      _CBB_discard_childPtr.asFunction<void Function(ffi.Pointer<CBB>)>();

  int CBB_add_asn1_element(
    ffi.Pointer<CBB> cbb,
    int tag,
    ffi.Pointer<ffi.Uint8> data,
    int data_len,
  ) {
    return _CBB_add_asn1_element(cbb, tag, data, data_len);
  }

  late final _CBB_add_asn1_elementPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CBB>,
            CBS_ASN1_TAG,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('CBB_add_asn1_element');
  late final _CBB_add_asn1_element =
      _CBB_add_asn1_elementPtr.asFunction<
        int Function(ffi.Pointer<CBB>, int, ffi.Pointer<ffi.Uint8>, int)
      >();

  int CBB_add_asn1_uint64(ffi.Pointer<CBB> cbb, int value) {
    return _CBB_add_asn1_uint64(cbb, value);
  }

  late final _CBB_add_asn1_uint64Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint64)>
      >('CBB_add_asn1_uint64');
  late final _CBB_add_asn1_uint64 =
      _CBB_add_asn1_uint64Ptr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_asn1_uint64_with_tag(ffi.Pointer<CBB> cbb, int value, int tag) {
    return _CBB_add_asn1_uint64_with_tag(cbb, value, tag);
  }

  late final _CBB_add_asn1_uint64_with_tagPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint64, CBS_ASN1_TAG)
        >
      >('CBB_add_asn1_uint64_with_tag');
  late final _CBB_add_asn1_uint64_with_tag =
      _CBB_add_asn1_uint64_with_tagPtr.asFunction<
        int Function(ffi.Pointer<CBB>, int, int)
      >();

  int CBB_add_asn1_int64(ffi.Pointer<CBB> cbb, int value) {
    return _CBB_add_asn1_int64(cbb, value);
  }

  late final _CBB_add_asn1_int64Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Int64)>
      >('CBB_add_asn1_int64');
  late final _CBB_add_asn1_int64 =
      _CBB_add_asn1_int64Ptr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_asn1_int64_with_tag(ffi.Pointer<CBB> cbb, int value, int tag) {
    return _CBB_add_asn1_int64_with_tag(cbb, value, tag);
  }

  late final _CBB_add_asn1_int64_with_tagPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Int64, CBS_ASN1_TAG)
        >
      >('CBB_add_asn1_int64_with_tag');
  late final _CBB_add_asn1_int64_with_tag =
      _CBB_add_asn1_int64_with_tagPtr.asFunction<
        int Function(ffi.Pointer<CBB>, int, int)
      >();

  int CBB_add_asn1_octet_string(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<ffi.Uint8> data,
    int data_len,
  ) {
    return _CBB_add_asn1_octet_string(cbb, data, data_len);
  }

  late final _CBB_add_asn1_octet_stringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<ffi.Uint8>, ffi.Size)
        >
      >('CBB_add_asn1_octet_string');
  late final _CBB_add_asn1_octet_string =
      _CBB_add_asn1_octet_stringPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int CBB_add_asn1_bool(ffi.Pointer<CBB> cbb, int value) {
    return _CBB_add_asn1_bool(cbb, value);
  }

  late final _CBB_add_asn1_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Int)>>(
        'CBB_add_asn1_bool',
      );
  late final _CBB_add_asn1_bool =
      _CBB_add_asn1_boolPtr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_asn1_oid_from_text(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<ffi.Char> text,
    int len,
  ) {
    return _CBB_add_asn1_oid_from_text(cbb, text, len);
  }

  late final _CBB_add_asn1_oid_from_textPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<ffi.Char>, ffi.Size)
        >
      >('CBB_add_asn1_oid_from_text');
  late final _CBB_add_asn1_oid_from_text =
      _CBB_add_asn1_oid_from_textPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<ffi.Char>, int)
      >();

  int CBB_flush_asn1_set_of(ffi.Pointer<CBB> cbb) {
    return _CBB_flush_asn1_set_of(cbb);
  }

  late final _CBB_flush_asn1_set_ofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>)>>(
        'CBB_flush_asn1_set_of',
      );
  late final _CBB_flush_asn1_set_of =
      _CBB_flush_asn1_set_ofPtr.asFunction<int Function(ffi.Pointer<CBB>)>();

  int CBS_get_utf8(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint32> out) {
    return _CBS_get_utf8(cbs, out);
  }

  late final _CBS_get_utf8Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
        >
      >('CBS_get_utf8');
  late final _CBS_get_utf8 =
      _CBS_get_utf8Ptr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
      >();

  int CBS_get_latin1(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint32> out) {
    return _CBS_get_latin1(cbs, out);
  }

  late final _CBS_get_latin1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
        >
      >('CBS_get_latin1');
  late final _CBS_get_latin1 =
      _CBS_get_latin1Ptr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
      >();

  int CBS_get_ucs2_be(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint32> out) {
    return _CBS_get_ucs2_be(cbs, out);
  }

  late final _CBS_get_ucs2_bePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
        >
      >('CBS_get_ucs2_be');
  late final _CBS_get_ucs2_be =
      _CBS_get_ucs2_bePtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
      >();

  int CBS_get_utf32_be(ffi.Pointer<CBS> cbs, ffi.Pointer<ffi.Uint32> out) {
    return _CBS_get_utf32_be(cbs, out);
  }

  late final _CBS_get_utf32_bePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
        >
      >('CBS_get_utf32_be');
  late final _CBS_get_utf32_be =
      _CBS_get_utf32_bePtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<ffi.Uint32>)
      >();

  int CBB_get_utf8_len(int u) {
    return _CBB_get_utf8_len(u);
  }

  late final _CBB_get_utf8_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Uint32)>>(
        'CBB_get_utf8_len',
      );
  late final _CBB_get_utf8_len =
      _CBB_get_utf8_lenPtr.asFunction<int Function(int)>();

  int CBB_add_utf8(ffi.Pointer<CBB> cbb, int u) {
    return _CBB_add_utf8(cbb, u);
  }

  late final _CBB_add_utf8Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint32)>
      >('CBB_add_utf8');
  late final _CBB_add_utf8 =
      _CBB_add_utf8Ptr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_latin1(ffi.Pointer<CBB> cbb, int u) {
    return _CBB_add_latin1(cbb, u);
  }

  late final _CBB_add_latin1Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint32)>
      >('CBB_add_latin1');
  late final _CBB_add_latin1 =
      _CBB_add_latin1Ptr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_ucs2_be(ffi.Pointer<CBB> cbb, int u) {
    return _CBB_add_ucs2_be(cbb, u);
  }

  late final _CBB_add_ucs2_bePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint32)>
      >('CBB_add_ucs2_be');
  late final _CBB_add_ucs2_be =
      _CBB_add_ucs2_bePtr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  int CBB_add_utf32_be(ffi.Pointer<CBB> cbb, int u) {
    return _CBB_add_utf32_be(cbb, u);
  }

  late final _CBB_add_utf32_bePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Uint32)>
      >('CBB_add_utf32_be');
  late final _CBB_add_utf32_be =
      _CBB_add_utf32_bePtr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  void ERR_load_BIO_strings() {
    return _ERR_load_BIO_strings();
  }

  late final _ERR_load_BIO_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ERR_load_BIO_strings');
  late final _ERR_load_BIO_strings =
      _ERR_load_BIO_stringsPtr.asFunction<void Function()>();

  void ERR_load_ERR_strings() {
    return _ERR_load_ERR_strings();
  }

  late final _ERR_load_ERR_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ERR_load_ERR_strings');
  late final _ERR_load_ERR_strings =
      _ERR_load_ERR_stringsPtr.asFunction<void Function()>();

  void ERR_load_crypto_strings() {
    return _ERR_load_crypto_strings();
  }

  late final _ERR_load_crypto_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'ERR_load_crypto_strings',
      );
  late final _ERR_load_crypto_strings =
      _ERR_load_crypto_stringsPtr.asFunction<void Function()>();

  void ERR_load_RAND_strings() {
    return _ERR_load_RAND_strings();
  }

  late final _ERR_load_RAND_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ERR_load_RAND_strings');
  late final _ERR_load_RAND_strings =
      _ERR_load_RAND_stringsPtr.asFunction<void Function()>();

  void ERR_free_strings() {
    return _ERR_free_strings();
  }

  late final _ERR_free_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ERR_free_strings');
  late final _ERR_free_strings =
      _ERR_free_stringsPtr.asFunction<void Function()>();

  int ERR_get_error() {
    return _ERR_get_error();
  }

  late final _ERR_get_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('ERR_get_error');
  late final _ERR_get_error = _ERR_get_errorPtr.asFunction<int Function()>();

  int ERR_get_error_line(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
  ) {
    return _ERR_get_error_line(file, line);
  }

  late final _ERR_get_error_linePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Uint32 Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_get_error_line');
  late final _ERR_get_error_line =
      _ERR_get_error_linePtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)
      >();

  int ERR_get_error_line_data(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_get_error_line_data(file, line, data, flags);
  }

  late final _ERR_get_error_line_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Uint32 Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_get_error_line_data');
  late final _ERR_get_error_line_data =
      _ERR_get_error_line_dataPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int ERR_peek_error() {
    return _ERR_peek_error();
  }

  late final _ERR_peek_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('ERR_peek_error');
  late final _ERR_peek_error = _ERR_peek_errorPtr.asFunction<int Function()>();

  int ERR_peek_error_line(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
  ) {
    return _ERR_peek_error_line(file, line);
  }

  late final _ERR_peek_error_linePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Uint32 Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_peek_error_line');
  late final _ERR_peek_error_line =
      _ERR_peek_error_linePtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)
      >();

  int ERR_peek_error_line_data(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_peek_error_line_data(file, line, data, flags);
  }

  late final _ERR_peek_error_line_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Uint32 Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_peek_error_line_data');
  late final _ERR_peek_error_line_data =
      _ERR_peek_error_line_dataPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int ERR_peek_last_error() {
    return _ERR_peek_last_error();
  }

  late final _ERR_peek_last_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('ERR_peek_last_error');
  late final _ERR_peek_last_error =
      _ERR_peek_last_errorPtr.asFunction<int Function()>();

  int ERR_peek_last_error_line(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
  ) {
    return _ERR_peek_last_error_line(file, line);
  }

  late final _ERR_peek_last_error_linePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Uint32 Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_peek_last_error_line');
  late final _ERR_peek_last_error_line =
      _ERR_peek_last_error_linePtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)
      >();

  int ERR_peek_last_error_line_data(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_peek_last_error_line_data(file, line, data, flags);
  }

  late final _ERR_peek_last_error_line_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Uint32 Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('ERR_peek_last_error_line_data');
  late final _ERR_peek_last_error_line_data =
      _ERR_peek_last_error_line_dataPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  ffi.Pointer<ffi.Char> ERR_error_string_n(
    int packed_error,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _ERR_error_string_n(packed_error, buf, len);
  }

  late final _ERR_error_string_nPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Uint32,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('ERR_error_string_n');
  late final _ERR_error_string_n =
      _ERR_error_string_nPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)
      >();

  ffi.Pointer<ffi.Char> ERR_lib_error_string(int packed_error) {
    return _ERR_lib_error_string(packed_error);
  }

  late final _ERR_lib_error_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Uint32)>>(
        'ERR_lib_error_string',
      );
  late final _ERR_lib_error_string =
      _ERR_lib_error_stringPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(int)
      >();

  ffi.Pointer<ffi.Char> ERR_reason_error_string(int packed_error) {
    return _ERR_reason_error_string(packed_error);
  }

  late final _ERR_reason_error_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Uint32)>>(
        'ERR_reason_error_string',
      );
  late final _ERR_reason_error_string =
      _ERR_reason_error_stringPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(int)
      >();

  ffi.Pointer<ffi.Char> ERR_lib_symbol_name(int packed_error) {
    return _ERR_lib_symbol_name(packed_error);
  }

  late final _ERR_lib_symbol_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Uint32)>>(
        'ERR_lib_symbol_name',
      );
  late final _ERR_lib_symbol_name =
      _ERR_lib_symbol_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ERR_reason_symbol_name(int packed_error) {
    return _ERR_reason_symbol_name(packed_error);
  }

  late final _ERR_reason_symbol_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Uint32)>>(
        'ERR_reason_symbol_name',
      );
  late final _ERR_reason_symbol_name =
      _ERR_reason_symbol_namePtr.asFunction<
        ffi.Pointer<ffi.Char> Function(int)
      >();

  void ERR_print_errors_cb(
    ERR_print_errors_callback_t callback,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _ERR_print_errors_cb(callback, ctx);
  }

  late final _ERR_print_errors_cbPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ERR_print_errors_callback_t, ffi.Pointer<ffi.Void>)
        >
      >('ERR_print_errors_cb');
  late final _ERR_print_errors_cb =
      _ERR_print_errors_cbPtr.asFunction<
        void Function(ERR_print_errors_callback_t, ffi.Pointer<ffi.Void>)
      >();

  void ERR_print_errors_fp(ffi.Pointer<FILE> file) {
    return _ERR_print_errors_fp(file);
  }

  late final _ERR_print_errors_fpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
        'ERR_print_errors_fp',
      );
  late final _ERR_print_errors_fp =
      _ERR_print_errors_fpPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void ERR_clear_error() {
    return _ERR_clear_error();
  }

  late final _ERR_clear_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ERR_clear_error');
  late final _ERR_clear_error =
      _ERR_clear_errorPtr.asFunction<void Function()>();

  int ERR_set_mark() {
    return _ERR_set_mark();
  }

  late final _ERR_set_markPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'ERR_set_mark',
  );
  late final _ERR_set_mark = _ERR_set_markPtr.asFunction<int Function()>();

  int ERR_pop_to_mark() {
    return _ERR_pop_to_mark();
  }

  late final _ERR_pop_to_markPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_pop_to_mark');
  late final _ERR_pop_to_mark =
      _ERR_pop_to_markPtr.asFunction<int Function()>();

  int ERR_get_next_error_library() {
    return _ERR_get_next_error_library();
  }

  late final _ERR_get_next_error_libraryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
        'ERR_get_next_error_library',
      );
  late final _ERR_get_next_error_library =
      _ERR_get_next_error_libraryPtr.asFunction<int Function()>();

  void ERR_remove_state(int pid) {
    return _ERR_remove_state(pid);
  }

  late final _ERR_remove_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
        'ERR_remove_state',
      );
  late final _ERR_remove_state =
      _ERR_remove_statePtr.asFunction<void Function(int)>();

  void ERR_remove_thread_state(ffi.Pointer<CRYPTO_THREADID> tid) {
    return _ERR_remove_thread_state(tid);
  }

  late final _ERR_remove_thread_statePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CRYPTO_THREADID>)>
      >('ERR_remove_thread_state');
  late final _ERR_remove_thread_state =
      _ERR_remove_thread_statePtr.asFunction<
        void Function(ffi.Pointer<CRYPTO_THREADID>)
      >();

  ffi.Pointer<ffi.Char> ERR_func_error_string(int packed_error) {
    return _ERR_func_error_string(packed_error);
  }

  late final _ERR_func_error_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Uint32)>>(
        'ERR_func_error_string',
      );
  late final _ERR_func_error_string =
      _ERR_func_error_stringPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(int)
      >();

  ffi.Pointer<ffi.Char> ERR_error_string(
    int packed_error,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _ERR_error_string(packed_error, buf);
  }

  late final _ERR_error_stringPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Uint32, ffi.Pointer<ffi.Char>)
        >
      >('ERR_error_string');
  late final _ERR_error_string =
      _ERR_error_stringPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)
      >();

  void ERR_clear_system_error() {
    return _ERR_clear_system_error();
  }

  late final _ERR_clear_system_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'ERR_clear_system_error',
      );
  late final _ERR_clear_system_error =
      _ERR_clear_system_errorPtr.asFunction<void Function()>();

  void ERR_put_error(
    int library1,
    int unused,
    int reason,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _ERR_put_error(library1, unused, reason, file, line);
  }

  late final _ERR_put_errorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt,
          )
        >
      >('ERR_put_error');
  late final _ERR_put_error =
      _ERR_put_errorPtr.asFunction<
        void Function(int, int, int, ffi.Pointer<ffi.Char>, int)
      >();

  void ERR_add_error_data(int count) {
    return _ERR_add_error_data(count);
  }

  late final _ERR_add_error_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
        'ERR_add_error_data',
      );
  late final _ERR_add_error_data =
      _ERR_add_error_dataPtr.asFunction<void Function(int)>();

  void ERR_add_error_dataf(ffi.Pointer<ffi.Char> format) {
    return _ERR_add_error_dataf(format);
  }

  late final _ERR_add_error_datafPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'ERR_add_error_dataf',
      );
  late final _ERR_add_error_dataf =
      _ERR_add_error_datafPtr.asFunction<
        void Function(ffi.Pointer<ffi.Char>)
      >();

  void ERR_set_error_data(ffi.Pointer<ffi.Char> data, int flags) {
    return _ERR_set_error_data(data, flags);
  }

  late final _ERR_set_error_dataPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>
      >('ERR_set_error_data');
  late final _ERR_set_error_data =
      _ERR_set_error_dataPtr.asFunction<
        void Function(ffi.Pointer<ffi.Char>, int)
      >();

  int CRYPTO_is_confidential_build() {
    return _CRYPTO_is_confidential_build();
  }

  late final _CRYPTO_is_confidential_buildPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
        'CRYPTO_is_confidential_build',
      );
  late final _CRYPTO_is_confidential_build =
      _CRYPTO_is_confidential_buildPtr.asFunction<int Function()>();

  int CRYPTO_has_asm() {
    return _CRYPTO_has_asm();
  }

  late final _CRYPTO_has_asmPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('CRYPTO_has_asm');
  late final _CRYPTO_has_asm = _CRYPTO_has_asmPtr.asFunction<int Function()>();

  int BORINGSSL_self_test_all() {
    return _BORINGSSL_self_test_all();
  }

  late final _BORINGSSL_self_test_allPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
        'BORINGSSL_self_test_all',
      );
  late final _BORINGSSL_self_test_all =
      _BORINGSSL_self_test_allPtr.asFunction<int Function()>();

  void CRYPTO_pre_sandbox_init() {
    return _CRYPTO_pre_sandbox_init();
  }

  late final _CRYPTO_pre_sandbox_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'CRYPTO_pre_sandbox_init',
      );
  late final _CRYPTO_pre_sandbox_init =
      _CRYPTO_pre_sandbox_initPtr.asFunction<void Function()>();

  int FIPS_mode() {
    return _FIPS_mode();
  }

  late final _FIPS_modePtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'FIPS_mode',
  );
  late final _FIPS_mode = _FIPS_modePtr.asFunction<int Function()>();

  int FIPS_read_counter(fips_counter_t counter) {
    return _FIPS_read_counter(counter.value);
  }

  late final _FIPS_read_counterPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.UnsignedInt)>>(
        'FIPS_read_counter',
      );
  late final _FIPS_read_counter =
      _FIPS_read_counterPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> OpenSSL_version(int which) {
    return _OpenSSL_version(which);
  }

  late final _OpenSSL_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
        'OpenSSL_version',
      );
  late final _OpenSSL_version =
      _OpenSSL_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> SSLeay_version(int which) {
    return _SSLeay_version(which);
  }

  late final _SSLeay_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
        'SSLeay_version',
      );
  late final _SSLeay_version =
      _SSLeay_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int SSLeay() {
    return _SSLeay();
  }

  late final _SSLeayPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>('SSLeay');
  late final _SSLeay = _SSLeayPtr.asFunction<int Function()>();

  int OpenSSL_version_num() {
    return _OpenSSL_version_num();
  }

  late final _OpenSSL_version_numPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
        'OpenSSL_version_num',
      );
  late final _OpenSSL_version_num =
      _OpenSSL_version_numPtr.asFunction<int Function()>();

  int CRYPTO_malloc_init() {
    return _CRYPTO_malloc_init();
  }

  late final _CRYPTO_malloc_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('CRYPTO_malloc_init');
  late final _CRYPTO_malloc_init =
      _CRYPTO_malloc_initPtr.asFunction<int Function()>();

  int OPENSSL_malloc_init() {
    return _OPENSSL_malloc_init();
  }

  late final _OPENSSL_malloc_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OPENSSL_malloc_init');
  late final _OPENSSL_malloc_init =
      _OPENSSL_malloc_initPtr.asFunction<int Function()>();

  void ENGINE_load_builtin_engines() {
    return _ENGINE_load_builtin_engines();
  }

  late final _ENGINE_load_builtin_enginesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'ENGINE_load_builtin_engines',
      );
  late final _ENGINE_load_builtin_engines =
      _ENGINE_load_builtin_enginesPtr.asFunction<void Function()>();

  int ENGINE_register_all_complete() {
    return _ENGINE_register_all_complete();
  }

  late final _ENGINE_register_all_completePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
        'ENGINE_register_all_complete',
      );
  late final _ENGINE_register_all_complete =
      _ENGINE_register_all_completePtr.asFunction<int Function()>();

  void OPENSSL_load_builtin_modules() {
    return _OPENSSL_load_builtin_modules();
  }

  late final _OPENSSL_load_builtin_modulesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'OPENSSL_load_builtin_modules',
      );
  late final _OPENSSL_load_builtin_modules =
      _OPENSSL_load_builtin_modulesPtr.asFunction<void Function()>();

  int OPENSSL_init_crypto(
    int opts,
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
  ) {
    return _OPENSSL_init_crypto(opts, settings);
  }

  late final _OPENSSL_init_cryptoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Uint64, ffi.Pointer<OPENSSL_INIT_SETTINGS>)
        >
      >('OPENSSL_init_crypto');
  late final _OPENSSL_init_crypto =
      _OPENSSL_init_cryptoPtr.asFunction<
        int Function(int, ffi.Pointer<OPENSSL_INIT_SETTINGS>)
      >();

  void OPENSSL_cleanup() {
    return _OPENSSL_cleanup();
  }

  late final _OPENSSL_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_cleanup');
  late final _OPENSSL_cleanup =
      _OPENSSL_cleanupPtr.asFunction<void Function()>();

  int FIPS_mode_set(int on1) {
    return _FIPS_mode_set(on1);
  }

  late final _FIPS_mode_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('FIPS_mode_set');
  late final _FIPS_mode_set = _FIPS_mode_setPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> FIPS_module_name() {
    return _FIPS_module_name();
  }

  late final _FIPS_module_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
        'FIPS_module_name',
      );
  late final _FIPS_module_name =
      _FIPS_module_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Uint8> FIPS_module_hash() {
    return _FIPS_module_hash();
  }

  late final _FIPS_module_hashPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function()>>(
        'FIPS_module_hash',
      );
  late final _FIPS_module_hash =
      _FIPS_module_hashPtr.asFunction<ffi.Pointer<ffi.Uint8> Function()>();

  int FIPS_version() {
    return _FIPS_version();
  }

  late final _FIPS_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('FIPS_version');
  late final _FIPS_version = _FIPS_versionPtr.asFunction<int Function()>();

  int FIPS_query_algorithm_status(ffi.Pointer<ffi.Char> algorithm) {
    return _FIPS_query_algorithm_status(algorithm);
  }

  late final _FIPS_query_algorithm_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'FIPS_query_algorithm_status',
      );
  late final _FIPS_query_algorithm_status =
      _FIPS_query_algorithm_statusPtr.asFunction<
        int Function(ffi.Pointer<ffi.Char>)
      >();

  void CRYPTO_library_init() {
    return _CRYPTO_library_init();
  }

  late final _CRYPTO_library_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CRYPTO_library_init');
  late final _CRYPTO_library_init =
      _CRYPTO_library_initPtr.asFunction<void Function()>();

  void CRYPTO_cleanup_all_ex_data() {
    return _CRYPTO_cleanup_all_ex_data();
  }

  late final _CRYPTO_cleanup_all_ex_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'CRYPTO_cleanup_all_ex_data',
      );
  late final _CRYPTO_cleanup_all_ex_data =
      _CRYPTO_cleanup_all_ex_dataPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> OPENSSL_malloc(int size) {
    return _OPENSSL_malloc(size);
  }

  late final _OPENSSL_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
        'OPENSSL_malloc',
      );
  late final _OPENSSL_malloc =
      _OPENSSL_mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> OPENSSL_zalloc(int size) {
    return _OPENSSL_zalloc(size);
  }

  late final _OPENSSL_zallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
        'OPENSSL_zalloc',
      );
  late final _OPENSSL_zalloc =
      _OPENSSL_zallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> OPENSSL_calloc(int num, int size) {
    return _OPENSSL_calloc(num, size);
  }

  late final _OPENSSL_callocPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>
      >('OPENSSL_calloc');
  late final _OPENSSL_calloc =
      _OPENSSL_callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> OPENSSL_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int new_size,
  ) {
    return _OPENSSL_realloc(ptr, new_size);
  }

  late final _OPENSSL_reallocPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)
        >
      >('OPENSSL_realloc');
  late final _OPENSSL_realloc =
      _OPENSSL_reallocPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)
      >();

  void OPENSSL_free(ffi.Pointer<ffi.Void> ptr) {
    return _OPENSSL_free(ptr);
  }

  late final _OPENSSL_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
        'OPENSSL_free',
      );
  late final _OPENSSL_free =
      _OPENSSL_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void OPENSSL_cleanse(ffi.Pointer<ffi.Void> ptr, int len) {
    return _OPENSSL_cleanse(ptr, len);
  }

  late final _OPENSSL_cleansePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>
      >('OPENSSL_cleanse');
  late final _OPENSSL_cleanse =
      _OPENSSL_cleansePtr.asFunction<
        void Function(ffi.Pointer<ffi.Void>, int)
      >();

  int CRYPTO_memcmp(ffi.Pointer<ffi.Void> a, ffi.Pointer<ffi.Void> b, int len) {
    return _CRYPTO_memcmp(a, b, len);
  }

  late final _CRYPTO_memcmpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('CRYPTO_memcmp');
  late final _CRYPTO_memcmp =
      _CRYPTO_memcmpPtr.asFunction<
        int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)
      >();

  int OPENSSL_hash32(ffi.Pointer<ffi.Void> ptr, int len) {
    return _OPENSSL_hash32(ptr, len);
  }

  late final _OPENSSL_hash32Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>, ffi.Size)>
      >('OPENSSL_hash32');
  late final _OPENSSL_hash32 =
      _OPENSSL_hash32Ptr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int OPENSSL_strhash(ffi.Pointer<ffi.Char> s) {
    return _OPENSSL_strhash(s);
  }

  late final _OPENSSL_strhashPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Char>)>>(
        'OPENSSL_strhash',
      );
  late final _OPENSSL_strhash =
      _OPENSSL_strhashPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> OPENSSL_strdup(ffi.Pointer<ffi.Char> s) {
    return _OPENSSL_strdup(s);
  }

  late final _OPENSSL_strdupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('OPENSSL_strdup');
  late final _OPENSSL_strdup =
      _OPENSSL_strdupPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
      >();

  int OPENSSL_strnlen(ffi.Pointer<ffi.Char> s, int len) {
    return _OPENSSL_strnlen(s, len);
  }

  late final _OPENSSL_strnlenPtr =
      _lookup<
        ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>
      >('OPENSSL_strnlen');
  late final _OPENSSL_strnlen =
      _OPENSSL_strnlenPtr.asFunction<
        int Function(ffi.Pointer<ffi.Char>, int)
      >();

  int OPENSSL_isalpha(int c) {
    return _OPENSSL_isalpha(c);
  }

  late final _OPENSSL_isalphaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('OPENSSL_isalpha');
  late final _OPENSSL_isalpha =
      _OPENSSL_isalphaPtr.asFunction<int Function(int)>();

  int OPENSSL_isdigit(int c) {
    return _OPENSSL_isdigit(c);
  }

  late final _OPENSSL_isdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('OPENSSL_isdigit');
  late final _OPENSSL_isdigit =
      _OPENSSL_isdigitPtr.asFunction<int Function(int)>();

  int OPENSSL_isxdigit(int c) {
    return _OPENSSL_isxdigit(c);
  }

  late final _OPENSSL_isxdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
        'OPENSSL_isxdigit',
      );
  late final _OPENSSL_isxdigit =
      _OPENSSL_isxdigitPtr.asFunction<int Function(int)>();

  int OPENSSL_fromxdigit(ffi.Pointer<ffi.Uint8> out, int c) {
    return _OPENSSL_fromxdigit(out, c);
  }

  late final _OPENSSL_fromxdigitPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Int)>
      >('OPENSSL_fromxdigit');
  late final _OPENSSL_fromxdigit =
      _OPENSSL_fromxdigitPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, int)
      >();

  int OPENSSL_isalnum(int c) {
    return _OPENSSL_isalnum(c);
  }

  late final _OPENSSL_isalnumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('OPENSSL_isalnum');
  late final _OPENSSL_isalnum =
      _OPENSSL_isalnumPtr.asFunction<int Function(int)>();

  int OPENSSL_tolower(int c) {
    return _OPENSSL_tolower(c);
  }

  late final _OPENSSL_tolowerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('OPENSSL_tolower');
  late final _OPENSSL_tolower =
      _OPENSSL_tolowerPtr.asFunction<int Function(int)>();

  int OPENSSL_isspace(int c) {
    return _OPENSSL_isspace(c);
  }

  late final _OPENSSL_isspacePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('OPENSSL_isspace');
  late final _OPENSSL_isspace =
      _OPENSSL_isspacePtr.asFunction<int Function(int)>();

  int OPENSSL_strcasecmp(ffi.Pointer<ffi.Char> a, ffi.Pointer<ffi.Char> b) {
    return _OPENSSL_strcasecmp(a, b);
  }

  late final _OPENSSL_strcasecmpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
        >
      >('OPENSSL_strcasecmp');
  late final _OPENSSL_strcasecmp =
      _OPENSSL_strcasecmpPtr.asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
      >();

  int OPENSSL_strncasecmp(
    ffi.Pointer<ffi.Char> a,
    ffi.Pointer<ffi.Char> b,
    int n,
  ) {
    return _OPENSSL_strncasecmp(a, b, n);
  }

  late final _OPENSSL_strncasecmpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('OPENSSL_strncasecmp');
  late final _OPENSSL_strncasecmp =
      _OPENSSL_strncasecmpPtr.asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)
      >();

  int BIO_snprintf(
    ffi.Pointer<ffi.Char> buf,
    int n,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _BIO_snprintf(buf, n, format);
  }

  late final _BIO_snprintfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('BIO_snprintf');
  late final _BIO_snprintf =
      _BIO_snprintfPtr.asFunction<
        int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)
      >();

  int BIO_vsnprintf(
    ffi.Pointer<ffi.Char> buf,
    int n,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _BIO_vsnprintf(buf, n, format, args);
  }

  late final _BIO_vsnprintfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>,
          )
        >
      >('BIO_vsnprintf');
  late final _BIO_vsnprintf =
      _BIO_vsnprintfPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>,
        )
      >();

  int OPENSSL_vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> str,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _OPENSSL_vasprintf(str, format, args);
  }

  late final _OPENSSL_vasprintfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>,
          )
        >
      >('OPENSSL_vasprintf');
  late final _OPENSSL_vasprintf =
      _OPENSSL_vasprintfPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>,
        )
      >();

  int OPENSSL_asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> str,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _OPENSSL_asprintf(str, format);
  }

  late final _OPENSSL_asprintfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('OPENSSL_asprintf');
  late final _OPENSSL_asprintf =
      _OPENSSL_asprintfPtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<ffi.Char> OPENSSL_strndup(ffi.Pointer<ffi.Char> str, int size) {
    return _OPENSSL_strndup(str, size);
  }

  late final _OPENSSL_strndupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size)
        >
      >('OPENSSL_strndup');
  late final _OPENSSL_strndup =
      _OPENSSL_strndupPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)
      >();

  ffi.Pointer<ffi.Void> OPENSSL_memdup(ffi.Pointer<ffi.Void> data, int size) {
    return _OPENSSL_memdup(data, size);
  }

  late final _OPENSSL_memdupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)
        >
      >('OPENSSL_memdup');
  late final _OPENSSL_memdup =
      _OPENSSL_memdupPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)
      >();

  int OPENSSL_strlcpy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int dst_size,
  ) {
    return _OPENSSL_strlcpy(dst, src, dst_size);
  }

  late final _OPENSSL_strlcpyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('OPENSSL_strlcpy');
  late final _OPENSSL_strlcpy =
      _OPENSSL_strlcpyPtr.asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)
      >();

  int OPENSSL_strlcat(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int dst_size,
  ) {
    return _OPENSSL_strlcat(dst, src, dst_size);
  }

  late final _OPENSSL_strlcatPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
          )
        >
      >('OPENSSL_strlcat');
  late final _OPENSSL_strlcat =
      _OPENSSL_strlcatPtr.asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)
      >();

  ffi.Pointer<ffi.Void> CRYPTO_malloc(
    int size,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_malloc(size, file, line);
  }

  late final _CRYPTO_mallocPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('CRYPTO_malloc');
  late final _CRYPTO_malloc =
      _CRYPTO_mallocPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)
      >();

  ffi.Pointer<ffi.Void> CRYPTO_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int new_size,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_realloc(ptr, new_size, file, line);
  }

  late final _CRYPTO_reallocPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('CRYPTO_realloc');
  late final _CRYPTO_realloc =
      _CRYPTO_reallocPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  void CRYPTO_free(
    ffi.Pointer<ffi.Void> ptr,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_free(ptr, file, line);
  }

  late final _CRYPTO_freePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('CRYPTO_free');
  late final _CRYPTO_free =
      _CRYPTO_freePtr.asFunction<
        void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)
      >();

  void OPENSSL_clear_free(ffi.Pointer<ffi.Void> ptr, int len) {
    return _OPENSSL_clear_free(ptr, len);
  }

  late final _OPENSSL_clear_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>
      >('OPENSSL_clear_free');
  late final _OPENSSL_clear_free =
      _OPENSSL_clear_freePtr.asFunction<
        void Function(ffi.Pointer<ffi.Void>, int)
      >();

  int CRYPTO_secure_malloc_init(int size, int min_size) {
    return _CRYPTO_secure_malloc_init(size, min_size);
  }

  late final _CRYPTO_secure_malloc_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Size, ffi.Size)>>(
        'CRYPTO_secure_malloc_init',
      );
  late final _CRYPTO_secure_malloc_init =
      _CRYPTO_secure_malloc_initPtr.asFunction<int Function(int, int)>();

  int CRYPTO_secure_malloc_initialized() {
    return _CRYPTO_secure_malloc_initialized();
  }

  late final _CRYPTO_secure_malloc_initializedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
        'CRYPTO_secure_malloc_initialized',
      );
  late final _CRYPTO_secure_malloc_initialized =
      _CRYPTO_secure_malloc_initializedPtr.asFunction<int Function()>();

  int CRYPTO_secure_used() {
    return _CRYPTO_secure_used();
  }

  late final _CRYPTO_secure_usedPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('CRYPTO_secure_used');
  late final _CRYPTO_secure_used =
      _CRYPTO_secure_usedPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> OPENSSL_secure_malloc(int size) {
    return _OPENSSL_secure_malloc(size);
  }

  late final _OPENSSL_secure_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
        'OPENSSL_secure_malloc',
      );
  late final _OPENSSL_secure_malloc =
      _OPENSSL_secure_mallocPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(int)
      >();

  void OPENSSL_secure_clear_free(ffi.Pointer<ffi.Void> ptr, int len) {
    return _OPENSSL_secure_clear_free(ptr, len);
  }

  late final _OPENSSL_secure_clear_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>
      >('OPENSSL_secure_clear_free');
  late final _OPENSSL_secure_clear_free =
      _OPENSSL_secure_clear_freePtr.asFunction<
        void Function(ffi.Pointer<ffi.Void>, int)
      >();

  ffi.Pointer<ASN1_OBJECT> OBJ_dup(ffi.Pointer<ASN1_OBJECT> obj) {
    return _OBJ_dup(obj);
  }

  late final _OBJ_dupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ASN1_OBJECT>)
        >
      >('OBJ_dup');
  late final _OBJ_dup =
      _OBJ_dupPtr.asFunction<
        ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ASN1_OBJECT>)
      >();

  int OBJ_cmp(ffi.Pointer<ASN1_OBJECT> a, ffi.Pointer<ASN1_OBJECT> b) {
    return _OBJ_cmp(a, b);
  }

  late final _OBJ_cmpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_OBJECT>, ffi.Pointer<ASN1_OBJECT>)
        >
      >('OBJ_cmp');
  late final _OBJ_cmp =
      _OBJ_cmpPtr.asFunction<
        int Function(ffi.Pointer<ASN1_OBJECT>, ffi.Pointer<ASN1_OBJECT>)
      >();

  ffi.Pointer<ffi.Uint8> OBJ_get0_data(ffi.Pointer<ASN1_OBJECT> obj) {
    return _OBJ_get0_data(obj);
  }

  late final _OBJ_get0_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ASN1_OBJECT>)
        >
      >('OBJ_get0_data');
  late final _OBJ_get0_data =
      _OBJ_get0_dataPtr.asFunction<
        ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ASN1_OBJECT>)
      >();

  int OBJ_length(ffi.Pointer<ASN1_OBJECT> obj) {
    return _OBJ_length(obj);
  }

  late final _OBJ_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ASN1_OBJECT>)>>(
        'OBJ_length',
      );
  late final _OBJ_length =
      _OBJ_lengthPtr.asFunction<int Function(ffi.Pointer<ASN1_OBJECT>)>();

  int OBJ_obj2nid(ffi.Pointer<ASN1_OBJECT> obj) {
    return _OBJ_obj2nid(obj);
  }

  late final _OBJ_obj2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_OBJECT>)>>(
        'OBJ_obj2nid',
      );
  late final _OBJ_obj2nid =
      _OBJ_obj2nidPtr.asFunction<int Function(ffi.Pointer<ASN1_OBJECT>)>();

  int OBJ_cbs2nid(ffi.Pointer<CBS> cbs) {
    return _OBJ_cbs2nid(cbs);
  }

  late final _OBJ_cbs2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBS>)>>(
        'OBJ_cbs2nid',
      );
  late final _OBJ_cbs2nid =
      _OBJ_cbs2nidPtr.asFunction<int Function(ffi.Pointer<CBS>)>();

  int OBJ_sn2nid(ffi.Pointer<ffi.Char> short_name) {
    return _OBJ_sn2nid(short_name);
  }

  late final _OBJ_sn2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'OBJ_sn2nid',
      );
  late final _OBJ_sn2nid =
      _OBJ_sn2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int OBJ_ln2nid(ffi.Pointer<ffi.Char> long_name) {
    return _OBJ_ln2nid(long_name);
  }

  late final _OBJ_ln2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'OBJ_ln2nid',
      );
  late final _OBJ_ln2nid =
      _OBJ_ln2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int OBJ_txt2nid(ffi.Pointer<ffi.Char> s) {
    return _OBJ_txt2nid(s);
  }

  late final _OBJ_txt2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'OBJ_txt2nid',
      );
  late final _OBJ_txt2nid =
      _OBJ_txt2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ASN1_OBJECT> OBJ_nid2obj(int nid) {
    return _OBJ_nid2obj(nid);
  }

  late final _OBJ_nid2objPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_OBJECT> Function(ffi.Int)>>(
        'OBJ_nid2obj',
      );
  late final _OBJ_nid2obj =
      _OBJ_nid2objPtr.asFunction<ffi.Pointer<ASN1_OBJECT> Function(int)>();

  ffi.Pointer<ASN1_OBJECT> OBJ_get_undef() {
    return _OBJ_get_undef();
  }

  late final _OBJ_get_undefPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_OBJECT> Function()>>(
        'OBJ_get_undef',
      );
  late final _OBJ_get_undef =
      _OBJ_get_undefPtr.asFunction<ffi.Pointer<ASN1_OBJECT> Function()>();

  ffi.Pointer<ffi.Char> OBJ_nid2sn(int nid) {
    return _OBJ_nid2sn(nid);
  }

  late final _OBJ_nid2snPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
        'OBJ_nid2sn',
      );
  late final _OBJ_nid2sn =
      _OBJ_nid2snPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> OBJ_nid2ln(int nid) {
    return _OBJ_nid2ln(nid);
  }

  late final _OBJ_nid2lnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
        'OBJ_nid2ln',
      );
  late final _OBJ_nid2ln =
      _OBJ_nid2lnPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int OBJ_nid2cbb(ffi.Pointer<CBB> out, int nid) {
    return _OBJ_nid2cbb(out, nid);
  }

  late final _OBJ_nid2cbbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Int)>>(
        'OBJ_nid2cbb',
      );
  late final _OBJ_nid2cbb =
      _OBJ_nid2cbbPtr.asFunction<int Function(ffi.Pointer<CBB>, int)>();

  ffi.Pointer<ASN1_OBJECT> OBJ_txt2obj(
    ffi.Pointer<ffi.Char> s,
    int dont_search_names,
  ) {
    return _OBJ_txt2obj(s, dont_search_names);
  }

  late final _OBJ_txt2objPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ffi.Char>, ffi.Int)
        >
      >('OBJ_txt2obj');
  late final _OBJ_txt2obj =
      _OBJ_txt2objPtr.asFunction<
        ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ffi.Char>, int)
      >();

  int OBJ_obj2txt(
    ffi.Pointer<ffi.Char> out,
    int out_len,
    ffi.Pointer<ASN1_OBJECT> obj,
    int always_return_oid,
  ) {
    return _OBJ_obj2txt(out, out_len, obj, always_return_oid);
  }

  late final _OBJ_obj2txtPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ASN1_OBJECT>,
            ffi.Int,
          )
        >
      >('OBJ_obj2txt');
  late final _OBJ_obj2txt =
      _OBJ_obj2txtPtr.asFunction<
        int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ASN1_OBJECT>, int)
      >();

  int OBJ_create(
    ffi.Pointer<ffi.Char> oid,
    ffi.Pointer<ffi.Char> short_name,
    ffi.Pointer<ffi.Char> long_name,
  ) {
    return _OBJ_create(oid, short_name, long_name);
  }

  late final _OBJ_createPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('OBJ_create');
  late final _OBJ_create =
      _OBJ_createPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  int OBJ_find_sigid_algs(
    int sign_nid,
    ffi.Pointer<ffi.Int> out_digest_nid,
    ffi.Pointer<ffi.Int> out_pkey_nid,
  ) {
    return _OBJ_find_sigid_algs(sign_nid, out_digest_nid, out_pkey_nid);
  }

  late final _OBJ_find_sigid_algsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)
        >
      >('OBJ_find_sigid_algs');
  late final _OBJ_find_sigid_algs =
      _OBJ_find_sigid_algsPtr.asFunction<
        int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)
      >();

  int OBJ_find_sigid_by_algs(
    ffi.Pointer<ffi.Int> out_sign_nid,
    int digest_nid,
    int pkey_nid,
  ) {
    return _OBJ_find_sigid_by_algs(out_sign_nid, digest_nid, pkey_nid);
  }

  late final _OBJ_find_sigid_by_algsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int, ffi.Int)
        >
      >('OBJ_find_sigid_by_algs');
  late final _OBJ_find_sigid_by_algs =
      _OBJ_find_sigid_by_algsPtr.asFunction<
        int Function(ffi.Pointer<ffi.Int>, int, int)
      >();

  void OBJ_NAME_do_all_sorted(
    int type,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)
      >
    >
    callback,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _OBJ_NAME_do_all_sorted(type, callback, arg);
  }

  late final _OBJ_NAME_do_all_sortedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Int,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('OBJ_NAME_do_all_sorted');
  late final _OBJ_NAME_do_all_sorted =
      _OBJ_NAME_do_all_sortedPtr.asFunction<
        void Function(
          int,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void OBJ_NAME_do_all(
    int type,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)
      >
    >
    callback,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _OBJ_NAME_do_all(type, callback, arg);
  }

  late final _OBJ_NAME_do_allPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Int,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('OBJ_NAME_do_all');
  late final _OBJ_NAME_do_all =
      _OBJ_NAME_do_allPtr.asFunction<
        void Function(
          int,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void OBJ_cleanup() {
    return _OBJ_cleanup();
  }

  late final _OBJ_cleanupPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>(
    'OBJ_cleanup',
  );
  late final _OBJ_cleanup = _OBJ_cleanupPtr.asFunction<void Function()>();

  ffi.Pointer<CRYPTO_BUFFER_POOL> CRYPTO_BUFFER_POOL_new() {
    return _CRYPTO_BUFFER_POOL_new();
  }

  late final _CRYPTO_BUFFER_POOL_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CRYPTO_BUFFER_POOL> Function()>>(
        'CRYPTO_BUFFER_POOL_new',
      );
  late final _CRYPTO_BUFFER_POOL_new =
      _CRYPTO_BUFFER_POOL_newPtr.asFunction<
        ffi.Pointer<CRYPTO_BUFFER_POOL> Function()
      >();

  void CRYPTO_BUFFER_POOL_free(ffi.Pointer<CRYPTO_BUFFER_POOL> pool) {
    return _CRYPTO_BUFFER_POOL_free(pool);
  }

  late final _CRYPTO_BUFFER_POOL_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CRYPTO_BUFFER_POOL>)>
      >('CRYPTO_BUFFER_POOL_free');
  late final _CRYPTO_BUFFER_POOL_free =
      _CRYPTO_BUFFER_POOL_freePtr.asFunction<
        void Function(ffi.Pointer<CRYPTO_BUFFER_POOL>)
      >();

  ffi.Pointer<CRYPTO_BUFFER> CRYPTO_BUFFER_new(
    ffi.Pointer<ffi.Uint8> data,
    int len,
    ffi.Pointer<CRYPTO_BUFFER_POOL> pool,
  ) {
    return _CRYPTO_BUFFER_new(data, len, pool);
  }

  late final _CRYPTO_BUFFER_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<CRYPTO_BUFFER> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<CRYPTO_BUFFER_POOL>,
          )
        >
      >('CRYPTO_BUFFER_new');
  late final _CRYPTO_BUFFER_new =
      _CRYPTO_BUFFER_newPtr.asFunction<
        ffi.Pointer<CRYPTO_BUFFER> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<CRYPTO_BUFFER_POOL>,
        )
      >();

  ffi.Pointer<CRYPTO_BUFFER> CRYPTO_BUFFER_alloc(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_data,
    int len,
  ) {
    return _CRYPTO_BUFFER_alloc(out_data, len);
  }

  late final _CRYPTO_BUFFER_allocPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<CRYPTO_BUFFER> Function(
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Size,
          )
        >
      >('CRYPTO_BUFFER_alloc');
  late final _CRYPTO_BUFFER_alloc =
      _CRYPTO_BUFFER_allocPtr.asFunction<
        ffi.Pointer<CRYPTO_BUFFER> Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  ffi.Pointer<CRYPTO_BUFFER> CRYPTO_BUFFER_new_from_CBS(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<CRYPTO_BUFFER_POOL> pool,
  ) {
    return _CRYPTO_BUFFER_new_from_CBS(cbs, pool);
  }

  late final _CRYPTO_BUFFER_new_from_CBSPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<CRYPTO_BUFFER> Function(
            ffi.Pointer<CBS>,
            ffi.Pointer<CRYPTO_BUFFER_POOL>,
          )
        >
      >('CRYPTO_BUFFER_new_from_CBS');
  late final _CRYPTO_BUFFER_new_from_CBS =
      _CRYPTO_BUFFER_new_from_CBSPtr.asFunction<
        ffi.Pointer<CRYPTO_BUFFER> Function(
          ffi.Pointer<CBS>,
          ffi.Pointer<CRYPTO_BUFFER_POOL>,
        )
      >();

  ffi.Pointer<CRYPTO_BUFFER> CRYPTO_BUFFER_new_from_static_data_unsafe(
    ffi.Pointer<ffi.Uint8> data,
    int len,
    ffi.Pointer<CRYPTO_BUFFER_POOL> pool,
  ) {
    return _CRYPTO_BUFFER_new_from_static_data_unsafe(data, len, pool);
  }

  late final _CRYPTO_BUFFER_new_from_static_data_unsafePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<CRYPTO_BUFFER> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<CRYPTO_BUFFER_POOL>,
          )
        >
      >('CRYPTO_BUFFER_new_from_static_data_unsafe');
  late final _CRYPTO_BUFFER_new_from_static_data_unsafe =
      _CRYPTO_BUFFER_new_from_static_data_unsafePtr.asFunction<
        ffi.Pointer<CRYPTO_BUFFER> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<CRYPTO_BUFFER_POOL>,
        )
      >();

  void CRYPTO_BUFFER_free(ffi.Pointer<CRYPTO_BUFFER> buf) {
    return _CRYPTO_BUFFER_free(buf);
  }

  late final _CRYPTO_BUFFER_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CRYPTO_BUFFER>)>
      >('CRYPTO_BUFFER_free');
  late final _CRYPTO_BUFFER_free =
      _CRYPTO_BUFFER_freePtr.asFunction<
        void Function(ffi.Pointer<CRYPTO_BUFFER>)
      >();

  int CRYPTO_BUFFER_up_ref(ffi.Pointer<CRYPTO_BUFFER> buf) {
    return _CRYPTO_BUFFER_up_ref(buf);
  }

  late final _CRYPTO_BUFFER_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CRYPTO_BUFFER>)>>(
        'CRYPTO_BUFFER_up_ref',
      );
  late final _CRYPTO_BUFFER_up_ref =
      _CRYPTO_BUFFER_up_refPtr.asFunction<
        int Function(ffi.Pointer<CRYPTO_BUFFER>)
      >();

  ffi.Pointer<ffi.Uint8> CRYPTO_BUFFER_data(ffi.Pointer<CRYPTO_BUFFER> buf) {
    return _CRYPTO_BUFFER_data(buf);
  }

  late final _CRYPTO_BUFFER_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<CRYPTO_BUFFER>)
        >
      >('CRYPTO_BUFFER_data');
  late final _CRYPTO_BUFFER_data =
      _CRYPTO_BUFFER_dataPtr.asFunction<
        ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<CRYPTO_BUFFER>)
      >();

  int CRYPTO_BUFFER_len(ffi.Pointer<CRYPTO_BUFFER> buf) {
    return _CRYPTO_BUFFER_len(buf);
  }

  late final _CRYPTO_BUFFER_lenPtr =
      _lookup<
        ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CRYPTO_BUFFER>)>
      >('CRYPTO_BUFFER_len');
  late final _CRYPTO_BUFFER_len =
      _CRYPTO_BUFFER_lenPtr.asFunction<
        int Function(ffi.Pointer<CRYPTO_BUFFER>)
      >();

  void CRYPTO_BUFFER_init_CBS(
    ffi.Pointer<CRYPTO_BUFFER> buf,
    ffi.Pointer<CBS> out,
  ) {
    return _CRYPTO_BUFFER_init_CBS(buf, out);
  }

  late final _CRYPTO_BUFFER_init_CBSPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CRYPTO_BUFFER>, ffi.Pointer<CBS>)
        >
      >('CRYPTO_BUFFER_init_CBS');
  late final _CRYPTO_BUFFER_init_CBS =
      _CRYPTO_BUFFER_init_CBSPtr.asFunction<
        void Function(ffi.Pointer<CRYPTO_BUFFER>, ffi.Pointer<CBS>)
      >();

  int OPENSSL_posix_to_tm(int time, ffi.Pointer<tm> out_tm) {
    return _OPENSSL_posix_to_tm(time, out_tm);
  }

  late final _OPENSSL_posix_to_tmPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int64, ffi.Pointer<tm>)>>(
        'OPENSSL_posix_to_tm',
      );
  late final _OPENSSL_posix_to_tm =
      _OPENSSL_posix_to_tmPtr.asFunction<int Function(int, ffi.Pointer<tm>)>();

  int OPENSSL_tm_to_posix(ffi.Pointer<tm> tm, ffi.Pointer<ffi.Int64> out) {
    return _OPENSSL_tm_to_posix(tm, out);
  }

  late final _OPENSSL_tm_to_posixPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Int64>)
        >
      >('OPENSSL_tm_to_posix');
  late final _OPENSSL_tm_to_posix =
      _OPENSSL_tm_to_posixPtr.asFunction<
        int Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Int64>)
      >();

  int OPENSSL_timegm(ffi.Pointer<tm> tm, ffi.Pointer<time_t> out) {
    return _OPENSSL_timegm(tm, out);
  }

  late final _OPENSSL_timegmPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<tm>, ffi.Pointer<time_t>)
        >
      >('OPENSSL_timegm');
  late final _OPENSSL_timegm =
      _OPENSSL_timegmPtr.asFunction<
        int Function(ffi.Pointer<tm>, ffi.Pointer<time_t>)
      >();

  int RAND_bytes(ffi.Pointer<ffi.Uint8> buf, int len) {
    return _RAND_bytes(buf, len);
  }

  late final _RAND_bytesPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>
      >('RAND_bytes');
  late final _RAND_bytes =
      _RAND_bytesPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  void RAND_enable_fork_unsafe_buffering(int fd) {
    return _RAND_enable_fork_unsafe_buffering(fd);
  }

  late final _RAND_enable_fork_unsafe_bufferingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
        'RAND_enable_fork_unsafe_buffering',
      );
  late final _RAND_enable_fork_unsafe_buffering =
      _RAND_enable_fork_unsafe_bufferingPtr.asFunction<void Function(int)>();

  void RAND_disable_fork_unsafe_buffering() {
    return _RAND_disable_fork_unsafe_buffering();
  }

  late final _RAND_disable_fork_unsafe_bufferingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'RAND_disable_fork_unsafe_buffering',
      );
  late final _RAND_disable_fork_unsafe_buffering =
      _RAND_disable_fork_unsafe_bufferingPtr.asFunction<void Function()>();

  void RAND_get_system_entropy_for_custom_prng(
    ffi.Pointer<ffi.Uint8> buf,
    int len,
  ) {
    return _RAND_get_system_entropy_for_custom_prng(buf, len);
  }

  late final _RAND_get_system_entropy_for_custom_prngPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>
      >('RAND_get_system_entropy_for_custom_prng');
  late final _RAND_get_system_entropy_for_custom_prng =
      _RAND_get_system_entropy_for_custom_prngPtr.asFunction<
        void Function(ffi.Pointer<ffi.Uint8>, int)
      >();

  int RAND_pseudo_bytes(ffi.Pointer<ffi.Uint8> buf, int len) {
    return _RAND_pseudo_bytes(buf, len);
  }

  late final _RAND_pseudo_bytesPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>
      >('RAND_pseudo_bytes');
  late final _RAND_pseudo_bytes =
      _RAND_pseudo_bytesPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, int)
      >();

  void RAND_seed(ffi.Pointer<ffi.Void> buf, int num) {
    return _RAND_seed(buf, num);
  }

  late final _RAND_seedPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>
      >('RAND_seed');
  late final _RAND_seed =
      _RAND_seedPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int RAND_load_file(ffi.Pointer<ffi.Char> path, int num) {
    return _RAND_load_file(path, num);
  }

  late final _RAND_load_filePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Long)>
      >('RAND_load_file');
  late final _RAND_load_file =
      _RAND_load_filePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> RAND_file_name(ffi.Pointer<ffi.Char> buf, int num) {
    return _RAND_file_name(buf, num);
  }

  late final _RAND_file_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size)
        >
      >('RAND_file_name');
  late final _RAND_file_name =
      _RAND_file_namePtr.asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)
      >();

  void RAND_add(ffi.Pointer<ffi.Void> buf, int num, double entropy) {
    return _RAND_add(buf, num, entropy);
  }

  late final _RAND_addPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Double)
        >
      >('RAND_add');
  late final _RAND_add =
      _RAND_addPtr.asFunction<
        void Function(ffi.Pointer<ffi.Void>, int, double)
      >();

  int RAND_egd(ffi.Pointer<ffi.Char> arg0) {
    return _RAND_egd(arg0);
  }

  late final _RAND_egdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'RAND_egd',
      );
  late final _RAND_egd =
      _RAND_egdPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int RAND_poll() {
    return _RAND_poll();
  }

  late final _RAND_pollPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'RAND_poll',
  );
  late final _RAND_poll = _RAND_pollPtr.asFunction<int Function()>();

  int RAND_status() {
    return _RAND_status();
  }

  late final _RAND_statusPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>(
    'RAND_status',
  );
  late final _RAND_status = _RAND_statusPtr.asFunction<int Function()>();

  void RAND_cleanup() {
    return _RAND_cleanup();
  }

  late final _RAND_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('RAND_cleanup');
  late final _RAND_cleanup = _RAND_cleanupPtr.asFunction<void Function()>();

  ffi.Pointer<RAND_METHOD> RAND_SSLeay() {
    return _RAND_SSLeay();
  }

  late final _RAND_SSLeayPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RAND_METHOD> Function()>>(
        'RAND_SSLeay',
      );
  late final _RAND_SSLeay =
      _RAND_SSLeayPtr.asFunction<ffi.Pointer<RAND_METHOD> Function()>();

  ffi.Pointer<RAND_METHOD> RAND_OpenSSL() {
    return _RAND_OpenSSL();
  }

  late final _RAND_OpenSSLPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RAND_METHOD> Function()>>(
        'RAND_OpenSSL',
      );
  late final _RAND_OpenSSL =
      _RAND_OpenSSLPtr.asFunction<ffi.Pointer<RAND_METHOD> Function()>();

  ffi.Pointer<RAND_METHOD> RAND_get_rand_method() {
    return _RAND_get_rand_method();
  }

  late final _RAND_get_rand_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RAND_METHOD> Function()>>(
        'RAND_get_rand_method',
      );
  late final _RAND_get_rand_method =
      _RAND_get_rand_methodPtr.asFunction<
        ffi.Pointer<RAND_METHOD> Function()
      >();

  int RAND_set_rand_method(ffi.Pointer<RAND_METHOD> arg0) {
    return _RAND_set_rand_method(arg0);
  }

  late final _RAND_set_rand_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RAND_METHOD>)>>(
        'RAND_set_rand_method',
      );
  late final _RAND_set_rand_method =
      _RAND_set_rand_methodPtr.asFunction<
        int Function(ffi.Pointer<RAND_METHOD>)
      >();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_new(OPENSSL_sk_cmp_func comp) {
    return _OPENSSL_sk_new(comp);
  }

  late final _OPENSSL_sk_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(OPENSSL_sk_cmp_func)
        >
      >('OPENSSL_sk_new');
  late final _OPENSSL_sk_new =
      _OPENSSL_sk_newPtr.asFunction<
        ffi.Pointer<OPENSSL_STACK> Function(OPENSSL_sk_cmp_func)
      >();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_new_null() {
    return _OPENSSL_sk_new_null();
  }

  late final _OPENSSL_sk_new_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OPENSSL_STACK> Function()>>(
        'OPENSSL_sk_new_null',
      );
  late final _OPENSSL_sk_new_null =
      _OPENSSL_sk_new_nullPtr.asFunction<
        ffi.Pointer<OPENSSL_STACK> Function()
      >();

  int OPENSSL_sk_num(ffi.Pointer<OPENSSL_STACK> sk) {
    return _OPENSSL_sk_num(sk);
  }

  late final _OPENSSL_sk_numPtr =
      _lookup<
        ffi.NativeFunction<ffi.Size Function(ffi.Pointer<OPENSSL_STACK>)>
      >('OPENSSL_sk_num');
  late final _OPENSSL_sk_num =
      _OPENSSL_sk_numPtr.asFunction<int Function(ffi.Pointer<OPENSSL_STACK>)>();

  void OPENSSL_sk_zero(ffi.Pointer<OPENSSL_STACK> sk) {
    return _OPENSSL_sk_zero(sk);
  }

  late final _OPENSSL_sk_zeroPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_STACK>)>
      >('OPENSSL_sk_zero');
  late final _OPENSSL_sk_zero =
      _OPENSSL_sk_zeroPtr.asFunction<
        void Function(ffi.Pointer<OPENSSL_STACK>)
      >();

  ffi.Pointer<ffi.Void> OPENSSL_sk_value(ffi.Pointer<OPENSSL_STACK> sk, int i) {
    return _OPENSSL_sk_value(sk, i);
  }

  late final _OPENSSL_sk_valuePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, ffi.Size)
        >
      >('OPENSSL_sk_value');
  late final _OPENSSL_sk_value =
      _OPENSSL_sk_valuePtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, int)
      >();

  ffi.Pointer<ffi.Void> OPENSSL_sk_set(
    ffi.Pointer<OPENSSL_STACK> sk,
    int i,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _OPENSSL_sk_set(sk, i, p);
  }

  late final _OPENSSL_sk_setPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<OPENSSL_STACK>,
            ffi.Size,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('OPENSSL_sk_set');
  late final _OPENSSL_sk_set =
      _OPENSSL_sk_setPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<OPENSSL_STACK>,
          int,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void OPENSSL_sk_free(ffi.Pointer<OPENSSL_STACK> sk) {
    return _OPENSSL_sk_free(sk);
  }

  late final _OPENSSL_sk_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_STACK>)>
      >('OPENSSL_sk_free');
  late final _OPENSSL_sk_free =
      _OPENSSL_sk_freePtr.asFunction<
        void Function(ffi.Pointer<OPENSSL_STACK>)
      >();

  void OPENSSL_sk_pop_free_ex(
    ffi.Pointer<OPENSSL_STACK> sk,
    OPENSSL_sk_call_free_func call_free_func,
    OPENSSL_sk_free_func free_func,
  ) {
    return _OPENSSL_sk_pop_free_ex(sk, call_free_func, free_func);
  }

  late final _OPENSSL_sk_pop_free_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<OPENSSL_STACK>,
            OPENSSL_sk_call_free_func,
            OPENSSL_sk_free_func,
          )
        >
      >('OPENSSL_sk_pop_free_ex');
  late final _OPENSSL_sk_pop_free_ex =
      _OPENSSL_sk_pop_free_exPtr.asFunction<
        void Function(
          ffi.Pointer<OPENSSL_STACK>,
          OPENSSL_sk_call_free_func,
          OPENSSL_sk_free_func,
        )
      >();

  int OPENSSL_sk_insert(
    ffi.Pointer<OPENSSL_STACK> sk,
    ffi.Pointer<ffi.Void> p,
    int where,
  ) {
    return _OPENSSL_sk_insert(sk, p, where);
  }

  late final _OPENSSL_sk_insertPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<OPENSSL_STACK>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('OPENSSL_sk_insert');
  late final _OPENSSL_sk_insert =
      _OPENSSL_sk_insertPtr.asFunction<
        int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>, int)
      >();

  ffi.Pointer<ffi.Void> OPENSSL_sk_delete(
    ffi.Pointer<OPENSSL_STACK> sk,
    int where,
  ) {
    return _OPENSSL_sk_delete(sk, where);
  }

  late final _OPENSSL_sk_deletePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, ffi.Size)
        >
      >('OPENSSL_sk_delete');
  late final _OPENSSL_sk_delete =
      _OPENSSL_sk_deletePtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, int)
      >();

  ffi.Pointer<ffi.Void> OPENSSL_sk_delete_ptr(
    ffi.Pointer<OPENSSL_STACK> sk,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _OPENSSL_sk_delete_ptr(sk, p);
  }

  late final _OPENSSL_sk_delete_ptrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<OPENSSL_STACK>,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('OPENSSL_sk_delete_ptr');
  late final _OPENSSL_sk_delete_ptr =
      _OPENSSL_sk_delete_ptrPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<OPENSSL_STACK>,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void OPENSSL_sk_delete_if(
    ffi.Pointer<OPENSSL_STACK> sk,
    OPENSSL_sk_call_delete_if_func call_func,
    OPENSSL_sk_delete_if_func func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_delete_if(sk, call_func, func, data);
  }

  late final _OPENSSL_sk_delete_ifPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<OPENSSL_STACK>,
            OPENSSL_sk_call_delete_if_func,
            OPENSSL_sk_delete_if_func,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('OPENSSL_sk_delete_if');
  late final _OPENSSL_sk_delete_if =
      _OPENSSL_sk_delete_ifPtr.asFunction<
        void Function(
          ffi.Pointer<OPENSSL_STACK>,
          OPENSSL_sk_call_delete_if_func,
          OPENSSL_sk_delete_if_func,
          ffi.Pointer<ffi.Void>,
        )
      >();

  int OPENSSL_sk_find(
    ffi.Pointer<OPENSSL_STACK> sk,
    ffi.Pointer<ffi.Size> out_index,
    ffi.Pointer<ffi.Void> p,
    OPENSSL_sk_call_cmp_func call_cmp_func,
  ) {
    return _OPENSSL_sk_find(sk, out_index, p, call_cmp_func);
  }

  late final _OPENSSL_sk_findPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<OPENSSL_STACK>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Void>,
            OPENSSL_sk_call_cmp_func,
          )
        >
      >('OPENSSL_sk_find');
  late final _OPENSSL_sk_find =
      _OPENSSL_sk_findPtr.asFunction<
        int Function(
          ffi.Pointer<OPENSSL_STACK>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Void>,
          OPENSSL_sk_call_cmp_func,
        )
      >();

  ffi.Pointer<ffi.Void> OPENSSL_sk_shift(ffi.Pointer<OPENSSL_STACK> sk) {
    return _OPENSSL_sk_shift(sk);
  }

  late final _OPENSSL_sk_shiftPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>)
        >
      >('OPENSSL_sk_shift');
  late final _OPENSSL_sk_shift =
      _OPENSSL_sk_shiftPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>)
      >();

  int OPENSSL_sk_push(ffi.Pointer<OPENSSL_STACK> sk, ffi.Pointer<ffi.Void> p) {
    return _OPENSSL_sk_push(sk, p);
  }

  late final _OPENSSL_sk_pushPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)
        >
      >('OPENSSL_sk_push');
  late final _OPENSSL_sk_push =
      _OPENSSL_sk_pushPtr.asFunction<
        int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)
      >();

  ffi.Pointer<ffi.Void> OPENSSL_sk_pop(ffi.Pointer<OPENSSL_STACK> sk) {
    return _OPENSSL_sk_pop(sk);
  }

  late final _OPENSSL_sk_popPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>)
        >
      >('OPENSSL_sk_pop');
  late final _OPENSSL_sk_pop =
      _OPENSSL_sk_popPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>)
      >();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_dup(ffi.Pointer<OPENSSL_STACK> sk) {
    return _OPENSSL_sk_dup(sk);
  }

  late final _OPENSSL_sk_dupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(ffi.Pointer<OPENSSL_STACK>)
        >
      >('OPENSSL_sk_dup');
  late final _OPENSSL_sk_dup =
      _OPENSSL_sk_dupPtr.asFunction<
        ffi.Pointer<OPENSSL_STACK> Function(ffi.Pointer<OPENSSL_STACK>)
      >();

  void OPENSSL_sk_sort(
    ffi.Pointer<OPENSSL_STACK> sk,
    OPENSSL_sk_call_cmp_func call_cmp_func,
  ) {
    return _OPENSSL_sk_sort(sk, call_cmp_func);
  }

  late final _OPENSSL_sk_sortPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<OPENSSL_STACK>,
            OPENSSL_sk_call_cmp_func,
          )
        >
      >('OPENSSL_sk_sort');
  late final _OPENSSL_sk_sort =
      _OPENSSL_sk_sortPtr.asFunction<
        void Function(ffi.Pointer<OPENSSL_STACK>, OPENSSL_sk_call_cmp_func)
      >();

  int OPENSSL_sk_is_sorted(ffi.Pointer<OPENSSL_STACK> sk) {
    return _OPENSSL_sk_is_sorted(sk);
  }

  late final _OPENSSL_sk_is_sortedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OPENSSL_STACK>)>>(
        'OPENSSL_sk_is_sorted',
      );
  late final _OPENSSL_sk_is_sorted =
      _OPENSSL_sk_is_sortedPtr.asFunction<
        int Function(ffi.Pointer<OPENSSL_STACK>)
      >();

  OPENSSL_sk_cmp_func OPENSSL_sk_set_cmp_func(
    ffi.Pointer<OPENSSL_STACK> sk,
    OPENSSL_sk_cmp_func comp,
  ) {
    return _OPENSSL_sk_set_cmp_func(sk, comp);
  }

  late final _OPENSSL_sk_set_cmp_funcPtr =
      _lookup<
        ffi.NativeFunction<
          OPENSSL_sk_cmp_func Function(
            ffi.Pointer<OPENSSL_STACK>,
            OPENSSL_sk_cmp_func,
          )
        >
      >('OPENSSL_sk_set_cmp_func');
  late final _OPENSSL_sk_set_cmp_func =
      _OPENSSL_sk_set_cmp_funcPtr.asFunction<
        OPENSSL_sk_cmp_func Function(
          ffi.Pointer<OPENSSL_STACK>,
          OPENSSL_sk_cmp_func,
        )
      >();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_deep_copy(
    ffi.Pointer<OPENSSL_STACK> sk,
    OPENSSL_sk_call_copy_func call_copy_func,
    OPENSSL_sk_copy_func copy_func,
    OPENSSL_sk_call_free_func call_free_func,
    OPENSSL_sk_free_func free_func,
  ) {
    return _OPENSSL_sk_deep_copy(
      sk,
      call_copy_func,
      copy_func,
      call_free_func,
      free_func,
    );
  }

  late final _OPENSSL_sk_deep_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
            ffi.Pointer<OPENSSL_STACK>,
            OPENSSL_sk_call_copy_func,
            OPENSSL_sk_copy_func,
            OPENSSL_sk_call_free_func,
            OPENSSL_sk_free_func,
          )
        >
      >('OPENSSL_sk_deep_copy');
  late final _OPENSSL_sk_deep_copy =
      _OPENSSL_sk_deep_copyPtr.asFunction<
        ffi.Pointer<OPENSSL_STACK> Function(
          ffi.Pointer<OPENSSL_STACK>,
          OPENSSL_sk_call_copy_func,
          OPENSSL_sk_copy_func,
          OPENSSL_sk_call_free_func,
          OPENSSL_sk_free_func,
        )
      >();

  ffi.Pointer<OPENSSL_STACK> sk_new_null() {
    return _sk_new_null();
  }

  late final _sk_new_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OPENSSL_STACK> Function()>>(
        'sk_new_null',
      );
  late final _sk_new_null = _sk_new_nullPtr
      .asFunction<ffi.Pointer<OPENSSL_STACK> Function()>();

  int sk_num(ffi.Pointer<OPENSSL_STACK> sk) {
    return _sk_num(sk);
  }

  late final _sk_numPtr =
      _lookup<
        ffi.NativeFunction<ffi.Size Function(ffi.Pointer<OPENSSL_STACK>)>
      >('sk_num');
  late final _sk_num = _sk_numPtr
      .asFunction<int Function(ffi.Pointer<OPENSSL_STACK>)>();

  ffi.Pointer<ffi.Void> sk_value(ffi.Pointer<OPENSSL_STACK> sk, int i) {
    return _sk_value(sk, i);
  }

  late final _sk_valuePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, ffi.Size)
        >
      >('sk_value');
  late final _sk_value = _sk_valuePtr
      .asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, int)
      >();

  void sk_free(ffi.Pointer<OPENSSL_STACK> sk) {
    return _sk_free(sk);
  }

  late final _sk_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_STACK>)>
      >('sk_free');
  late final _sk_free = _sk_freePtr
      .asFunction<void Function(ffi.Pointer<OPENSSL_STACK>)>();

  int sk_push(ffi.Pointer<OPENSSL_STACK> sk, ffi.Pointer<ffi.Void> p) {
    return _sk_push(sk, p);
  }

  late final _sk_pushPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)
        >
      >('sk_push');
  late final _sk_push = _sk_pushPtr
      .asFunction<
        int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)
      >();

  ffi.Pointer<ffi.Void> sk_pop(ffi.Pointer<OPENSSL_STACK> sk) {
    return _sk_pop(sk);
  }

  late final _sk_popPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>)
        >
      >('sk_pop');
  late final _sk_pop = _sk_popPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>)>();

  void sk_pop_free_ex(
    ffi.Pointer<OPENSSL_STACK> sk,
    OPENSSL_sk_call_free_func call_free_func,
    OPENSSL_sk_free_func free_func,
  ) {
    return _sk_pop_free_ex(sk, call_free_func, free_func);
  }

  late final _sk_pop_free_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<OPENSSL_STACK>,
            OPENSSL_sk_call_free_func,
            OPENSSL_sk_free_func,
          )
        >
      >('sk_pop_free_ex');
  late final _sk_pop_free_ex = _sk_pop_free_exPtr
      .asFunction<
        void Function(
          ffi.Pointer<OPENSSL_STACK>,
          OPENSSL_sk_call_free_func,
          OPENSSL_sk_free_func,
        )
      >();

  void sk_pop_free(
    ffi.Pointer<OPENSSL_STACK> sk,
    OPENSSL_sk_free_func free_func,
  ) {
    return _sk_pop_free(sk, free_func);
  }

  late final _sk_pop_freePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OPENSSL_STACK>, OPENSSL_sk_free_func)
        >
      >('sk_pop_free');
  late final _sk_pop_free = _sk_pop_freePtr
      .asFunction<
        void Function(ffi.Pointer<OPENSSL_STACK>, OPENSSL_sk_free_func)
      >();

  int AES_set_encrypt_key(
    ffi.Pointer<ffi.Uint8> key,
    int bits,
    ffi.Pointer<AES_KEY> aeskey,
  ) {
    return _AES_set_encrypt_key(key, bits, aeskey);
  }

  late final _AES_set_encrypt_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.UnsignedInt,
            ffi.Pointer<AES_KEY>,
          )
        >
      >('AES_set_encrypt_key');
  late final _AES_set_encrypt_key =
      _AES_set_encrypt_keyPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<AES_KEY>)
      >();

  int AES_set_decrypt_key(
    ffi.Pointer<ffi.Uint8> key,
    int bits,
    ffi.Pointer<AES_KEY> aeskey,
  ) {
    return _AES_set_decrypt_key(key, bits, aeskey);
  }

  late final _AES_set_decrypt_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.UnsignedInt,
            ffi.Pointer<AES_KEY>,
          )
        >
      >('AES_set_decrypt_key');
  late final _AES_set_decrypt_key =
      _AES_set_decrypt_keyPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<AES_KEY>)
      >();

  void AES_encrypt(
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<AES_KEY> key,
  ) {
    return _AES_encrypt(in1, out, key);
  }

  late final _AES_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<AES_KEY>,
          )
        >
      >('AES_encrypt');
  late final _AES_encrypt =
      _AES_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<AES_KEY>,
        )
      >();

  void AES_decrypt(
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<AES_KEY> key,
  ) {
    return _AES_decrypt(in1, out, key);
  }

  late final _AES_decryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<AES_KEY>,
          )
        >
      >('AES_decrypt');
  late final _AES_decrypt =
      _AES_decryptPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<AES_KEY>,
        )
      >();

  void AES_ctr128_encrypt(
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
    int len,
    ffi.Pointer<AES_KEY> key,
    ffi.Pointer<ffi.Uint8> ivec,
    ffi.Pointer<ffi.Uint8> ecount_buf,
    ffi.Pointer<ffi.UnsignedInt> num,
  ) {
    return _AES_ctr128_encrypt(in1, out, len, key, ivec, ecount_buf, num);
  }

  late final _AES_ctr128_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<AES_KEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.UnsignedInt>,
          )
        >
      >('AES_ctr128_encrypt');
  late final _AES_ctr128_encrypt =
      _AES_ctr128_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<AES_KEY>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedInt>,
        )
      >();

  void AES_ecb_encrypt(
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<AES_KEY> key,
    int enc,
  ) {
    return _AES_ecb_encrypt(in1, out, key, enc);
  }

  late final _AES_ecb_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<AES_KEY>,
            ffi.Int,
          )
        >
      >('AES_ecb_encrypt');
  late final _AES_ecb_encrypt =
      _AES_ecb_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<AES_KEY>,
          int,
        )
      >();

  void AES_cbc_encrypt(
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
    int len,
    ffi.Pointer<AES_KEY> key,
    ffi.Pointer<ffi.Uint8> ivec,
    int enc,
  ) {
    return _AES_cbc_encrypt(in1, out, len, key, ivec, enc);
  }

  late final _AES_cbc_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<AES_KEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Int,
          )
        >
      >('AES_cbc_encrypt');
  late final _AES_cbc_encrypt =
      _AES_cbc_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<AES_KEY>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  void AES_ofb128_encrypt(
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
    int len,
    ffi.Pointer<AES_KEY> key,
    ffi.Pointer<ffi.Uint8> ivec,
    ffi.Pointer<ffi.Int> num,
  ) {
    return _AES_ofb128_encrypt(in1, out, len, key, ivec, num);
  }

  late final _AES_ofb128_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<AES_KEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('AES_ofb128_encrypt');
  late final _AES_ofb128_encrypt =
      _AES_ofb128_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<AES_KEY>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  void AES_cfb128_encrypt(
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
    int len,
    ffi.Pointer<AES_KEY> key,
    ffi.Pointer<ffi.Uint8> ivec,
    ffi.Pointer<ffi.Int> num,
    int enc,
  ) {
    return _AES_cfb128_encrypt(in1, out, len, key, ivec, num, enc);
  }

  late final _AES_cfb128_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<AES_KEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
            ffi.Int,
          )
        >
      >('AES_cfb128_encrypt');
  late final _AES_cfb128_encrypt =
      _AES_cfb128_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<AES_KEY>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
          int,
        )
      >();

  int AES_wrap_key(
    ffi.Pointer<AES_KEY> key,
    ffi.Pointer<ffi.Uint8> iv,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _AES_wrap_key(key, iv, out, in1, in_len);
  }

  late final _AES_wrap_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<AES_KEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('AES_wrap_key');
  late final _AES_wrap_key =
      _AES_wrap_keyPtr.asFunction<
        int Function(
          ffi.Pointer<AES_KEY>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int AES_unwrap_key(
    ffi.Pointer<AES_KEY> key,
    ffi.Pointer<ffi.Uint8> iv,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _AES_unwrap_key(key, iv, out, in1, in_len);
  }

  late final _AES_unwrap_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<AES_KEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('AES_unwrap_key');
  late final _AES_unwrap_key =
      _AES_unwrap_keyPtr.asFunction<
        int Function(
          ffi.Pointer<AES_KEY>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int AES_wrap_key_padded(
    ffi.Pointer<AES_KEY> key,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    int max_out,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _AES_wrap_key_padded(key, out, out_len, max_out, in1, in_len);
  }

  late final _AES_wrap_key_paddedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<AES_KEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('AES_wrap_key_padded');
  late final _AES_wrap_key_padded =
      _AES_wrap_key_paddedPtr.asFunction<
        int Function(
          ffi.Pointer<AES_KEY>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int AES_unwrap_key_padded(
    ffi.Pointer<AES_KEY> key,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    int max_out,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _AES_unwrap_key_padded(key, out, out_len, max_out, in1, in_len);
  }

  late final _AES_unwrap_key_paddedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<AES_KEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('AES_unwrap_key_padded');
  late final _AES_unwrap_key_padded =
      _AES_unwrap_key_paddedPtr.asFunction<
        int Function(
          ffi.Pointer<AES_KEY>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  ffi.Pointer<BIGNUM> BN_new() {
    return _BN_new();
  }

  late final _BN_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>('BN_new');
  late final _BN_new = _BN_newPtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  void BN_init(ffi.Pointer<BIGNUM> bn) {
    return _BN_init(bn);
  }

  late final _BN_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
        'BN_init',
      );
  late final _BN_init =
      _BN_initPtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  void BN_free(ffi.Pointer<BIGNUM> bn) {
    return _BN_free(bn);
  }

  late final _BN_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
        'BN_free',
      );
  late final _BN_free =
      _BN_freePtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  void BN_clear_free(ffi.Pointer<BIGNUM> bn) {
    return _BN_clear_free(bn);
  }

  late final _BN_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
        'BN_clear_free',
      );
  late final _BN_clear_free =
      _BN_clear_freePtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_dup(ffi.Pointer<BIGNUM> src) {
    return _BN_dup(src);
  }

  late final _BN_dupPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_dup');
  late final _BN_dup =
      _BN_dupPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_copy(
    ffi.Pointer<BIGNUM> dest,
    ffi.Pointer<BIGNUM> src,
  ) {
    return _BN_copy(dest, src);
  }

  late final _BN_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_copy');
  late final _BN_copy =
      _BN_copyPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  void BN_clear(ffi.Pointer<BIGNUM> bn) {
    return _BN_clear(bn);
  }

  late final _BN_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
        'BN_clear',
      );
  late final _BN_clear =
      _BN_clearPtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_value_one() {
    return _BN_value_one();
  }

  late final _BN_value_onePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
        'BN_value_one',
      );
  late final _BN_value_one =
      _BN_value_onePtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  int BN_num_bits(ffi.Pointer<BIGNUM> bn) {
    return _BN_num_bits(bn);
  }

  late final _BN_num_bitsPtr =
      _lookup<
        ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<BIGNUM>)>
      >('BN_num_bits');
  late final _BN_num_bits =
      _BN_num_bitsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_num_bytes(ffi.Pointer<BIGNUM> bn) {
    return _BN_num_bytes(bn);
  }

  late final _BN_num_bytesPtr =
      _lookup<
        ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<BIGNUM>)>
      >('BN_num_bytes');
  late final _BN_num_bytes =
      _BN_num_bytesPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  void BN_zero(ffi.Pointer<BIGNUM> bn) {
    return _BN_zero(bn);
  }

  late final _BN_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
        'BN_zero',
      );
  late final _BN_zero =
      _BN_zeroPtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  int BN_one(ffi.Pointer<BIGNUM> bn) {
    return _BN_one(bn);
  }

  late final _BN_onePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
        'BN_one',
      );
  late final _BN_one =
      _BN_onePtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_set_word(ffi.Pointer<BIGNUM> bn, int value) {
    return _BN_set_word(bn, value);
  }

  late final _BN_set_wordPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, BN_ULONG)>
      >('BN_set_word');
  late final _BN_set_word =
      _BN_set_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_set_u64(ffi.Pointer<BIGNUM> bn, int value) {
    return _BN_set_u64(bn, value);
  }

  late final _BN_set_u64Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Uint64)>
      >('BN_set_u64');
  late final _BN_set_u64 =
      _BN_set_u64Ptr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  void BN_set_negative(ffi.Pointer<BIGNUM> bn, int sign) {
    return _BN_set_negative(bn, sign);
  }

  late final _BN_set_negativePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Int)>
      >('BN_set_negative');
  late final _BN_set_negative =
      _BN_set_negativePtr.asFunction<void Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_negative(ffi.Pointer<BIGNUM> bn) {
    return _BN_is_negative(bn);
  }

  late final _BN_is_negativePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
        'BN_is_negative',
      );
  late final _BN_is_negative =
      _BN_is_negativePtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_bin2bn(
    ffi.Pointer<ffi.Uint8> in1,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_bin2bn(in1, len, ret);
  }

  late final _BN_bin2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_bin2bn');
  late final _BN_bin2bn =
      _BN_bin2bnPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_bn2bin(ffi.Pointer<BIGNUM> in1, ffi.Pointer<ffi.Uint8> out) {
    return _BN_bn2bin(in1, out);
  }

  late final _BN_bn2binPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Uint8>)
        >
      >('BN_bn2bin');
  late final _BN_bn2bin =
      _BN_bn2binPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Uint8>)
      >();

  ffi.Pointer<BIGNUM> BN_lebin2bn(
    ffi.Pointer<ffi.Uint8> in1,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_lebin2bn(in1, len, ret);
  }

  late final _BN_lebin2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_lebin2bn');
  late final _BN_lebin2bn =
      _BN_lebin2bnPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_bn2le_padded(
    ffi.Pointer<ffi.Uint8> out,
    int len,
    ffi.Pointer<BIGNUM> in1,
  ) {
    return _BN_bn2le_padded(out, len, in1);
  }

  late final _BN_bn2le_paddedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_bn2le_padded');
  late final _BN_bn2le_padded =
      _BN_bn2le_paddedPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<BIGNUM>)
      >();

  int BN_bn2bin_padded(
    ffi.Pointer<ffi.Uint8> out,
    int len,
    ffi.Pointer<BIGNUM> in1,
  ) {
    return _BN_bn2bin_padded(out, len, in1);
  }

  late final _BN_bn2bin_paddedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_bn2bin_padded');
  late final _BN_bn2bin_padded =
      _BN_bn2bin_paddedPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<BIGNUM>)
      >();

  int BN_bn2cbb_padded(ffi.Pointer<CBB> out, int len, ffi.Pointer<BIGNUM> in1) {
    return _BN_bn2cbb_padded(out, len, in1);
  }

  late final _BN_bn2cbb_paddedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Size, ffi.Pointer<BIGNUM>)
        >
      >('BN_bn2cbb_padded');
  late final _BN_bn2cbb_padded =
      _BN_bn2cbb_paddedPtr.asFunction<
        int Function(ffi.Pointer<CBB>, int, ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<ffi.Char> BN_bn2hex(ffi.Pointer<BIGNUM> bn) {
    return _BN_bn2hex(bn);
  }

  late final _BN_bn2hexPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>
      >('BN_bn2hex');
  late final _BN_bn2hex =
      _BN_bn2hexPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)
      >();

  int BN_hex2bn(
    ffi.Pointer<ffi.Pointer<BIGNUM>> outp,
    ffi.Pointer<ffi.Char> in1,
  ) {
    return _BN_hex2bn(outp, in1);
  }

  late final _BN_hex2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('BN_hex2bn');
  late final _BN_hex2bn =
      _BN_hex2bnPtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<ffi.Char> BN_bn2dec(ffi.Pointer<BIGNUM> a) {
    return _BN_bn2dec(a);
  }

  late final _BN_bn2decPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>
      >('BN_bn2dec');
  late final _BN_bn2dec =
      _BN_bn2decPtr.asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)
      >();

  int BN_dec2bn(
    ffi.Pointer<ffi.Pointer<BIGNUM>> outp,
    ffi.Pointer<ffi.Char> in1,
  ) {
    return _BN_dec2bn(outp, in1);
  }

  late final _BN_dec2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('BN_dec2bn');
  late final _BN_dec2bn =
      _BN_dec2bnPtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)
      >();

  int BN_asc2bn(
    ffi.Pointer<ffi.Pointer<BIGNUM>> outp,
    ffi.Pointer<ffi.Char> in1,
  ) {
    return _BN_asc2bn(outp, in1);
  }

  late final _BN_asc2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('BN_asc2bn');
  late final _BN_asc2bn =
      _BN_asc2bnPtr.asFunction<
        int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)
      >();

  int BN_print(ffi.Pointer<BIO> bio, ffi.Pointer<BIGNUM> a) {
    return _BN_print(bio, a);
  }

  late final _BN_printPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIGNUM>)
        >
      >('BN_print');
  late final _BN_print =
      _BN_printPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<BIGNUM>)
      >();

  int BN_print_fp(ffi.Pointer<FILE> fp, ffi.Pointer<BIGNUM> a) {
    return _BN_print_fp(fp, a);
  }

  late final _BN_print_fpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<BIGNUM>)
        >
      >('BN_print_fp');
  late final _BN_print_fp =
      _BN_print_fpPtr.asFunction<
        int Function(ffi.Pointer<FILE>, ffi.Pointer<BIGNUM>)
      >();

  int BN_get_word(ffi.Pointer<BIGNUM> bn) {
    return _BN_get_word(bn);
  }

  late final _BN_get_wordPtr =
      _lookup<ffi.NativeFunction<BN_ULONG Function(ffi.Pointer<BIGNUM>)>>(
        'BN_get_word',
      );
  late final _BN_get_word =
      _BN_get_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_get_u64(ffi.Pointer<BIGNUM> bn, ffi.Pointer<ffi.Uint64> out) {
    return _BN_get_u64(bn, out);
  }

  late final _BN_get_u64Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Uint64>)
        >
      >('BN_get_u64');
  late final _BN_get_u64 =
      _BN_get_u64Ptr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Uint64>)
      >();

  int BN_parse_asn1_unsigned(ffi.Pointer<CBS> cbs, ffi.Pointer<BIGNUM> ret) {
    return _BN_parse_asn1_unsigned(cbs, ret);
  }

  late final _BN_parse_asn1_unsignedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBS>, ffi.Pointer<BIGNUM>)
        >
      >('BN_parse_asn1_unsigned');
  late final _BN_parse_asn1_unsigned =
      _BN_parse_asn1_unsignedPtr.asFunction<
        int Function(ffi.Pointer<CBS>, ffi.Pointer<BIGNUM>)
      >();

  int BN_marshal_asn1(ffi.Pointer<CBB> cbb, ffi.Pointer<BIGNUM> bn) {
    return _BN_marshal_asn1(cbb, bn);
  }

  late final _BN_marshal_asn1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<BIGNUM>)
        >
      >('BN_marshal_asn1');
  late final _BN_marshal_asn1 =
      _BN_marshal_asn1Ptr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BN_CTX> BN_CTX_new() {
    return _BN_CTX_new();
  }

  late final _BN_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_CTX> Function()>>('BN_CTX_new');
  late final _BN_CTX_new =
      _BN_CTX_newPtr.asFunction<ffi.Pointer<BN_CTX> Function()>();

  void BN_CTX_free(ffi.Pointer<BN_CTX> ctx) {
    return _BN_CTX_free(ctx);
  }

  late final _BN_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
        'BN_CTX_free',
      );
  late final _BN_CTX_free =
      _BN_CTX_freePtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  void BN_CTX_start(ffi.Pointer<BN_CTX> ctx) {
    return _BN_CTX_start(ctx);
  }

  late final _BN_CTX_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
        'BN_CTX_start',
      );
  late final _BN_CTX_start =
      _BN_CTX_startPtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_CTX_get(ffi.Pointer<BN_CTX> ctx) {
    return _BN_CTX_get(ctx);
  }

  late final _BN_CTX_getPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BN_CTX>)>
      >('BN_CTX_get');
  late final _BN_CTX_get =
      _BN_CTX_getPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BN_CTX>)
      >();

  void BN_CTX_end(ffi.Pointer<BN_CTX> ctx) {
    return _BN_CTX_end(ctx);
  }

  late final _BN_CTX_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
        'BN_CTX_end',
      );
  late final _BN_CTX_end =
      _BN_CTX_endPtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  int BN_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_add(r, a, b);
  }

  late final _BN_addPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_add');
  late final _BN_add =
      _BN_addPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_uadd(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_uadd(r, a, b);
  }

  late final _BN_uaddPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_uadd');
  late final _BN_uadd =
      _BN_uaddPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_add_word(ffi.Pointer<BIGNUM> a, int w) {
    return _BN_add_word(a, w);
  }

  late final _BN_add_wordPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, BN_ULONG)>
      >('BN_add_word');
  late final _BN_add_word =
      _BN_add_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_sub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_sub(r, a, b);
  }

  late final _BN_subPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_sub');
  late final _BN_sub =
      _BN_subPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_usub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_usub(r, a, b);
  }

  late final _BN_usubPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_usub');
  late final _BN_usub =
      _BN_usubPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_sub_word(ffi.Pointer<BIGNUM> a, int w) {
    return _BN_sub_word(a, w);
  }

  late final _BN_sub_wordPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, BN_ULONG)>
      >('BN_sub_word');
  late final _BN_sub_word =
      _BN_sub_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mul(r, a, b, ctx);
  }

  late final _BN_mulPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mul');
  late final _BN_mul =
      _BN_mulPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mul_word(ffi.Pointer<BIGNUM> bn, int w) {
    return _BN_mul_word(bn, w);
  }

  late final _BN_mul_wordPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, BN_ULONG)>
      >('BN_mul_word');
  late final _BN_mul_word =
      _BN_mul_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_sqr(r, a, ctx);
  }

  late final _BN_sqrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_sqr');
  late final _BN_sqr =
      _BN_sqrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_div(
    ffi.Pointer<BIGNUM> quotient,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BIGNUM> numerator,
    ffi.Pointer<BIGNUM> divisor,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_div(quotient, rem, numerator, divisor, ctx);
  }

  late final _BN_divPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_div');
  late final _BN_div =
      _BN_divPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_div_word(ffi.Pointer<BIGNUM> numerator, int divisor) {
    return _BN_div_word(numerator, divisor);
  }

  late final _BN_div_wordPtr =
      _lookup<
        ffi.NativeFunction<BN_ULONG Function(ffi.Pointer<BIGNUM>, BN_ULONG)>
      >('BN_div_word');
  late final _BN_div_word =
      _BN_div_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_sqrt(
    ffi.Pointer<BIGNUM> out_sqrt,
    ffi.Pointer<BIGNUM> in1,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_sqrt(out_sqrt, in1, ctx);
  }

  late final _BN_sqrtPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_sqrt');
  late final _BN_sqrt =
      _BN_sqrtPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_cmp(ffi.Pointer<BIGNUM> a, ffi.Pointer<BIGNUM> b) {
    return _BN_cmp(a, b);
  }

  late final _BN_cmpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_cmp');
  late final _BN_cmp =
      _BN_cmpPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int BN_cmp_word(ffi.Pointer<BIGNUM> a, int b) {
    return _BN_cmp_word(a, b);
  }

  late final _BN_cmp_wordPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, BN_ULONG)>
      >('BN_cmp_word');
  late final _BN_cmp_word =
      _BN_cmp_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_ucmp(ffi.Pointer<BIGNUM> a, ffi.Pointer<BIGNUM> b) {
    return _BN_ucmp(a, b);
  }

  late final _BN_ucmpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_ucmp');
  late final _BN_ucmp =
      _BN_ucmpPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int BN_equal_consttime(ffi.Pointer<BIGNUM> a, ffi.Pointer<BIGNUM> b) {
    return _BN_equal_consttime(a, b);
  }

  late final _BN_equal_consttimePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_equal_consttime');
  late final _BN_equal_consttime =
      _BN_equal_consttimePtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int BN_abs_is_word(ffi.Pointer<BIGNUM> bn, int w) {
    return _BN_abs_is_word(bn, w);
  }

  late final _BN_abs_is_wordPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, BN_ULONG)>
      >('BN_abs_is_word');
  late final _BN_abs_is_word =
      _BN_abs_is_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_zero(ffi.Pointer<BIGNUM> bn) {
    return _BN_is_zero(bn);
  }

  late final _BN_is_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
        'BN_is_zero',
      );
  late final _BN_is_zero =
      _BN_is_zeroPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_one(ffi.Pointer<BIGNUM> bn) {
    return _BN_is_one(bn);
  }

  late final _BN_is_onePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
        'BN_is_one',
      );
  late final _BN_is_one =
      _BN_is_onePtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_word(ffi.Pointer<BIGNUM> bn, int w) {
    return _BN_is_word(bn, w);
  }

  late final _BN_is_wordPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, BN_ULONG)>
      >('BN_is_word');
  late final _BN_is_word =
      _BN_is_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_odd(ffi.Pointer<BIGNUM> bn) {
    return _BN_is_odd(bn);
  }

  late final _BN_is_oddPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
        'BN_is_odd',
      );
  late final _BN_is_odd =
      _BN_is_oddPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_pow2(ffi.Pointer<BIGNUM> a) {
    return _BN_is_pow2(a);
  }

  late final _BN_is_pow2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
        'BN_is_pow2',
      );
  late final _BN_is_pow2 =
      _BN_is_pow2Ptr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_lshift(ffi.Pointer<BIGNUM> r, ffi.Pointer<BIGNUM> a, int n) {
    return _BN_lshift(r, a, n);
  }

  late final _BN_lshiftPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int)
        >
      >('BN_lshift');
  late final _BN_lshift =
      _BN_lshiftPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)
      >();

  int BN_lshift1(ffi.Pointer<BIGNUM> r, ffi.Pointer<BIGNUM> a) {
    return _BN_lshift1(r, a);
  }

  late final _BN_lshift1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_lshift1');
  late final _BN_lshift1 =
      _BN_lshift1Ptr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int BN_rshift(ffi.Pointer<BIGNUM> r, ffi.Pointer<BIGNUM> a, int n) {
    return _BN_rshift(r, a, n);
  }

  late final _BN_rshiftPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int)
        >
      >('BN_rshift');
  late final _BN_rshift =
      _BN_rshiftPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)
      >();

  int BN_rshift1(ffi.Pointer<BIGNUM> r, ffi.Pointer<BIGNUM> a) {
    return _BN_rshift1(r, a);
  }

  late final _BN_rshift1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_rshift1');
  late final _BN_rshift1 =
      _BN_rshift1Ptr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int BN_set_bit(ffi.Pointer<BIGNUM> a, int n) {
    return _BN_set_bit(a, n);
  }

  late final _BN_set_bitPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>
      >('BN_set_bit');
  late final _BN_set_bit =
      _BN_set_bitPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_clear_bit(ffi.Pointer<BIGNUM> a, int n) {
    return _BN_clear_bit(a, n);
  }

  late final _BN_clear_bitPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>
      >('BN_clear_bit');
  late final _BN_clear_bit =
      _BN_clear_bitPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_bit_set(ffi.Pointer<BIGNUM> a, int n) {
    return _BN_is_bit_set(a, n);
  }

  late final _BN_is_bit_setPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>
      >('BN_is_bit_set');
  late final _BN_is_bit_set =
      _BN_is_bit_setPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_mask_bits(ffi.Pointer<BIGNUM> a, int n) {
    return _BN_mask_bits(a, n);
  }

  late final _BN_mask_bitsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>
      >('BN_mask_bits');
  late final _BN_mask_bits =
      _BN_mask_bitsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_count_low_zero_bits(ffi.Pointer<BIGNUM> bn) {
    return _BN_count_low_zero_bits(bn);
  }

  late final _BN_count_low_zero_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
        'BN_count_low_zero_bits',
      );
  late final _BN_count_low_zero_bits =
      _BN_count_low_zero_bitsPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>)
      >();

  int BN_mod_word(ffi.Pointer<BIGNUM> a, int w) {
    return _BN_mod_word(a, w);
  }

  late final _BN_mod_wordPtr =
      _lookup<
        ffi.NativeFunction<BN_ULONG Function(ffi.Pointer<BIGNUM>, BN_ULONG)>
      >('BN_mod_word');
  late final _BN_mod_word =
      _BN_mod_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_mod_pow2(ffi.Pointer<BIGNUM> r, ffi.Pointer<BIGNUM> a, int e) {
    return _BN_mod_pow2(r, a, e);
  }

  late final _BN_mod_pow2Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Size)
        >
      >('BN_mod_pow2');
  late final _BN_mod_pow2 =
      _BN_mod_pow2Ptr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)
      >();

  int BN_nnmod_pow2(ffi.Pointer<BIGNUM> r, ffi.Pointer<BIGNUM> a, int e) {
    return _BN_nnmod_pow2(r, a, e);
  }

  late final _BN_nnmod_pow2Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Size)
        >
      >('BN_nnmod_pow2');
  late final _BN_nnmod_pow2 =
      _BN_nnmod_pow2Ptr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)
      >();

  int BN_nnmod(
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BIGNUM> numerator,
    ffi.Pointer<BIGNUM> divisor,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nnmod(rem, numerator, divisor, ctx);
  }

  late final _BN_nnmodPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_nnmod');
  late final _BN_nnmod =
      _BN_nnmodPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_add(r, a, b, m, ctx);
  }

  late final _BN_mod_addPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_add');
  late final _BN_mod_add =
      _BN_mod_addPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_add_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_add_quick(r, a, b, m);
  }

  late final _BN_mod_add_quickPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_mod_add_quick');
  late final _BN_mod_add_quick =
      _BN_mod_add_quickPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_mod_sub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sub(r, a, b, m, ctx);
  }

  late final _BN_mod_subPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_sub');
  late final _BN_mod_sub =
      _BN_mod_subPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_sub_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_sub_quick(r, a, b, m);
  }

  late final _BN_mod_sub_quickPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_mod_sub_quick');
  late final _BN_mod_sub_quick =
      _BN_mod_sub_quickPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_mod_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul(r, a, b, m, ctx);
  }

  late final _BN_mod_mulPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_mul');
  late final _BN_mod_mul =
      _BN_mod_mulPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sqr(r, a, m, ctx);
  }

  late final _BN_mod_sqrPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_sqr');
  late final _BN_mod_sqr =
      _BN_mod_sqrPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_lshift(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_lshift(r, a, n, m, ctx);
  }

  late final _BN_mod_lshiftPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_lshift');
  late final _BN_mod_lshift =
      _BN_mod_lshiftPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_lshift_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_lshift_quick(r, a, n, m);
  }

  late final _BN_mod_lshift_quickPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_mod_lshift_quick');
  late final _BN_mod_lshift_quick =
      _BN_mod_lshift_quickPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_mod_lshift1(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_lshift1(r, a, m, ctx);
  }

  late final _BN_mod_lshift1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_lshift1');
  late final _BN_mod_lshift1 =
      _BN_mod_lshift1Ptr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_lshift1_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_lshift1_quick(r, a, m);
  }

  late final _BN_mod_lshift1_quickPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_mod_lshift1_quick');
  late final _BN_mod_lshift1_quick =
      _BN_mod_lshift1_quickPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  ffi.Pointer<BIGNUM> BN_mod_sqrt(
    ffi.Pointer<BIGNUM> in1,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sqrt(in1, a, p, ctx);
  }

  late final _BN_mod_sqrtPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_sqrt');
  late final _BN_mod_sqrt =
      _BN_mod_sqrtPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_rand(ffi.Pointer<BIGNUM> rnd, int bits, int top, int bottom) {
    return _BN_rand(rnd, bits, top, bottom);
  }

  late final _BN_randPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int)
        >
      >('BN_rand');
  late final _BN_rand =
      _BN_randPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, int, int, int)
      >();

  int BN_pseudo_rand(ffi.Pointer<BIGNUM> rnd, int bits, int top, int bottom) {
    return _BN_pseudo_rand(rnd, bits, top, bottom);
  }

  late final _BN_pseudo_randPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int)
        >
      >('BN_pseudo_rand');
  late final _BN_pseudo_rand =
      _BN_pseudo_randPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, int, int, int)
      >();

  int BN_rand_range(ffi.Pointer<BIGNUM> rnd, ffi.Pointer<BIGNUM> range) {
    return _BN_rand_range(rnd, range);
  }

  late final _BN_rand_rangePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_rand_range');
  late final _BN_rand_range =
      _BN_rand_rangePtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int BN_rand_range_ex(
    ffi.Pointer<BIGNUM> r,
    int min_inclusive,
    ffi.Pointer<BIGNUM> max_exclusive,
  ) {
    return _BN_rand_range_ex(r, min_inclusive, max_exclusive);
  }

  late final _BN_rand_range_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, BN_ULONG, ffi.Pointer<BIGNUM>)
        >
      >('BN_rand_range_ex');
  late final _BN_rand_range_ex =
      _BN_rand_range_exPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, int, ffi.Pointer<BIGNUM>)
      >();

  int BN_pseudo_rand_range(ffi.Pointer<BIGNUM> rnd, ffi.Pointer<BIGNUM> range) {
    return _BN_pseudo_rand_range(rnd, range);
  }

  late final _BN_pseudo_rand_rangePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('BN_pseudo_rand_range');
  late final _BN_pseudo_rand_range =
      _BN_pseudo_rand_rangePtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BN_GENCB> BN_GENCB_new() {
    return _BN_GENCB_new();
  }

  late final _BN_GENCB_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_GENCB> Function()>>(
        'BN_GENCB_new',
      );
  late final _BN_GENCB_new =
      _BN_GENCB_newPtr.asFunction<ffi.Pointer<BN_GENCB> Function()>();

  void BN_GENCB_free(ffi.Pointer<BN_GENCB> callback) {
    return _BN_GENCB_free(callback);
  }

  late final _BN_GENCB_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_GENCB>)>>(
        'BN_GENCB_free',
      );
  late final _BN_GENCB_free =
      _BN_GENCB_freePtr.asFunction<void Function(ffi.Pointer<BN_GENCB>)>();

  void BN_GENCB_set(
    ffi.Pointer<BN_GENCB> callback,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)
      >
    >
    f,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _BN_GENCB_set(callback, f, arg);
  }

  late final _BN_GENCB_setPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<BN_GENCB>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('BN_GENCB_set');
  late final _BN_GENCB_set =
      _BN_GENCB_setPtr.asFunction<
        void Function(
          ffi.Pointer<BN_GENCB>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  int BN_GENCB_call(ffi.Pointer<BN_GENCB> callback, int event, int n) {
    return _BN_GENCB_call(callback, event, n);
  }

  late final _BN_GENCB_callPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BN_GENCB>, ffi.Int, ffi.Int)
        >
      >('BN_GENCB_call');
  late final _BN_GENCB_call =
      _BN_GENCB_callPtr.asFunction<
        int Function(ffi.Pointer<BN_GENCB>, int, int)
      >();

  ffi.Pointer<ffi.Void> BN_GENCB_get_arg(ffi.Pointer<BN_GENCB> callback) {
    return _BN_GENCB_get_arg(callback);
  }

  late final _BN_GENCB_get_argPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<BN_GENCB>)
        >
      >('BN_GENCB_get_arg');
  late final _BN_GENCB_get_arg =
      _BN_GENCB_get_argPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<BN_GENCB>)
      >();

  int BN_generate_prime_ex(
    ffi.Pointer<BIGNUM> ret,
    int bits,
    int safe,
    ffi.Pointer<BIGNUM> add,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_generate_prime_ex(ret, bits, safe, add, rem, cb);
  }

  late final _BN_generate_prime_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_GENCB>,
          )
        >
      >('BN_generate_prime_ex');
  late final _BN_generate_prime_ex =
      _BN_generate_prime_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_GENCB>,
        )
      >();

  int BN_is_prime_fasttest_ex(
    ffi.Pointer<BIGNUM> candidate,
    int checks,
    ffi.Pointer<BN_CTX> ctx,
    int do_trial_division,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_is_prime_fasttest_ex(
      candidate,
      checks,
      ctx,
      do_trial_division,
      cb,
    );
  }

  late final _BN_is_prime_fasttest_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BN_CTX>,
            ffi.Int,
            ffi.Pointer<BN_GENCB>,
          )
        >
      >('BN_is_prime_fasttest_ex');
  late final _BN_is_prime_fasttest_ex =
      _BN_is_prime_fasttest_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BN_CTX>,
          int,
          ffi.Pointer<BN_GENCB>,
        )
      >();

  int BN_is_prime_ex(
    ffi.Pointer<BIGNUM> candidate,
    int checks,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_is_prime_ex(candidate, checks, ctx, cb);
  }

  late final _BN_is_prime_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Int,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_GENCB>,
          )
        >
      >('BN_is_prime_ex');
  late final _BN_is_prime_ex =
      _BN_is_prime_exPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_GENCB>,
        )
      >();

  int BN_gcd(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_gcd(r, a, b, ctx);
  }

  late final _BN_gcdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_gcd');
  late final _BN_gcd =
      _BN_gcdPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  ffi.Pointer<BIGNUM> BN_mod_inverse(
    ffi.Pointer<BIGNUM> out,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_inverse(out, a, n, ctx);
  }

  late final _BN_mod_inversePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_inverse');
  late final _BN_mod_inverse =
      _BN_mod_inversePtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_inverse_blinded(
    ffi.Pointer<BIGNUM> out,
    ffi.Pointer<ffi.Int> out_no_inverse,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_inverse_blinded(out, out_no_inverse, a, mont, ctx);
  }

  late final _BN_mod_inverse_blindedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_inverse_blinded');
  late final _BN_mod_inverse_blinded =
      _BN_mod_inverse_blindedPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_inverse_odd(
    ffi.Pointer<BIGNUM> out,
    ffi.Pointer<ffi.Int> out_no_inverse,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_inverse_odd(out, out_no_inverse, a, n, ctx);
  }

  late final _BN_mod_inverse_oddPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_inverse_odd');
  late final _BN_mod_inverse_odd =
      _BN_mod_inverse_oddPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_new_for_modulus(
    ffi.Pointer<BIGNUM> mod,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_MONT_CTX_new_for_modulus(mod, ctx);
  }

  late final _BN_MONT_CTX_new_for_modulusPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_MONT_CTX_new_for_modulus');
  late final _BN_MONT_CTX_new_for_modulus =
      _BN_MONT_CTX_new_for_modulusPtr.asFunction<
        ffi.Pointer<BN_MONT_CTX> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_new_consttime(
    ffi.Pointer<BIGNUM> mod,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_MONT_CTX_new_consttime(mod, ctx);
  }

  late final _BN_MONT_CTX_new_consttimePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_MONT_CTX_new_consttime');
  late final _BN_MONT_CTX_new_consttime =
      _BN_MONT_CTX_new_consttimePtr.asFunction<
        ffi.Pointer<BN_MONT_CTX> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  void BN_MONT_CTX_free(ffi.Pointer<BN_MONT_CTX> mont) {
    return _BN_MONT_CTX_free(mont);
  }

  late final _BN_MONT_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_MONT_CTX>)>>(
        'BN_MONT_CTX_free',
      );
  late final _BN_MONT_CTX_free =
      _BN_MONT_CTX_freePtr.asFunction<
        void Function(ffi.Pointer<BN_MONT_CTX>)
      >();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_copy(
    ffi.Pointer<BN_MONT_CTX> to,
    ffi.Pointer<BN_MONT_CTX> from,
  ) {
    return _BN_MONT_CTX_copy(to, from);
  }

  late final _BN_MONT_CTX_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BN_MONT_CTX>,
          )
        >
      >('BN_MONT_CTX_copy');
  late final _BN_MONT_CTX_copy =
      _BN_MONT_CTX_copyPtr.asFunction<
        ffi.Pointer<BN_MONT_CTX> Function(
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_MONT_CTX>,
        )
      >();

  int BN_to_montgomery(
    ffi.Pointer<BIGNUM> ret,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_to_montgomery(ret, a, mont, ctx);
  }

  late final _BN_to_montgomeryPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_to_montgomery');
  late final _BN_to_montgomery =
      _BN_to_montgomeryPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_from_montgomery(
    ffi.Pointer<BIGNUM> ret,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_from_montgomery(ret, a, mont, ctx);
  }

  late final _BN_from_montgomeryPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_from_montgomery');
  late final _BN_from_montgomery =
      _BN_from_montgomeryPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_mul_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul_montgomery(r, a, b, mont, ctx);
  }

  late final _BN_mod_mul_montgomeryPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_mul_montgomery');
  late final _BN_mod_mul_montgomery =
      _BN_mod_mul_montgomeryPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_exp(r, a, p, ctx);
  }

  late final _BN_expPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_exp');
  late final _BN_exp =
      _BN_expPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp(r, a, p, m, ctx);
  }

  late final _BN_mod_expPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_mod_exp');
  late final _BN_mod_exp =
      _BN_mod_expPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_mod_exp_mont(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> mont,
  ) {
    return _BN_mod_exp_mont(r, a, p, m, ctx, mont);
  }

  late final _BN_mod_exp_montPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_MONT_CTX>,
          )
        >
      >('BN_mod_exp_mont');
  late final _BN_mod_exp_mont =
      _BN_mod_exp_montPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>,
        )
      >();

  int BN_mod_exp_mont_consttime(
    ffi.Pointer<BIGNUM> rr,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> mont,
  ) {
    return _BN_mod_exp_mont_consttime(rr, a, p, m, ctx, mont);
  }

  late final _BN_mod_exp_mont_consttimePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_MONT_CTX>,
          )
        >
      >('BN_mod_exp_mont_consttime');
  late final _BN_mod_exp_mont_consttime =
      _BN_mod_exp_mont_consttimePtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>,
        )
      >();

  int BN_bn2mpi(ffi.Pointer<BIGNUM> in1, ffi.Pointer<ffi.Uint8> out) {
    return _BN_bn2mpi(in1, out);
  }

  late final _BN_bn2mpiPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Uint8>)
        >
      >('BN_bn2mpi');
  late final _BN_bn2mpi =
      _BN_bn2mpiPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Uint8>)
      >();

  ffi.Pointer<BIGNUM> BN_mpi2bn(
    ffi.Pointer<ffi.Uint8> in1,
    int len,
    ffi.Pointer<BIGNUM> out,
  ) {
    return _BN_mpi2bn(in1, len, out);
  }

  late final _BN_mpi2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_mpi2bn');
  late final _BN_mpi2bn =
      _BN_mpi2bnPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_mod_exp_mont_word(
    ffi.Pointer<BIGNUM> r,
    int a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> mont,
  ) {
    return _BN_mod_exp_mont_word(r, a, p, m, ctx, mont);
  }

  late final _BN_mod_exp_mont_wordPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            BN_ULONG,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_MONT_CTX>,
          )
        >
      >('BN_mod_exp_mont_word');
  late final _BN_mod_exp_mont_word =
      _BN_mod_exp_mont_wordPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>,
        )
      >();

  int BN_mod_exp2_mont(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a1,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> a2,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> mont,
  ) {
    return _BN_mod_exp2_mont(r, a1, p1, a2, p2, m, ctx, mont);
  }

  late final _BN_mod_exp2_montPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
            ffi.Pointer<BN_MONT_CTX>,
          )
        >
      >('BN_mod_exp2_mont');
  late final _BN_mod_exp2_mont =
      _BN_mod_exp2_montPtr.asFunction<
        int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>,
        )
      >();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_new() {
    return _BN_MONT_CTX_new();
  }

  late final _BN_MONT_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_MONT_CTX> Function()>>(
        'BN_MONT_CTX_new',
      );
  late final _BN_MONT_CTX_new =
      _BN_MONT_CTX_newPtr.asFunction<ffi.Pointer<BN_MONT_CTX> Function()>();

  int BN_MONT_CTX_set(
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BIGNUM> mod,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_MONT_CTX_set(mont, mod, ctx);
  }

  late final _BN_MONT_CTX_setPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BN_MONT_CTX>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_CTX>,
          )
        >
      >('BN_MONT_CTX_set');
  late final _BN_MONT_CTX_set =
      _BN_MONT_CTX_setPtr.asFunction<
        int Function(
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
        )
      >();

  int BN_bn2binpad(
    ffi.Pointer<BIGNUM> in1,
    ffi.Pointer<ffi.Uint8> out,
    int len,
  ) {
    return _BN_bn2binpad(in1, out, len);
  }

  late final _BN_bn2binpadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Uint8>, ffi.Int)
        >
      >('BN_bn2binpad');
  late final _BN_bn2binpad =
      _BN_bn2binpadPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int BN_bn2lebinpad(
    ffi.Pointer<BIGNUM> in1,
    ffi.Pointer<ffi.Uint8> out,
    int len,
  ) {
    return _BN_bn2lebinpad(in1, out, len);
  }

  late final _BN_bn2lebinpadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Uint8>, ffi.Int)
        >
      >('BN_bn2lebinpad');
  late final _BN_bn2lebinpad =
      _BN_bn2lebinpadPtr.asFunction<
        int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Uint8>, int)
      >();

  ffi.Pointer<BIGNUM> BN_secure_new() {
    return _BN_secure_new();
  }

  late final _BN_secure_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
        'BN_secure_new',
      );
  late final _BN_secure_new =
      _BN_secure_newPtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_le2bn(
    ffi.Pointer<ffi.Uint8> in1,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_le2bn(in1, len, ret);
  }

  late final _BN_le2bnPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('BN_le2bn');
  late final _BN_le2bn =
      _BN_le2bnPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int BN_num_bits_word(int l) {
    return _BN_num_bits_word(l);
  }

  late final _BN_num_bits_wordPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(BN_ULONG)>>(
        'BN_num_bits_word',
      );
  late final _BN_num_bits_word =
      _BN_num_bits_wordPtr.asFunction<int Function(int)>();

  void CRYPTO_chacha_20(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
    ffi.Pointer<ffi.Uint8> key,
    ffi.Pointer<ffi.Uint8> nonce,
    int counter,
  ) {
    return _CRYPTO_chacha_20(out, in1, in_len, key, nonce, counter);
  }

  late final _CRYPTO_chacha_20Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Uint32,
          )
        >
      >('CRYPTO_chacha_20');
  late final _CRYPTO_chacha_20 =
      _CRYPTO_chacha_20Ptr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int AES_CMAC(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _AES_CMAC(out, key, key_len, in1, in_len);
  }

  late final _AES_CMACPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('AES_CMAC');
  late final _AES_CMAC =
      _AES_CMACPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  ffi.Pointer<CMAC_CTX> CMAC_CTX_new() {
    return _CMAC_CTX_new();
  }

  late final _CMAC_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CMAC_CTX> Function()>>(
        'CMAC_CTX_new',
      );
  late final _CMAC_CTX_new =
      _CMAC_CTX_newPtr.asFunction<ffi.Pointer<CMAC_CTX> Function()>();

  void CMAC_CTX_free(ffi.Pointer<CMAC_CTX> ctx) {
    return _CMAC_CTX_free(ctx);
  }

  late final _CMAC_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CMAC_CTX>)>>(
        'CMAC_CTX_free',
      );
  late final _CMAC_CTX_free =
      _CMAC_CTX_freePtr.asFunction<void Function(ffi.Pointer<CMAC_CTX>)>();

  int CMAC_CTX_copy(ffi.Pointer<CMAC_CTX> out, ffi.Pointer<CMAC_CTX> in1) {
    return _CMAC_CTX_copy(out, in1);
  }

  late final _CMAC_CTX_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CMAC_CTX>, ffi.Pointer<CMAC_CTX>)
        >
      >('CMAC_CTX_copy');
  late final _CMAC_CTX_copy =
      _CMAC_CTX_copyPtr.asFunction<
        int Function(ffi.Pointer<CMAC_CTX>, ffi.Pointer<CMAC_CTX>)
      >();

  int CMAC_Init(
    ffi.Pointer<CMAC_CTX> ctx,
    ffi.Pointer<ffi.Void> key,
    int key_len,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> engine,
  ) {
    return _CMAC_Init(ctx, key, key_len, cipher, engine);
  }

  late final _CMAC_InitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CMAC_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Pointer<EVP_CIPHER>,
            ffi.Pointer<ENGINE>,
          )
        >
      >('CMAC_Init');
  late final _CMAC_Init =
      _CMAC_InitPtr.asFunction<
        int Function(
          ffi.Pointer<CMAC_CTX>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
        )
      >();

  int CMAC_Reset(ffi.Pointer<CMAC_CTX> ctx) {
    return _CMAC_Reset(ctx);
  }

  late final _CMAC_ResetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CMAC_CTX>)>>(
        'CMAC_Reset',
      );
  late final _CMAC_Reset =
      _CMAC_ResetPtr.asFunction<int Function(ffi.Pointer<CMAC_CTX>)>();

  int CMAC_Update(
    ffi.Pointer<CMAC_CTX> ctx,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _CMAC_Update(ctx, in1, in_len);
  }

  late final _CMAC_UpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CMAC_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('CMAC_Update');
  late final _CMAC_Update =
      _CMAC_UpdatePtr.asFunction<
        int Function(ffi.Pointer<CMAC_CTX>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int CMAC_Final(
    ffi.Pointer<CMAC_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
  ) {
    return _CMAC_Final(ctx, out, out_len);
  }

  late final _CMAC_FinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CMAC_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('CMAC_Final');
  late final _CMAC_Final =
      _CMAC_FinalPtr.asFunction<
        int Function(
          ffi.Pointer<CMAC_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  void X25519_keypair(
    ffi.Pointer<ffi.Uint8> out_public_value,
    ffi.Pointer<ffi.Uint8> out_private_key,
  ) {
    return _X25519_keypair(out_public_value, out_private_key);
  }

  late final _X25519_keypairPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)
        >
      >('X25519_keypair');
  late final _X25519_keypair =
      _X25519_keypairPtr.asFunction<
        void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)
      >();

  int X25519(
    ffi.Pointer<ffi.Uint8> out_shared_key,
    ffi.Pointer<ffi.Uint8> private_key,
    ffi.Pointer<ffi.Uint8> peer_public_value,
  ) {
    return _X25519(out_shared_key, private_key, peer_public_value);
  }

  late final _X25519Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('X25519');
  late final _X25519 =
      _X25519Ptr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  void X25519_public_from_private(
    ffi.Pointer<ffi.Uint8> out_public_value,
    ffi.Pointer<ffi.Uint8> private_key,
  ) {
    return _X25519_public_from_private(out_public_value, private_key);
  }

  late final _X25519_public_from_privatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)
        >
      >('X25519_public_from_private');
  late final _X25519_public_from_private =
      _X25519_public_from_privatePtr.asFunction<
        void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)
      >();

  void ED25519_keypair(
    ffi.Pointer<ffi.Uint8> out_public_key,
    ffi.Pointer<ffi.Uint8> out_private_key,
  ) {
    return _ED25519_keypair(out_public_key, out_private_key);
  }

  late final _ED25519_keypairPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)
        >
      >('ED25519_keypair');
  late final _ED25519_keypair =
      _ED25519_keypairPtr.asFunction<
        void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)
      >();

  int ED25519_sign(
    ffi.Pointer<ffi.Uint8> out_sig,
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> private_key,
  ) {
    return _ED25519_sign(out_sig, message, message_len, private_key);
  }

  late final _ED25519_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('ED25519_sign');
  late final _ED25519_sign =
      _ED25519_signPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int ED25519_verify(
    ffi.Pointer<ffi.Uint8> message,
    int message_len,
    ffi.Pointer<ffi.Uint8> signature,
    ffi.Pointer<ffi.Uint8> public_key,
  ) {
    return _ED25519_verify(message, message_len, signature, public_key);
  }

  late final _ED25519_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('ED25519_verify');
  late final _ED25519_verify =
      _ED25519_verifyPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  void ED25519_keypair_from_seed(
    ffi.Pointer<ffi.Uint8> out_public_key,
    ffi.Pointer<ffi.Uint8> out_private_key,
    ffi.Pointer<ffi.Uint8> seed,
  ) {
    return _ED25519_keypair_from_seed(out_public_key, out_private_key, seed);
  }

  late final _ED25519_keypair_from_seedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('ED25519_keypair_from_seed');
  late final _ED25519_keypair_from_seed =
      _ED25519_keypair_from_seedPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  ffi.Pointer<SPAKE2_CTX> SPAKE2_CTX_new(
    spake2_role_t my_role,
    ffi.Pointer<ffi.Uint8> my_name,
    int my_name_len,
    ffi.Pointer<ffi.Uint8> their_name,
    int their_name_len,
  ) {
    return _SPAKE2_CTX_new(
      my_role.value,
      my_name,
      my_name_len,
      their_name,
      their_name_len,
    );
  }

  late final _SPAKE2_CTX_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<SPAKE2_CTX> Function(
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('SPAKE2_CTX_new');
  late final _SPAKE2_CTX_new =
      _SPAKE2_CTX_newPtr.asFunction<
        ffi.Pointer<SPAKE2_CTX> Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  void SPAKE2_CTX_free(ffi.Pointer<SPAKE2_CTX> ctx) {
    return _SPAKE2_CTX_free(ctx);
  }

  late final _SPAKE2_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SPAKE2_CTX>)>>(
        'SPAKE2_CTX_free',
      );
  late final _SPAKE2_CTX_free =
      _SPAKE2_CTX_freePtr.asFunction<void Function(ffi.Pointer<SPAKE2_CTX>)>();

  int SPAKE2_generate_msg(
    ffi.Pointer<SPAKE2_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    int max_out_len,
    ffi.Pointer<ffi.Uint8> password,
    int password_len,
  ) {
    return _SPAKE2_generate_msg(
      ctx,
      out,
      out_len,
      max_out_len,
      password,
      password_len,
    );
  }

  late final _SPAKE2_generate_msgPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<SPAKE2_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('SPAKE2_generate_msg');
  late final _SPAKE2_generate_msg =
      _SPAKE2_generate_msgPtr.asFunction<
        int Function(
          ffi.Pointer<SPAKE2_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int SPAKE2_process_msg(
    ffi.Pointer<SPAKE2_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out_key,
    ffi.Pointer<ffi.Size> out_key_len,
    int max_out_key_len,
    ffi.Pointer<ffi.Uint8> their_msg,
    int their_msg_len,
  ) {
    return _SPAKE2_process_msg(
      ctx,
      out_key,
      out_key_len,
      max_out_key_len,
      their_msg,
      their_msg_len,
    );
  }

  late final _SPAKE2_process_msgPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<SPAKE2_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('SPAKE2_process_msg');
  late final _SPAKE2_process_msg =
      _SPAKE2_process_msgPtr.asFunction<
        int Function(
          ffi.Pointer<SPAKE2_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  void DES_set_key(
    ffi.Pointer<DES_cblock> key,
    ffi.Pointer<DES_key_schedule> schedule,
  ) {
    return _DES_set_key(key, schedule);
  }

  late final _DES_set_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<DES_cblock>,
            ffi.Pointer<DES_key_schedule>,
          )
        >
      >('DES_set_key');
  late final _DES_set_key =
      _DES_set_keyPtr.asFunction<
        void Function(ffi.Pointer<DES_cblock>, ffi.Pointer<DES_key_schedule>)
      >();

  void DES_set_odd_parity(ffi.Pointer<DES_cblock> key) {
    return _DES_set_odd_parity(key);
  }

  late final _DES_set_odd_parityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DES_cblock>)>>(
        'DES_set_odd_parity',
      );
  late final _DES_set_odd_parity =
      _DES_set_odd_parityPtr.asFunction<
        void Function(ffi.Pointer<DES_cblock>)
      >();

  void DES_ecb_encrypt(
    ffi.Pointer<DES_cblock> in1,
    ffi.Pointer<DES_cblock> out,
    ffi.Pointer<DES_key_schedule> schedule,
    int is_encrypt,
  ) {
    return _DES_ecb_encrypt(in1, out, schedule, is_encrypt);
  }

  late final _DES_ecb_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<DES_cblock>,
            ffi.Pointer<DES_cblock>,
            ffi.Pointer<DES_key_schedule>,
            ffi.Int,
          )
        >
      >('DES_ecb_encrypt');
  late final _DES_ecb_encrypt =
      _DES_ecb_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<DES_cblock>,
          ffi.Pointer<DES_cblock>,
          ffi.Pointer<DES_key_schedule>,
          int,
        )
      >();

  void DES_ncbc_encrypt(
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
    int len,
    ffi.Pointer<DES_key_schedule> schedule,
    ffi.Pointer<DES_cblock> ivec,
    int enc,
  ) {
    return _DES_ncbc_encrypt(in1, out, len, schedule, ivec, enc);
  }

  late final _DES_ncbc_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_cblock>,
            ffi.Int,
          )
        >
      >('DES_ncbc_encrypt');
  late final _DES_ncbc_encrypt =
      _DES_ncbc_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_cblock>,
          int,
        )
      >();

  void DES_ecb3_encrypt(
    ffi.Pointer<DES_cblock> input,
    ffi.Pointer<DES_cblock> output,
    ffi.Pointer<DES_key_schedule> ks1,
    ffi.Pointer<DES_key_schedule> ks2,
    ffi.Pointer<DES_key_schedule> ks3,
    int enc,
  ) {
    return _DES_ecb3_encrypt(input, output, ks1, ks2, ks3, enc);
  }

  late final _DES_ecb3_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<DES_cblock>,
            ffi.Pointer<DES_cblock>,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_key_schedule>,
            ffi.Int,
          )
        >
      >('DES_ecb3_encrypt');
  late final _DES_ecb3_encrypt =
      _DES_ecb3_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<DES_cblock>,
          ffi.Pointer<DES_cblock>,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_key_schedule>,
          int,
        )
      >();

  void DES_ede3_cbc_encrypt(
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
    int len,
    ffi.Pointer<DES_key_schedule> ks1,
    ffi.Pointer<DES_key_schedule> ks2,
    ffi.Pointer<DES_key_schedule> ks3,
    ffi.Pointer<DES_cblock> ivec,
    int enc,
  ) {
    return _DES_ede3_cbc_encrypt(in1, out, len, ks1, ks2, ks3, ivec, enc);
  }

  late final _DES_ede3_cbc_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_cblock>,
            ffi.Int,
          )
        >
      >('DES_ede3_cbc_encrypt');
  late final _DES_ede3_cbc_encrypt =
      _DES_ede3_cbc_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_cblock>,
          int,
        )
      >();

  void DES_ede2_cbc_encrypt(
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
    int len,
    ffi.Pointer<DES_key_schedule> ks1,
    ffi.Pointer<DES_key_schedule> ks2,
    ffi.Pointer<DES_cblock> ivec,
    int enc,
  ) {
    return _DES_ede2_cbc_encrypt(in1, out, len, ks1, ks2, ivec, enc);
  }

  late final _DES_ede2_cbc_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_cblock>,
            ffi.Int,
          )
        >
      >('DES_ede2_cbc_encrypt');
  late final _DES_ede2_cbc_encrypt =
      _DES_ede2_cbc_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_cblock>,
          int,
        )
      >();

  void DES_set_key_unchecked(
    ffi.Pointer<DES_cblock> key,
    ffi.Pointer<DES_key_schedule> schedule,
  ) {
    return _DES_set_key_unchecked(key, schedule);
  }

  late final _DES_set_key_uncheckedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<DES_cblock>,
            ffi.Pointer<DES_key_schedule>,
          )
        >
      >('DES_set_key_unchecked');
  late final _DES_set_key_unchecked =
      _DES_set_key_uncheckedPtr.asFunction<
        void Function(ffi.Pointer<DES_cblock>, ffi.Pointer<DES_key_schedule>)
      >();

  void DES_ede3_cfb64_encrypt(
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
    int length,
    ffi.Pointer<DES_key_schedule> ks1,
    ffi.Pointer<DES_key_schedule> ks2,
    ffi.Pointer<DES_key_schedule> ks3,
    ffi.Pointer<DES_cblock> ivec,
    ffi.Pointer<ffi.Int> num,
    int enc,
  ) {
    return _DES_ede3_cfb64_encrypt(
      in1,
      out,
      length,
      ks1,
      ks2,
      ks3,
      ivec,
      num,
      enc,
    );
  }

  late final _DES_ede3_cfb64_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Long,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_cblock>,
            ffi.Pointer<ffi.Int>,
            ffi.Int,
          )
        >
      >('DES_ede3_cfb64_encrypt');
  late final _DES_ede3_cfb64_encrypt =
      _DES_ede3_cfb64_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_cblock>,
          ffi.Pointer<ffi.Int>,
          int,
        )
      >();

  void DES_ede3_cfb_encrypt(
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
    int numbits,
    int length,
    ffi.Pointer<DES_key_schedule> ks1,
    ffi.Pointer<DES_key_schedule> ks2,
    ffi.Pointer<DES_key_schedule> ks3,
    ffi.Pointer<DES_cblock> ivec,
    int enc,
  ) {
    return _DES_ede3_cfb_encrypt(
      in1,
      out,
      numbits,
      length,
      ks1,
      ks2,
      ks3,
      ivec,
      enc,
    );
  }

  late final _DES_ede3_cfb_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Int,
            ffi.Long,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_key_schedule>,
            ffi.Pointer<DES_cblock>,
            ffi.Int,
          )
        >
      >('DES_ede3_cfb_encrypt');
  late final _DES_ede3_cfb_encrypt =
      _DES_ede3_cfb_encryptPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_key_schedule>,
          ffi.Pointer<DES_cblock>,
          int,
        )
      >();

  ffi.Pointer<DH> DH_new() {
    return _DH_new();
  }

  late final _DH_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH> Function()>>('DH_new');
  late final _DH_new = _DH_newPtr.asFunction<ffi.Pointer<DH> Function()>();

  void DH_free(ffi.Pointer<DH> dh) {
    return _DH_free(dh);
  }

  late final _DH_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DH>)>>(
        'DH_free',
      );
  late final _DH_free =
      _DH_freePtr.asFunction<void Function(ffi.Pointer<DH>)>();

  int DH_up_ref(ffi.Pointer<DH> dh) {
    return _DH_up_ref(dh);
  }

  late final _DH_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>(
        'DH_up_ref',
      );
  late final _DH_up_ref =
      _DH_up_refPtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_bits(ffi.Pointer<DH> dh) {
    return _DH_bits(dh);
  }

  late final _DH_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<DH>)>>(
        'DH_bits',
      );
  late final _DH_bits = _DH_bitsPtr.asFunction<int Function(ffi.Pointer<DH>)>();

  ffi.Pointer<BIGNUM> DH_get0_pub_key(ffi.Pointer<DH> dh) {
    return _DH_get0_pub_key(dh);
  }

  late final _DH_get0_pub_keyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>
      >('DH_get0_pub_key');
  late final _DH_get0_pub_key =
      _DH_get0_pub_keyPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)
      >();

  ffi.Pointer<BIGNUM> DH_get0_priv_key(ffi.Pointer<DH> dh) {
    return _DH_get0_priv_key(dh);
  }

  late final _DH_get0_priv_keyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>
      >('DH_get0_priv_key');
  late final _DH_get0_priv_key =
      _DH_get0_priv_keyPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)
      >();

  ffi.Pointer<BIGNUM> DH_get0_p(ffi.Pointer<DH> dh) {
    return _DH_get0_p(dh);
  }

  late final _DH_get0_pPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>
      >('DH_get0_p');
  late final _DH_get0_p =
      _DH_get0_pPtr.asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>();

  ffi.Pointer<BIGNUM> DH_get0_q(ffi.Pointer<DH> dh) {
    return _DH_get0_q(dh);
  }

  late final _DH_get0_qPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>
      >('DH_get0_q');
  late final _DH_get0_q =
      _DH_get0_qPtr.asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>();

  ffi.Pointer<BIGNUM> DH_get0_g(ffi.Pointer<DH> dh) {
    return _DH_get0_g(dh);
  }

  late final _DH_get0_gPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>
      >('DH_get0_g');
  late final _DH_get0_g =
      _DH_get0_gPtr.asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>();

  void DH_get0_key(
    ffi.Pointer<DH> dh,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_pub_key,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_priv_key,
  ) {
    return _DH_get0_key(dh, out_pub_key, out_priv_key);
  }

  late final _DH_get0_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<DH>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
          )
        >
      >('DH_get0_key');
  late final _DH_get0_key =
      _DH_get0_keyPtr.asFunction<
        void Function(
          ffi.Pointer<DH>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
        )
      >();

  int DH_set0_key(
    ffi.Pointer<DH> dh,
    ffi.Pointer<BIGNUM> pub_key,
    ffi.Pointer<BIGNUM> priv_key,
  ) {
    return _DH_set0_key(dh, pub_key, priv_key);
  }

  late final _DH_set0_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DH>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('DH_set0_key');
  late final _DH_set0_key =
      _DH_set0_keyPtr.asFunction<
        int Function(ffi.Pointer<DH>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  void DH_get0_pqg(
    ffi.Pointer<DH> dh,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_p,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_q,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_g,
  ) {
    return _DH_get0_pqg(dh, out_p, out_q, out_g);
  }

  late final _DH_get0_pqgPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<DH>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
          )
        >
      >('DH_get0_pqg');
  late final _DH_get0_pqg =
      _DH_get0_pqgPtr.asFunction<
        void Function(
          ffi.Pointer<DH>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
        )
      >();

  int DH_set0_pqg(
    ffi.Pointer<DH> dh,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> q,
    ffi.Pointer<BIGNUM> g,
  ) {
    return _DH_set0_pqg(dh, p, q, g);
  }

  late final _DH_set0_pqgPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DH>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('DH_set0_pqg');
  late final _DH_set0_pqg =
      _DH_set0_pqgPtr.asFunction<
        int Function(
          ffi.Pointer<DH>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int DH_set_length(ffi.Pointer<DH> dh, int priv_length) {
    return _DH_set_length(dh, priv_length);
  }

  late final _DH_set_lengthPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>, ffi.UnsignedInt)>
      >('DH_set_length');
  late final _DH_set_length =
      _DH_set_lengthPtr.asFunction<int Function(ffi.Pointer<DH>, int)>();

  ffi.Pointer<DH> DH_get_rfc7919_2048() {
    return _DH_get_rfc7919_2048();
  }

  late final _DH_get_rfc7919_2048Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH> Function()>>(
        'DH_get_rfc7919_2048',
      );
  late final _DH_get_rfc7919_2048 =
      _DH_get_rfc7919_2048Ptr.asFunction<ffi.Pointer<DH> Function()>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_1536(ffi.Pointer<BIGNUM> ret) {
    return _BN_get_rfc3526_prime_1536(ret);
  }

  late final _BN_get_rfc3526_prime_1536Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc3526_prime_1536');
  late final _BN_get_rfc3526_prime_1536 =
      _BN_get_rfc3526_prime_1536Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_2048(ffi.Pointer<BIGNUM> ret) {
    return _BN_get_rfc3526_prime_2048(ret);
  }

  late final _BN_get_rfc3526_prime_2048Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc3526_prime_2048');
  late final _BN_get_rfc3526_prime_2048 =
      _BN_get_rfc3526_prime_2048Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_3072(ffi.Pointer<BIGNUM> ret) {
    return _BN_get_rfc3526_prime_3072(ret);
  }

  late final _BN_get_rfc3526_prime_3072Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc3526_prime_3072');
  late final _BN_get_rfc3526_prime_3072 =
      _BN_get_rfc3526_prime_3072Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_4096(ffi.Pointer<BIGNUM> ret) {
    return _BN_get_rfc3526_prime_4096(ret);
  }

  late final _BN_get_rfc3526_prime_4096Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc3526_prime_4096');
  late final _BN_get_rfc3526_prime_4096 =
      _BN_get_rfc3526_prime_4096Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_6144(ffi.Pointer<BIGNUM> ret) {
    return _BN_get_rfc3526_prime_6144(ret);
  }

  late final _BN_get_rfc3526_prime_6144Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc3526_prime_6144');
  late final _BN_get_rfc3526_prime_6144 =
      _BN_get_rfc3526_prime_6144Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_8192(ffi.Pointer<BIGNUM> ret) {
    return _BN_get_rfc3526_prime_8192(ret);
  }

  late final _BN_get_rfc3526_prime_8192Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>
      >('BN_get_rfc3526_prime_8192');
  late final _BN_get_rfc3526_prime_8192 =
      _BN_get_rfc3526_prime_8192Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)
      >();

  int DH_generate_parameters_ex(
    ffi.Pointer<DH> dh,
    int prime_bits,
    int generator,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _DH_generate_parameters_ex(dh, prime_bits, generator, cb);
  }

  late final _DH_generate_parameters_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DH>,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<BN_GENCB>,
          )
        >
      >('DH_generate_parameters_ex');
  late final _DH_generate_parameters_ex =
      _DH_generate_parameters_exPtr.asFunction<
        int Function(ffi.Pointer<DH>, int, int, ffi.Pointer<BN_GENCB>)
      >();

  int DH_generate_key(ffi.Pointer<DH> dh) {
    return _DH_generate_key(dh);
  }

  late final _DH_generate_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>(
        'DH_generate_key',
      );
  late final _DH_generate_key =
      _DH_generate_keyPtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_compute_key_padded(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<BIGNUM> peers_key,
    ffi.Pointer<DH> dh,
  ) {
    return _DH_compute_key_padded(out, peers_key, dh);
  }

  late final _DH_compute_key_paddedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<DH>,
          )
        >
      >('DH_compute_key_padded');
  late final _DH_compute_key_padded =
      _DH_compute_key_paddedPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<DH>,
        )
      >();

  int DH_compute_key_hashed(
    ffi.Pointer<DH> dh,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    int max_out_len,
    ffi.Pointer<BIGNUM> peers_key,
    ffi.Pointer<EVP_MD> digest,
  ) {
    return _DH_compute_key_hashed(
      dh,
      out,
      out_len,
      max_out_len,
      peers_key,
      digest,
    );
  }

  late final _DH_compute_key_hashedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DH>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<EVP_MD>,
          )
        >
      >('DH_compute_key_hashed');
  late final _DH_compute_key_hashed =
      _DH_compute_key_hashedPtr.asFunction<
        int Function(
          ffi.Pointer<DH>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<EVP_MD>,
        )
      >();

  int DH_size(ffi.Pointer<DH> dh) {
    return _DH_size(dh);
  }

  late final _DH_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>('DH_size');
  late final _DH_size = _DH_sizePtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_num_bits(ffi.Pointer<DH> dh) {
    return _DH_num_bits(dh);
  }

  late final _DH_num_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<DH>)>>(
        'DH_num_bits',
      );
  late final _DH_num_bits =
      _DH_num_bitsPtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_check(ffi.Pointer<DH> dh, ffi.Pointer<ffi.Int> out_flags) {
    return _DH_check(dh, out_flags);
  }

  late final _DH_checkPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DH>, ffi.Pointer<ffi.Int>)
        >
      >('DH_check');
  late final _DH_check =
      _DH_checkPtr.asFunction<
        int Function(ffi.Pointer<DH>, ffi.Pointer<ffi.Int>)
      >();

  int DH_check_pub_key(
    ffi.Pointer<DH> dh,
    ffi.Pointer<BIGNUM> pub_key,
    ffi.Pointer<ffi.Int> out_flags,
  ) {
    return _DH_check_pub_key(dh, pub_key, out_flags);
  }

  late final _DH_check_pub_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DH>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('DH_check_pub_key');
  late final _DH_check_pub_key =
      _DH_check_pub_keyPtr.asFunction<
        int Function(ffi.Pointer<DH>, ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>)
      >();

  ffi.Pointer<DH> DHparams_dup(ffi.Pointer<DH> dh) {
    return _DHparams_dup(dh);
  }

  late final _DHparams_dupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH> Function(ffi.Pointer<DH>)>>(
        'DHparams_dup',
      );
  late final _DHparams_dup =
      _DHparams_dupPtr.asFunction<ffi.Pointer<DH> Function(ffi.Pointer<DH>)>();

  ffi.Pointer<DH> DH_parse_parameters(ffi.Pointer<CBS> cbs) {
    return _DH_parse_parameters(cbs);
  }

  late final _DH_parse_parametersPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH> Function(ffi.Pointer<CBS>)>>(
        'DH_parse_parameters',
      );
  late final _DH_parse_parameters =
      _DH_parse_parametersPtr.asFunction<
        ffi.Pointer<DH> Function(ffi.Pointer<CBS>)
      >();

  int DH_marshal_parameters(ffi.Pointer<CBB> cbb, ffi.Pointer<DH> dh) {
    return _DH_marshal_parameters(cbb, dh);
  }

  late final _DH_marshal_parametersPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<DH>)>
      >('DH_marshal_parameters');
  late final _DH_marshal_parameters =
      _DH_marshal_parametersPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<DH>)
      >();

  ffi.Pointer<DH> DH_generate_parameters(
    int prime_len,
    int generator,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
      >
    >
    callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _DH_generate_parameters(prime_len, generator, callback, cb_arg);
  }

  late final _DH_generate_parametersPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<DH> Function(
            ffi.Int,
            ffi.Int,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('DH_generate_parameters');
  late final _DH_generate_parameters =
      _DH_generate_parametersPtr.asFunction<
        ffi.Pointer<DH> Function(
          int,
          int,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  ffi.Pointer<DH> d2i_DHparams(
    ffi.Pointer<ffi.Pointer<DH>> ret,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> inp,
    int len,
  ) {
    return _d2i_DHparams(ret, inp, len);
  }

  late final _d2i_DHparamsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<DH> Function(
            ffi.Pointer<ffi.Pointer<DH>>,
            ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
            ffi.Long,
          )
        >
      >('d2i_DHparams');
  late final _d2i_DHparams = _d2i_DHparamsPtr
      .asFunction<
        ffi.Pointer<DH> Function(
          ffi.Pointer<ffi.Pointer<DH>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int,
        )
      >();

  int i2d_DHparams(
    ffi.Pointer<DH> in1,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> outp,
  ) {
    return _i2d_DHparams(in1, outp);
  }

  late final _i2d_DHparamsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DH>,
            ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          )
        >
      >('i2d_DHparams');
  late final _i2d_DHparams = _i2d_DHparamsPtr
      .asFunction<
        int Function(
          ffi.Pointer<DH>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
        )
      >();

  int DH_compute_key(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<BIGNUM> peers_key,
    ffi.Pointer<DH> dh,
  ) {
    return _DH_compute_key(out, peers_key, dh);
  }

  late final _DH_compute_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<DH>,
          )
        >
      >('DH_compute_key');
  late final _DH_compute_key =
      _DH_compute_keyPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<DH>,
        )
      >();

  ffi.Pointer<DSA> DSA_new() {
    return _DSA_new();
  }

  late final _DSA_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DSA> Function()>>('DSA_new');
  late final _DSA_new = _DSA_newPtr.asFunction<ffi.Pointer<DSA> Function()>();

  void DSA_free(ffi.Pointer<DSA> dsa) {
    return _DSA_free(dsa);
  }

  late final _DSA_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DSA>)>>(
        'DSA_free',
      );
  late final _DSA_free =
      _DSA_freePtr.asFunction<void Function(ffi.Pointer<DSA>)>();

  int DSA_up_ref(ffi.Pointer<DSA> dsa) {
    return _DSA_up_ref(dsa);
  }

  late final _DSA_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>(
        'DSA_up_ref',
      );
  late final _DSA_up_ref =
      _DSA_up_refPtr.asFunction<int Function(ffi.Pointer<DSA>)>();

  int DSA_bits(ffi.Pointer<DSA> dsa) {
    return _DSA_bits(dsa);
  }

  late final _DSA_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<DSA>)>>(
        'DSA_bits',
      );
  late final _DSA_bits =
      _DSA_bitsPtr.asFunction<int Function(ffi.Pointer<DSA>)>();

  ffi.Pointer<BIGNUM> DSA_get0_pub_key(ffi.Pointer<DSA> dsa) {
    return _DSA_get0_pub_key(dsa);
  }

  late final _DSA_get0_pub_keyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>
      >('DSA_get0_pub_key');
  late final _DSA_get0_pub_key =
      _DSA_get0_pub_keyPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)
      >();

  ffi.Pointer<BIGNUM> DSA_get0_priv_key(ffi.Pointer<DSA> dsa) {
    return _DSA_get0_priv_key(dsa);
  }

  late final _DSA_get0_priv_keyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>
      >('DSA_get0_priv_key');
  late final _DSA_get0_priv_key =
      _DSA_get0_priv_keyPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)
      >();

  ffi.Pointer<BIGNUM> DSA_get0_p(ffi.Pointer<DSA> dsa) {
    return _DSA_get0_p(dsa);
  }

  late final _DSA_get0_pPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>
      >('DSA_get0_p');
  late final _DSA_get0_p =
      _DSA_get0_pPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)
      >();

  ffi.Pointer<BIGNUM> DSA_get0_q(ffi.Pointer<DSA> dsa) {
    return _DSA_get0_q(dsa);
  }

  late final _DSA_get0_qPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>
      >('DSA_get0_q');
  late final _DSA_get0_q =
      _DSA_get0_qPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)
      >();

  ffi.Pointer<BIGNUM> DSA_get0_g(ffi.Pointer<DSA> dsa) {
    return _DSA_get0_g(dsa);
  }

  late final _DSA_get0_gPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>
      >('DSA_get0_g');
  late final _DSA_get0_g =
      _DSA_get0_gPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)
      >();

  void DSA_get0_key(
    ffi.Pointer<DSA> dsa,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_pub_key,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_priv_key,
  ) {
    return _DSA_get0_key(dsa, out_pub_key, out_priv_key);
  }

  late final _DSA_get0_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<DSA>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
          )
        >
      >('DSA_get0_key');
  late final _DSA_get0_key =
      _DSA_get0_keyPtr.asFunction<
        void Function(
          ffi.Pointer<DSA>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
        )
      >();

  void DSA_get0_pqg(
    ffi.Pointer<DSA> dsa,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_p,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_q,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_g,
  ) {
    return _DSA_get0_pqg(dsa, out_p, out_q, out_g);
  }

  late final _DSA_get0_pqgPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<DSA>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
          )
        >
      >('DSA_get0_pqg');
  late final _DSA_get0_pqg =
      _DSA_get0_pqgPtr.asFunction<
        void Function(
          ffi.Pointer<DSA>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
        )
      >();

  int DSA_set0_key(
    ffi.Pointer<DSA> dsa,
    ffi.Pointer<BIGNUM> pub_key,
    ffi.Pointer<BIGNUM> priv_key,
  ) {
    return _DSA_set0_key(dsa, pub_key, priv_key);
  }

  late final _DSA_set0_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DSA>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('DSA_set0_key');
  late final _DSA_set0_key =
      _DSA_set0_keyPtr.asFunction<
        int Function(ffi.Pointer<DSA>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int DSA_set0_pqg(
    ffi.Pointer<DSA> dsa,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> q,
    ffi.Pointer<BIGNUM> g,
  ) {
    return _DSA_set0_pqg(dsa, p, q, g);
  }

  late final _DSA_set0_pqgPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DSA>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('DSA_set0_pqg');
  late final _DSA_set0_pqg =
      _DSA_set0_pqgPtr.asFunction<
        int Function(
          ffi.Pointer<DSA>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int DSA_generate_parameters_ex(
    ffi.Pointer<DSA> dsa,
    int bits,
    ffi.Pointer<ffi.Uint8> seed,
    int seed_len,
    ffi.Pointer<ffi.Int> out_counter,
    ffi.Pointer<ffi.UnsignedLong> out_h,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _DSA_generate_parameters_ex(
      dsa,
      bits,
      seed,
      seed_len,
      out_counter,
      out_h,
      cb,
    );
  }

  late final _DSA_generate_parameters_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DSA>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.UnsignedLong>,
            ffi.Pointer<BN_GENCB>,
          )
        >
      >('DSA_generate_parameters_ex');
  late final _DSA_generate_parameters_ex =
      _DSA_generate_parameters_exPtr.asFunction<
        int Function(
          ffi.Pointer<DSA>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<BN_GENCB>,
        )
      >();

  ffi.Pointer<DSA> DSAparams_dup(ffi.Pointer<DSA> dsa) {
    return _DSAparams_dup(dsa);
  }

  late final _DSAparams_dupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DSA> Function(ffi.Pointer<DSA>)>>(
        'DSAparams_dup',
      );
  late final _DSAparams_dup =
      _DSAparams_dupPtr.asFunction<
        ffi.Pointer<DSA> Function(ffi.Pointer<DSA>)
      >();

  int DSA_generate_key(ffi.Pointer<DSA> dsa) {
    return _DSA_generate_key(dsa);
  }

  late final _DSA_generate_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>(
        'DSA_generate_key',
      );
  late final _DSA_generate_key =
      _DSA_generate_keyPtr.asFunction<int Function(ffi.Pointer<DSA>)>();

  ffi.Pointer<DSA_SIG> DSA_SIG_new() {
    return _DSA_SIG_new();
  }

  late final _DSA_SIG_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DSA_SIG> Function()>>(
        'DSA_SIG_new',
      );
  late final _DSA_SIG_new =
      _DSA_SIG_newPtr.asFunction<ffi.Pointer<DSA_SIG> Function()>();

  void DSA_SIG_free(ffi.Pointer<DSA_SIG> sig) {
    return _DSA_SIG_free(sig);
  }

  late final _DSA_SIG_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DSA_SIG>)>>(
        'DSA_SIG_free',
      );
  late final _DSA_SIG_free =
      _DSA_SIG_freePtr.asFunction<void Function(ffi.Pointer<DSA_SIG>)>();

  void DSA_SIG_get0(
    ffi.Pointer<DSA_SIG> sig,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_r,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_s,
  ) {
    return _DSA_SIG_get0(sig, out_r, out_s);
  }

  late final _DSA_SIG_get0Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<DSA_SIG>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
          )
        >
      >('DSA_SIG_get0');
  late final _DSA_SIG_get0 =
      _DSA_SIG_get0Ptr.asFunction<
        void Function(
          ffi.Pointer<DSA_SIG>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
        )
      >();

  int DSA_SIG_set0(
    ffi.Pointer<DSA_SIG> sig,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> s,
  ) {
    return _DSA_SIG_set0(sig, r, s);
  }

  late final _DSA_SIG_set0Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DSA_SIG>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('DSA_SIG_set0');
  late final _DSA_SIG_set0 =
      _DSA_SIG_set0Ptr.asFunction<
        int Function(
          ffi.Pointer<DSA_SIG>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  ffi.Pointer<DSA_SIG> DSA_do_sign(
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<DSA> dsa,
  ) {
    return _DSA_do_sign(digest, digest_len, dsa);
  }

  late final _DSA_do_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<DSA_SIG> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<DSA>,
          )
        >
      >('DSA_do_sign');
  late final _DSA_do_sign =
      _DSA_do_signPtr.asFunction<
        ffi.Pointer<DSA_SIG> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<DSA>,
        )
      >();

  int DSA_do_verify(
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<DSA_SIG> sig,
    ffi.Pointer<DSA> dsa,
  ) {
    return _DSA_do_verify(digest, digest_len, sig, dsa);
  }

  late final _DSA_do_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<DSA_SIG>,
            ffi.Pointer<DSA>,
          )
        >
      >('DSA_do_verify');
  late final _DSA_do_verify =
      _DSA_do_verifyPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<DSA_SIG>,
          ffi.Pointer<DSA>,
        )
      >();

  int DSA_do_check_signature(
    ffi.Pointer<ffi.Int> out_valid,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<DSA_SIG> sig,
    ffi.Pointer<DSA> dsa,
  ) {
    return _DSA_do_check_signature(out_valid, digest, digest_len, sig, dsa);
  }

  late final _DSA_do_check_signaturePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<DSA_SIG>,
            ffi.Pointer<DSA>,
          )
        >
      >('DSA_do_check_signature');
  late final _DSA_do_check_signature =
      _DSA_do_check_signaturePtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<DSA_SIG>,
          ffi.Pointer<DSA>,
        )
      >();

  int DSA_sign(
    int type,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<ffi.Uint8> out_sig,
    ffi.Pointer<ffi.UnsignedInt> out_siglen,
    ffi.Pointer<DSA> dsa,
  ) {
    return _DSA_sign(type, digest, digest_len, out_sig, out_siglen, dsa);
  }

  late final _DSA_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<DSA>,
          )
        >
      >('DSA_sign');
  late final _DSA_sign =
      _DSA_signPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<DSA>,
        )
      >();

  int DSA_verify(
    int type,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<ffi.Uint8> sig,
    int sig_len,
    ffi.Pointer<DSA> dsa,
  ) {
    return _DSA_verify(type, digest, digest_len, sig, sig_len, dsa);
  }

  late final _DSA_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<DSA>,
          )
        >
      >('DSA_verify');
  late final _DSA_verify =
      _DSA_verifyPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<DSA>,
        )
      >();

  int DSA_check_signature(
    ffi.Pointer<ffi.Int> out_valid,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<ffi.Uint8> sig,
    int sig_len,
    ffi.Pointer<DSA> dsa,
  ) {
    return _DSA_check_signature(
      out_valid,
      digest,
      digest_len,
      sig,
      sig_len,
      dsa,
    );
  }

  late final _DSA_check_signaturePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<DSA>,
          )
        >
      >('DSA_check_signature');
  late final _DSA_check_signature =
      _DSA_check_signaturePtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<DSA>,
        )
      >();

  int DSA_size(ffi.Pointer<DSA> dsa) {
    return _DSA_size(dsa);
  }

  late final _DSA_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>(
        'DSA_size',
      );
  late final _DSA_size =
      _DSA_sizePtr.asFunction<int Function(ffi.Pointer<DSA>)>();

  ffi.Pointer<DSA_SIG> DSA_SIG_parse(ffi.Pointer<CBS> cbs) {
    return _DSA_SIG_parse(cbs);
  }

  late final _DSA_SIG_parsePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<DSA_SIG> Function(ffi.Pointer<CBS>)>
      >('DSA_SIG_parse');
  late final _DSA_SIG_parse =
      _DSA_SIG_parsePtr.asFunction<
        ffi.Pointer<DSA_SIG> Function(ffi.Pointer<CBS>)
      >();

  int DSA_SIG_marshal(ffi.Pointer<CBB> cbb, ffi.Pointer<DSA_SIG> sig) {
    return _DSA_SIG_marshal(cbb, sig);
  }

  late final _DSA_SIG_marshalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<DSA_SIG>)
        >
      >('DSA_SIG_marshal');
  late final _DSA_SIG_marshal =
      _DSA_SIG_marshalPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<DSA_SIG>)
      >();

  ffi.Pointer<DSA> DSA_parse_public_key(ffi.Pointer<CBS> cbs) {
    return _DSA_parse_public_key(cbs);
  }

  late final _DSA_parse_public_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DSA> Function(ffi.Pointer<CBS>)>>(
        'DSA_parse_public_key',
      );
  late final _DSA_parse_public_key =
      _DSA_parse_public_keyPtr.asFunction<
        ffi.Pointer<DSA> Function(ffi.Pointer<CBS>)
      >();

  int DSA_marshal_public_key(ffi.Pointer<CBB> cbb, ffi.Pointer<DSA> dsa) {
    return _DSA_marshal_public_key(cbb, dsa);
  }

  late final _DSA_marshal_public_keyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<DSA>)>
      >('DSA_marshal_public_key');
  late final _DSA_marshal_public_key =
      _DSA_marshal_public_keyPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<DSA>)
      >();

  ffi.Pointer<DSA> DSA_parse_private_key(ffi.Pointer<CBS> cbs) {
    return _DSA_parse_private_key(cbs);
  }

  late final _DSA_parse_private_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DSA> Function(ffi.Pointer<CBS>)>>(
        'DSA_parse_private_key',
      );
  late final _DSA_parse_private_key =
      _DSA_parse_private_keyPtr.asFunction<
        ffi.Pointer<DSA> Function(ffi.Pointer<CBS>)
      >();

  int DSA_marshal_private_key(ffi.Pointer<CBB> cbb, ffi.Pointer<DSA> dsa) {
    return _DSA_marshal_private_key(cbb, dsa);
  }

  late final _DSA_marshal_private_keyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<DSA>)>
      >('DSA_marshal_private_key');
  late final _DSA_marshal_private_key =
      _DSA_marshal_private_keyPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<DSA>)
      >();

  ffi.Pointer<DSA> DSA_parse_parameters(ffi.Pointer<CBS> cbs) {
    return _DSA_parse_parameters(cbs);
  }

  late final _DSA_parse_parametersPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DSA> Function(ffi.Pointer<CBS>)>>(
        'DSA_parse_parameters',
      );
  late final _DSA_parse_parameters =
      _DSA_parse_parametersPtr.asFunction<
        ffi.Pointer<DSA> Function(ffi.Pointer<CBS>)
      >();

  int DSA_marshal_parameters(ffi.Pointer<CBB> cbb, ffi.Pointer<DSA> dsa) {
    return _DSA_marshal_parameters(cbb, dsa);
  }

  late final _DSA_marshal_parametersPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<DSA>)>
      >('DSA_marshal_parameters');
  late final _DSA_marshal_parameters =
      _DSA_marshal_parametersPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<DSA>)
      >();

  ffi.Pointer<DH> DSA_dup_DH(ffi.Pointer<DSA> dsa) {
    return _DSA_dup_DH(dsa);
  }

  late final _DSA_dup_DHPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH> Function(ffi.Pointer<DSA>)>>(
        'DSA_dup_DH',
      );
  late final _DSA_dup_DH =
      _DSA_dup_DHPtr.asFunction<ffi.Pointer<DH> Function(ffi.Pointer<DSA>)>();

  int DSA_get_ex_new_index(
    int argl,
    ffi.Pointer<ffi.Void> argp,
    ffi.Pointer<CRYPTO_EX_unused> unused,
    ffi.Pointer<CRYPTO_EX_dup> dup_unused,
    ffi.Pointer<CRYPTO_EX_free> free_func,
  ) {
    return _DSA_get_ex_new_index(argl, argp, unused, dup_unused, free_func);
  }

  late final _DSA_get_ex_new_indexPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Long,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<CRYPTO_EX_unused>,
            ffi.Pointer<CRYPTO_EX_dup>,
            ffi.Pointer<CRYPTO_EX_free>,
          )
        >
      >('DSA_get_ex_new_index');
  late final _DSA_get_ex_new_index =
      _DSA_get_ex_new_indexPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<CRYPTO_EX_unused>,
          ffi.Pointer<CRYPTO_EX_dup>,
          ffi.Pointer<CRYPTO_EX_free>,
        )
      >();

  int DSA_set_ex_data(
    ffi.Pointer<DSA> dsa,
    int idx,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _DSA_set_ex_data(dsa, idx, arg);
  }

  late final _DSA_set_ex_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DSA>, ffi.Int, ffi.Pointer<ffi.Void>)
        >
      >('DSA_set_ex_data');
  late final _DSA_set_ex_data =
      _DSA_set_ex_dataPtr.asFunction<
        int Function(ffi.Pointer<DSA>, int, ffi.Pointer<ffi.Void>)
      >();

  ffi.Pointer<ffi.Void> DSA_get_ex_data(ffi.Pointer<DSA> dsa, int idx) {
    return _DSA_get_ex_data(dsa, idx);
  }

  late final _DSA_get_ex_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<DSA>, ffi.Int)
        >
      >('DSA_get_ex_data');
  late final _DSA_get_ex_data =
      _DSA_get_ex_dataPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<DSA>, int)
      >();

  ffi.Pointer<DSA_SIG> d2i_DSA_SIG(
    ffi.Pointer<ffi.Pointer<DSA_SIG>> out_sig,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_DSA_SIG(out_sig, inp, len);
  }

  late final _d2i_DSA_SIGPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<DSA_SIG> Function(
            ffi.Pointer<ffi.Pointer<DSA_SIG>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_DSA_SIG');
  late final _d2i_DSA_SIG = _d2i_DSA_SIGPtr
      .asFunction<
        ffi.Pointer<DSA_SIG> Function(
          ffi.Pointer<ffi.Pointer<DSA_SIG>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  int i2d_DSA_SIG(
    ffi.Pointer<DSA_SIG> in1,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_DSA_SIG(in1, outp);
  }

  late final _i2d_DSA_SIGPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DSA_SIG>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_DSA_SIG');
  late final _i2d_DSA_SIG = _i2d_DSA_SIGPtr
      .asFunction<
        int Function(ffi.Pointer<DSA_SIG>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  ffi.Pointer<DSA> d2i_DSAPublicKey(
    ffi.Pointer<ffi.Pointer<DSA>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_DSAPublicKey(out, inp, len);
  }

  late final _d2i_DSAPublicKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
            ffi.Pointer<ffi.Pointer<DSA>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_DSAPublicKey');
  late final _d2i_DSAPublicKey = _d2i_DSAPublicKeyPtr
      .asFunction<
        ffi.Pointer<DSA> Function(
          ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  int i2d_DSAPublicKey(
    ffi.Pointer<DSA> in1,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_DSAPublicKey(in1, outp);
  }

  late final _i2d_DSAPublicKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DSA>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_DSAPublicKey');
  late final _i2d_DSAPublicKey = _i2d_DSAPublicKeyPtr
      .asFunction<
        int Function(ffi.Pointer<DSA>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  ffi.Pointer<DSA> d2i_DSAPrivateKey(
    ffi.Pointer<ffi.Pointer<DSA>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_DSAPrivateKey(out, inp, len);
  }

  late final _d2i_DSAPrivateKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
            ffi.Pointer<ffi.Pointer<DSA>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_DSAPrivateKey');
  late final _d2i_DSAPrivateKey = _d2i_DSAPrivateKeyPtr
      .asFunction<
        ffi.Pointer<DSA> Function(
          ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  int i2d_DSAPrivateKey(
    ffi.Pointer<DSA> in1,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_DSAPrivateKey(in1, outp);
  }

  late final _i2d_DSAPrivateKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DSA>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_DSAPrivateKey');
  late final _i2d_DSAPrivateKey = _i2d_DSAPrivateKeyPtr
      .asFunction<
        int Function(ffi.Pointer<DSA>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  ffi.Pointer<DSA> d2i_DSAparams(
    ffi.Pointer<ffi.Pointer<DSA>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_DSAparams(out, inp, len);
  }

  late final _d2i_DSAparamsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
            ffi.Pointer<ffi.Pointer<DSA>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_DSAparams');
  late final _d2i_DSAparams = _d2i_DSAparamsPtr
      .asFunction<
        ffi.Pointer<DSA> Function(
          ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  int i2d_DSAparams(
    ffi.Pointer<DSA> in1,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_DSAparams(in1, outp);
  }

  late final _i2d_DSAparamsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DSA>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_DSAparams');
  late final _i2d_DSAparams = _i2d_DSAparamsPtr
      .asFunction<
        int Function(ffi.Pointer<DSA>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  ffi.Pointer<DSA> DSA_generate_parameters(
    int bits,
    ffi.Pointer<ffi.UnsignedChar> seed,
    int seed_len,
    ffi.Pointer<ffi.Int> counter_ret,
    ffi.Pointer<ffi.UnsignedLong> h_ret,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
      >
    >
    callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _DSA_generate_parameters(
      bits,
      seed,
      seed_len,
      counter_ret,
      h_ret,
      callback,
      cb_arg,
    );
  }

  late final _DSA_generate_parametersPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
            ffi.Int,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Int,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.UnsignedLong>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('DSA_generate_parameters');
  late final _DSA_generate_parameters =
      _DSA_generate_parametersPtr.asFunction<
        ffi.Pointer<DSA> Function(
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  int ECDH_compute_key(
    ffi.Pointer<ffi.Void> out,
    int outlen,
    ffi.Pointer<EC_POINT> pub_key,
    ffi.Pointer<EC_KEY> priv_key,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void> in1,
          ffi.Size inlen,
          ffi.Pointer<ffi.Void> out,
          ffi.Pointer<ffi.Size> outlen,
        )
      >
    >
    kdf,
  ) {
    return _ECDH_compute_key(out, outlen, pub_key, priv_key, kdf);
  }

  late final _ECDH_compute_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<EC_KEY>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void> in1,
                  ffi.Size inlen,
                  ffi.Pointer<ffi.Void> out,
                  ffi.Pointer<ffi.Size> outlen,
                )
              >
            >,
          )
        >
      >('ECDH_compute_key');
  late final _ECDH_compute_key =
      _ECDH_compute_keyPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_KEY>,
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                ffi.Pointer<ffi.Void> in1,
                ffi.Size inlen,
                ffi.Pointer<ffi.Void> out,
                ffi.Pointer<ffi.Size> outlen,
              )
            >
          >,
        )
      >();

  int ECDH_compute_key_fips(
    ffi.Pointer<ffi.Uint8> out,
    int out_len,
    ffi.Pointer<EC_POINT> pub_key,
    ffi.Pointer<EC_KEY> priv_key,
  ) {
    return _ECDH_compute_key_fips(out, out_len, pub_key, priv_key);
  }

  late final _ECDH_compute_key_fipsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<EC_POINT>,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDH_compute_key_fips');
  late final _ECDH_compute_key_fips =
      _ECDH_compute_key_fipsPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_KEY>,
        )
      >();

  int ECDSA_sign(
    int type,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<ffi.Uint8> sig,
    ffi.Pointer<ffi.UnsignedInt> sig_len,
    ffi.Pointer<EC_KEY> key,
  ) {
    return _ECDSA_sign(type, digest, digest_len, sig, sig_len, key);
  }

  late final _ECDSA_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDSA_sign');
  late final _ECDSA_sign =
      _ECDSA_signPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<EC_KEY>,
        )
      >();

  int ECDSA_verify(
    int type,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<ffi.Uint8> sig,
    int sig_len,
    ffi.Pointer<EC_KEY> key,
  ) {
    return _ECDSA_verify(type, digest, digest_len, sig, sig_len, key);
  }

  late final _ECDSA_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDSA_verify');
  late final _ECDSA_verify =
      _ECDSA_verifyPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<EC_KEY>,
        )
      >();

  int ECDSA_size(ffi.Pointer<EC_KEY> key) {
    return _ECDSA_size(key);
  }

  late final _ECDSA_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EC_KEY>)>>(
        'ECDSA_size',
      );
  late final _ECDSA_size =
      _ECDSA_sizePtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<ECDSA_SIG> ECDSA_SIG_new() {
    return _ECDSA_SIG_new();
  }

  late final _ECDSA_SIG_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ECDSA_SIG> Function()>>(
        'ECDSA_SIG_new',
      );
  late final _ECDSA_SIG_new =
      _ECDSA_SIG_newPtr.asFunction<ffi.Pointer<ECDSA_SIG> Function()>();

  void ECDSA_SIG_free(ffi.Pointer<ECDSA_SIG> sig) {
    return _ECDSA_SIG_free(sig);
  }

  late final _ECDSA_SIG_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ECDSA_SIG>)>>(
        'ECDSA_SIG_free',
      );
  late final _ECDSA_SIG_free =
      _ECDSA_SIG_freePtr.asFunction<void Function(ffi.Pointer<ECDSA_SIG>)>();

  ffi.Pointer<BIGNUM> ECDSA_SIG_get0_r(ffi.Pointer<ECDSA_SIG> sig) {
    return _ECDSA_SIG_get0_r(sig);
  }

  late final _ECDSA_SIG_get0_rPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<ECDSA_SIG>)>
      >('ECDSA_SIG_get0_r');
  late final _ECDSA_SIG_get0_r =
      _ECDSA_SIG_get0_rPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<ECDSA_SIG>)
      >();

  ffi.Pointer<BIGNUM> ECDSA_SIG_get0_s(ffi.Pointer<ECDSA_SIG> sig) {
    return _ECDSA_SIG_get0_s(sig);
  }

  late final _ECDSA_SIG_get0_sPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<ECDSA_SIG>)>
      >('ECDSA_SIG_get0_s');
  late final _ECDSA_SIG_get0_s =
      _ECDSA_SIG_get0_sPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<ECDSA_SIG>)
      >();

  void ECDSA_SIG_get0(
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_r,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_s,
  ) {
    return _ECDSA_SIG_get0(sig, out_r, out_s);
  }

  late final _ECDSA_SIG_get0Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ECDSA_SIG>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
          )
        >
      >('ECDSA_SIG_get0');
  late final _ECDSA_SIG_get0 =
      _ECDSA_SIG_get0Ptr.asFunction<
        void Function(
          ffi.Pointer<ECDSA_SIG>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
        )
      >();

  int ECDSA_SIG_set0(
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> s,
  ) {
    return _ECDSA_SIG_set0(sig, r, s);
  }

  late final _ECDSA_SIG_set0Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ECDSA_SIG>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('ECDSA_SIG_set0');
  late final _ECDSA_SIG_set0 =
      _ECDSA_SIG_set0Ptr.asFunction<
        int Function(
          ffi.Pointer<ECDSA_SIG>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  ffi.Pointer<ECDSA_SIG> ECDSA_do_sign(
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<EC_KEY> key,
  ) {
    return _ECDSA_do_sign(digest, digest_len, key);
  }

  late final _ECDSA_do_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDSA_do_sign');
  late final _ECDSA_do_sign =
      _ECDSA_do_signPtr.asFunction<
        ffi.Pointer<ECDSA_SIG> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<EC_KEY>,
        )
      >();

  int ECDSA_do_verify(
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<EC_KEY> key,
  ) {
    return _ECDSA_do_verify(digest, digest_len, sig, key);
  }

  late final _ECDSA_do_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ECDSA_SIG>,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDSA_do_verify');
  late final _ECDSA_do_verify =
      _ECDSA_do_verifyPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ECDSA_SIG>,
          ffi.Pointer<EC_KEY>,
        )
      >();

  ffi.Pointer<ECDSA_SIG> ECDSA_SIG_parse(ffi.Pointer<CBS> cbs) {
    return _ECDSA_SIG_parse(cbs);
  }

  late final _ECDSA_SIG_parsePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ECDSA_SIG> Function(ffi.Pointer<CBS>)>
      >('ECDSA_SIG_parse');
  late final _ECDSA_SIG_parse =
      _ECDSA_SIG_parsePtr.asFunction<
        ffi.Pointer<ECDSA_SIG> Function(ffi.Pointer<CBS>)
      >();

  ffi.Pointer<ECDSA_SIG> ECDSA_SIG_from_bytes(
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _ECDSA_SIG_from_bytes(in1, in_len);
  }

  late final _ECDSA_SIG_from_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(ffi.Pointer<ffi.Uint8>, ffi.Size)
        >
      >('ECDSA_SIG_from_bytes');
  late final _ECDSA_SIG_from_bytes =
      _ECDSA_SIG_from_bytesPtr.asFunction<
        ffi.Pointer<ECDSA_SIG> Function(ffi.Pointer<ffi.Uint8>, int)
      >();

  int ECDSA_SIG_marshal(ffi.Pointer<CBB> cbb, ffi.Pointer<ECDSA_SIG> sig) {
    return _ECDSA_SIG_marshal(cbb, sig);
  }

  late final _ECDSA_SIG_marshalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<ECDSA_SIG>)
        >
      >('ECDSA_SIG_marshal');
  late final _ECDSA_SIG_marshal =
      _ECDSA_SIG_marshalPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<ECDSA_SIG>)
      >();

  int ECDSA_SIG_to_bytes(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_bytes,
    ffi.Pointer<ffi.Size> out_len,
    ffi.Pointer<ECDSA_SIG> sig,
  ) {
    return _ECDSA_SIG_to_bytes(out_bytes, out_len, sig);
  }

  late final _ECDSA_SIG_to_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ECDSA_SIG>,
          )
        >
      >('ECDSA_SIG_to_bytes');
  late final _ECDSA_SIG_to_bytes =
      _ECDSA_SIG_to_bytesPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ECDSA_SIG>,
        )
      >();

  int ECDSA_SIG_max_len(int order_len) {
    return _ECDSA_SIG_max_len(order_len);
  }

  late final _ECDSA_SIG_max_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Size)>>(
        'ECDSA_SIG_max_len',
      );
  late final _ECDSA_SIG_max_len =
      _ECDSA_SIG_max_lenPtr.asFunction<int Function(int)>();

  int ECDSA_sign_p1363(
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<ffi.Uint8> sig,
    ffi.Pointer<ffi.Size> out_sig_len,
    int max_sig_len,
    ffi.Pointer<EC_KEY> key,
  ) {
    return _ECDSA_sign_p1363(
      digest,
      digest_len,
      sig,
      out_sig_len,
      max_sig_len,
      key,
    );
  }

  late final _ECDSA_sign_p1363Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDSA_sign_p1363');
  late final _ECDSA_sign_p1363 =
      _ECDSA_sign_p1363Ptr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<EC_KEY>,
        )
      >();

  int ECDSA_verify_p1363(
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<ffi.Uint8> sig,
    int sig_len,
    ffi.Pointer<EC_KEY> key,
  ) {
    return _ECDSA_verify_p1363(digest, digest_len, sig, sig_len, key);
  }

  late final _ECDSA_verify_p1363Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<EC_KEY>,
          )
        >
      >('ECDSA_verify_p1363');
  late final _ECDSA_verify_p1363 =
      _ECDSA_verify_p1363Ptr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<EC_KEY>,
        )
      >();

  int ECDSA_size_p1363(ffi.Pointer<EC_KEY> key) {
    return _ECDSA_size_p1363(key);
  }

  late final _ECDSA_size_p1363Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EC_KEY>)>>(
        'ECDSA_size_p1363',
      );
  late final _ECDSA_size_p1363 =
      _ECDSA_size_p1363Ptr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<ECDSA_SIG> ECDSA_sign_with_nonce_and_leak_private_key_for_testing(
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<EC_KEY> eckey,
    ffi.Pointer<ffi.Uint8> nonce,
    int nonce_len,
  ) {
    return _ECDSA_sign_with_nonce_and_leak_private_key_for_testing(
      digest,
      digest_len,
      eckey,
      nonce,
      nonce_len,
    );
  }

  late final _ECDSA_sign_with_nonce_and_leak_private_key_for_testingPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<EC_KEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('ECDSA_sign_with_nonce_and_leak_private_key_for_testing');
  late final _ECDSA_sign_with_nonce_and_leak_private_key_for_testing =
      _ECDSA_sign_with_nonce_and_leak_private_key_for_testingPtr.asFunction<
        ffi.Pointer<ECDSA_SIG> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<EC_KEY>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  ffi.Pointer<ECDSA_SIG> d2i_ECDSA_SIG(
    ffi.Pointer<ffi.Pointer<ECDSA_SIG>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_ECDSA_SIG(out, inp, len);
  }

  late final _d2i_ECDSA_SIGPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(
            ffi.Pointer<ffi.Pointer<ECDSA_SIG>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_ECDSA_SIG');
  late final _d2i_ECDSA_SIG = _d2i_ECDSA_SIGPtr
      .asFunction<
        ffi.Pointer<ECDSA_SIG> Function(
          ffi.Pointer<ffi.Pointer<ECDSA_SIG>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  int i2d_ECDSA_SIG(
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_ECDSA_SIG(sig, outp);
  }

  late final _i2d_ECDSA_SIGPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ECDSA_SIG>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_ECDSA_SIG');
  late final _i2d_ECDSA_SIG = _i2d_ECDSA_SIGPtr
      .asFunction<
        int Function(
          ffi.Pointer<ECDSA_SIG>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
        )
      >();

  ffi.Pointer<ENGINE> ENGINE_new() {
    return _ENGINE_new();
  }

  late final _ENGINE_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ENGINE> Function()>>('ENGINE_new');
  late final _ENGINE_new =
      _ENGINE_newPtr.asFunction<ffi.Pointer<ENGINE> Function()>();

  int ENGINE_free(ffi.Pointer<ENGINE> engine) {
    return _ENGINE_free(engine);
  }

  late final _ENGINE_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ENGINE>)>>(
        'ENGINE_free',
      );
  late final _ENGINE_free =
      _ENGINE_freePtr.asFunction<int Function(ffi.Pointer<ENGINE>)>();

  int ENGINE_set_RSA_method(
    ffi.Pointer<ENGINE> engine,
    ffi.Pointer<RSA_METHOD> method,
    int method_size,
  ) {
    return _ENGINE_set_RSA_method(engine, method, method_size);
  }

  late final _ENGINE_set_RSA_methodPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ENGINE>,
            ffi.Pointer<RSA_METHOD>,
            ffi.Size,
          )
        >
      >('ENGINE_set_RSA_method');
  late final _ENGINE_set_RSA_method =
      _ENGINE_set_RSA_methodPtr.asFunction<
        int Function(ffi.Pointer<ENGINE>, ffi.Pointer<RSA_METHOD>, int)
      >();

  ffi.Pointer<RSA_METHOD> ENGINE_get_RSA_method(ffi.Pointer<ENGINE> engine) {
    return _ENGINE_get_RSA_method(engine);
  }

  late final _ENGINE_get_RSA_methodPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA_METHOD> Function(ffi.Pointer<ENGINE>)
        >
      >('ENGINE_get_RSA_method');
  late final _ENGINE_get_RSA_method =
      _ENGINE_get_RSA_methodPtr.asFunction<
        ffi.Pointer<RSA_METHOD> Function(ffi.Pointer<ENGINE>)
      >();

  int ENGINE_set_ECDSA_method(
    ffi.Pointer<ENGINE> engine,
    ffi.Pointer<ECDSA_METHOD> method,
    int method_size,
  ) {
    return _ENGINE_set_ECDSA_method(engine, method, method_size);
  }

  late final _ENGINE_set_ECDSA_methodPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ENGINE>,
            ffi.Pointer<ECDSA_METHOD>,
            ffi.Size,
          )
        >
      >('ENGINE_set_ECDSA_method');
  late final _ENGINE_set_ECDSA_method =
      _ENGINE_set_ECDSA_methodPtr.asFunction<
        int Function(ffi.Pointer<ENGINE>, ffi.Pointer<ECDSA_METHOD>, int)
      >();

  ffi.Pointer<ECDSA_METHOD> ENGINE_get_ECDSA_method(
    ffi.Pointer<ENGINE> engine,
  ) {
    return _ENGINE_get_ECDSA_method(engine);
  }

  late final _ENGINE_get_ECDSA_methodPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ECDSA_METHOD> Function(ffi.Pointer<ENGINE>)
        >
      >('ENGINE_get_ECDSA_method');
  late final _ENGINE_get_ECDSA_method =
      _ENGINE_get_ECDSA_methodPtr.asFunction<
        ffi.Pointer<ECDSA_METHOD> Function(ffi.Pointer<ENGINE>)
      >();

  void METHOD_ref(ffi.Pointer<ffi.Void> method) {
    return _METHOD_ref(method);
  }

  late final _METHOD_refPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
        'METHOD_ref',
      );
  late final _METHOD_ref =
      _METHOD_refPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void METHOD_unref(ffi.Pointer<ffi.Void> method) {
    return _METHOD_unref(method);
  }

  late final _METHOD_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
        'METHOD_unref',
      );
  late final _METHOD_unref =
      _METHOD_unrefPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int HKDF(
    ffi.Pointer<ffi.Uint8> out_key,
    int out_len,
    ffi.Pointer<EVP_MD> digest,
    ffi.Pointer<ffi.Uint8> secret,
    int secret_len,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_len,
    ffi.Pointer<ffi.Uint8> info,
    int info_len,
  ) {
    return _HKDF(
      out_key,
      out_len,
      digest,
      secret,
      secret_len,
      salt,
      salt_len,
      info,
      info_len,
    );
  }

  late final _HKDFPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('HKDF');
  late final _HKDF =
      _HKDFPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int HKDF_extract(
    ffi.Pointer<ffi.Uint8> out_key,
    ffi.Pointer<ffi.Size> out_len,
    ffi.Pointer<EVP_MD> digest,
    ffi.Pointer<ffi.Uint8> secret,
    int secret_len,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_len,
  ) {
    return _HKDF_extract(
      out_key,
      out_len,
      digest,
      secret,
      secret_len,
      salt,
      salt_len,
    );
  }

  late final _HKDF_extractPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('HKDF_extract');
  late final _HKDF_extract =
      _HKDF_extractPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int HKDF_expand(
    ffi.Pointer<ffi.Uint8> out_key,
    int out_len,
    ffi.Pointer<EVP_MD> digest,
    ffi.Pointer<ffi.Uint8> prk,
    int prk_len,
    ffi.Pointer<ffi.Uint8> info,
    int info_len,
  ) {
    return _HKDF_expand(out_key, out_len, digest, prk, prk_len, info, info_len);
  }

  late final _HKDF_expandPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('HKDF_expand');
  late final _HKDF_expand =
      _HKDF_expandPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  ffi.Pointer<ffi.Uint8> HMAC(
    ffi.Pointer<EVP_MD> evp_md,
    ffi.Pointer<ffi.Void> key,
    int key_len,
    ffi.Pointer<ffi.Uint8> data,
    int data_len,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.UnsignedInt> out_len,
  ) {
    return _HMAC(evp_md, key, key_len, data, data_len, out, out_len);
  }

  late final _HMACPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.UnsignedInt>,
          )
        >
      >('HMAC');
  late final _HMAC =
      _HMACPtr.asFunction<
        ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedInt>,
        )
      >();

  void HMAC_CTX_init(ffi.Pointer<HMAC_CTX> ctx) {
    return _HMAC_CTX_init(ctx);
  }

  late final _HMAC_CTX_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HMAC_CTX>)>>(
        'HMAC_CTX_init',
      );
  late final _HMAC_CTX_init =
      _HMAC_CTX_initPtr.asFunction<void Function(ffi.Pointer<HMAC_CTX>)>();

  ffi.Pointer<HMAC_CTX> HMAC_CTX_new() {
    return _HMAC_CTX_new();
  }

  late final _HMAC_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<HMAC_CTX> Function()>>(
        'HMAC_CTX_new',
      );
  late final _HMAC_CTX_new =
      _HMAC_CTX_newPtr.asFunction<ffi.Pointer<HMAC_CTX> Function()>();

  void HMAC_CTX_cleanup(ffi.Pointer<HMAC_CTX> ctx) {
    return _HMAC_CTX_cleanup(ctx);
  }

  late final _HMAC_CTX_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HMAC_CTX>)>>(
        'HMAC_CTX_cleanup',
      );
  late final _HMAC_CTX_cleanup =
      _HMAC_CTX_cleanupPtr.asFunction<void Function(ffi.Pointer<HMAC_CTX>)>();

  void HMAC_CTX_cleanse(ffi.Pointer<HMAC_CTX> ctx) {
    return _HMAC_CTX_cleanse(ctx);
  }

  late final _HMAC_CTX_cleansePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HMAC_CTX>)>>(
        'HMAC_CTX_cleanse',
      );
  late final _HMAC_CTX_cleanse =
      _HMAC_CTX_cleansePtr.asFunction<void Function(ffi.Pointer<HMAC_CTX>)>();

  void HMAC_CTX_free(ffi.Pointer<HMAC_CTX> ctx) {
    return _HMAC_CTX_free(ctx);
  }

  late final _HMAC_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HMAC_CTX>)>>(
        'HMAC_CTX_free',
      );
  late final _HMAC_CTX_free =
      _HMAC_CTX_freePtr.asFunction<void Function(ffi.Pointer<HMAC_CTX>)>();

  int HMAC_Init_ex(
    ffi.Pointer<HMAC_CTX> ctx,
    ffi.Pointer<ffi.Void> key,
    int key_len,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<ENGINE> impl,
  ) {
    return _HMAC_Init_ex(ctx, key, key_len, md, impl);
  }

  late final _HMAC_Init_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<HMAC_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ENGINE>,
          )
        >
      >('HMAC_Init_ex');
  late final _HMAC_Init_ex =
      _HMAC_Init_exPtr.asFunction<
        int Function(
          ffi.Pointer<HMAC_CTX>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
        )
      >();

  int HMAC_Update(
    ffi.Pointer<HMAC_CTX> ctx,
    ffi.Pointer<ffi.Uint8> data,
    int data_len,
  ) {
    return _HMAC_Update(ctx, data, data_len);
  }

  late final _HMAC_UpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<HMAC_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('HMAC_Update');
  late final _HMAC_Update =
      _HMAC_UpdatePtr.asFunction<
        int Function(ffi.Pointer<HMAC_CTX>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int HMAC_Final(
    ffi.Pointer<HMAC_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.UnsignedInt> out_len,
  ) {
    return _HMAC_Final(ctx, out, out_len);
  }

  late final _HMAC_FinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<HMAC_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.UnsignedInt>,
          )
        >
      >('HMAC_Final');
  late final _HMAC_Final =
      _HMAC_FinalPtr.asFunction<
        int Function(
          ffi.Pointer<HMAC_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedInt>,
        )
      >();

  int HMAC_size(ffi.Pointer<HMAC_CTX> ctx) {
    return _HMAC_size(ctx);
  }

  late final _HMAC_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<HMAC_CTX>)>>(
        'HMAC_size',
      );
  late final _HMAC_size =
      _HMAC_sizePtr.asFunction<int Function(ffi.Pointer<HMAC_CTX>)>();

  ffi.Pointer<EVP_MD> HMAC_CTX_get_md(ffi.Pointer<HMAC_CTX> ctx) {
    return _HMAC_CTX_get_md(ctx);
  }

  late final _HMAC_CTX_get_mdPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<EVP_MD> Function(ffi.Pointer<HMAC_CTX>)>
      >('HMAC_CTX_get_md');
  late final _HMAC_CTX_get_md =
      _HMAC_CTX_get_mdPtr.asFunction<
        ffi.Pointer<EVP_MD> Function(ffi.Pointer<HMAC_CTX>)
      >();

  int HMAC_CTX_copy_ex(ffi.Pointer<HMAC_CTX> dest, ffi.Pointer<HMAC_CTX> src) {
    return _HMAC_CTX_copy_ex(dest, src);
  }

  late final _HMAC_CTX_copy_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<HMAC_CTX>, ffi.Pointer<HMAC_CTX>)
        >
      >('HMAC_CTX_copy_ex');
  late final _HMAC_CTX_copy_ex =
      _HMAC_CTX_copy_exPtr.asFunction<
        int Function(ffi.Pointer<HMAC_CTX>, ffi.Pointer<HMAC_CTX>)
      >();

  void HMAC_CTX_reset(ffi.Pointer<HMAC_CTX> ctx) {
    return _HMAC_CTX_reset(ctx);
  }

  late final _HMAC_CTX_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HMAC_CTX>)>>(
        'HMAC_CTX_reset',
      );
  late final _HMAC_CTX_reset =
      _HMAC_CTX_resetPtr.asFunction<void Function(ffi.Pointer<HMAC_CTX>)>();

  int HMAC_Init(
    ffi.Pointer<HMAC_CTX> ctx,
    ffi.Pointer<ffi.Void> key,
    int key_len,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _HMAC_Init(ctx, key, key_len, md);
  }

  late final _HMAC_InitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<HMAC_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Int,
            ffi.Pointer<EVP_MD>,
          )
        >
      >('HMAC_Init');
  late final _HMAC_Init =
      _HMAC_InitPtr.asFunction<
        int Function(
          ffi.Pointer<HMAC_CTX>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<EVP_MD>,
        )
      >();

  int HMAC_CTX_copy(ffi.Pointer<HMAC_CTX> dest, ffi.Pointer<HMAC_CTX> src) {
    return _HMAC_CTX_copy(dest, src);
  }

  late final _HMAC_CTX_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<HMAC_CTX>, ffi.Pointer<HMAC_CTX>)
        >
      >('HMAC_CTX_copy');
  late final _HMAC_CTX_copy =
      _HMAC_CTX_copyPtr.asFunction<
        int Function(ffi.Pointer<HMAC_CTX>, ffi.Pointer<HMAC_CTX>)
      >();

  int MD5_Init(ffi.Pointer<MD5_CTX> md5) {
    return _MD5_Init(md5);
  }

  late final _MD5_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<MD5_CTX>)>>(
        'MD5_Init',
      );
  late final _MD5_Init =
      _MD5_InitPtr.asFunction<int Function(ffi.Pointer<MD5_CTX>)>();

  int MD5_Update(
    ffi.Pointer<MD5_CTX> md5,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _MD5_Update(md5, data, len);
  }

  late final _MD5_UpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<MD5_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('MD5_Update');
  late final _MD5_Update =
      _MD5_UpdatePtr.asFunction<
        int Function(ffi.Pointer<MD5_CTX>, ffi.Pointer<ffi.Void>, int)
      >();

  int MD5_Final(ffi.Pointer<ffi.Uint8> out, ffi.Pointer<MD5_CTX> md5) {
    return _MD5_Final(out, md5);
  }

  late final _MD5_FinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<MD5_CTX>)
        >
      >('MD5_Final');
  late final _MD5_Final =
      _MD5_FinalPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<MD5_CTX>)
      >();

  ffi.Pointer<ffi.Uint8> MD5(
    ffi.Pointer<ffi.Uint8> data,
    int len,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _MD5(data, len, out);
  }

  late final _MD5Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('MD5');
  late final _MD5 =
      _MD5Ptr.asFunction<
        ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  void MD5_Transform(ffi.Pointer<MD5_CTX> md5, ffi.Pointer<ffi.Uint8> block) {
    return _MD5_Transform(md5, block);
  }

  late final _MD5_TransformPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<MD5_CTX>, ffi.Pointer<ffi.Uint8>)
        >
      >('MD5_Transform');
  late final _MD5_Transform =
      _MD5_TransformPtr.asFunction<
        void Function(ffi.Pointer<MD5_CTX>, ffi.Pointer<ffi.Uint8>)
      >();

  int MLDSA65_generate_key(
    ffi.Pointer<ffi.Uint8> out_encoded_public_key,
    ffi.Pointer<ffi.Uint8> out_seed,
    ffi.Pointer<MLDSA65_private_key> out_private_key,
  ) {
    return _MLDSA65_generate_key(
      out_encoded_public_key,
      out_seed,
      out_private_key,
    );
  }

  late final _MLDSA65_generate_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<MLDSA65_private_key>,
          )
        >
      >('MLDSA65_generate_key');
  late final _MLDSA65_generate_key =
      _MLDSA65_generate_keyPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<MLDSA65_private_key>,
        )
      >();

  int MLDSA65_private_key_from_seed(
    ffi.Pointer<MLDSA65_private_key> out_private_key,
    ffi.Pointer<ffi.Uint8> seed,
    int seed_len,
  ) {
    return _MLDSA65_private_key_from_seed(out_private_key, seed, seed_len);
  }

  late final _MLDSA65_private_key_from_seedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<MLDSA65_private_key>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('MLDSA65_private_key_from_seed');
  late final _MLDSA65_private_key_from_seed =
      _MLDSA65_private_key_from_seedPtr.asFunction<
        int Function(
          ffi.Pointer<MLDSA65_private_key>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int MLDSA65_public_from_private(
    ffi.Pointer<MLDSA65_public_key> out_public_key,
    ffi.Pointer<MLDSA65_private_key> private_key,
  ) {
    return _MLDSA65_public_from_private(out_public_key, private_key);
  }

  late final _MLDSA65_public_from_privatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<MLDSA65_public_key>,
            ffi.Pointer<MLDSA65_private_key>,
          )
        >
      >('MLDSA65_public_from_private');
  late final _MLDSA65_public_from_private =
      _MLDSA65_public_from_privatePtr.asFunction<
        int Function(
          ffi.Pointer<MLDSA65_public_key>,
          ffi.Pointer<MLDSA65_private_key>,
        )
      >();

  int MLDSA65_sign(
    ffi.Pointer<ffi.Uint8> out_encoded_signature,
    ffi.Pointer<MLDSA65_private_key> private_key,
    ffi.Pointer<ffi.Uint8> msg,
    int msg_len,
    ffi.Pointer<ffi.Uint8> context,
    int context_len,
  ) {
    return _MLDSA65_sign(
      out_encoded_signature,
      private_key,
      msg,
      msg_len,
      context,
      context_len,
    );
  }

  late final _MLDSA65_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<MLDSA65_private_key>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('MLDSA65_sign');
  late final _MLDSA65_sign =
      _MLDSA65_signPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<MLDSA65_private_key>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int MLDSA65_verify(
    ffi.Pointer<MLDSA65_public_key> public_key,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> msg,
    int msg_len,
    ffi.Pointer<ffi.Uint8> context,
    int context_len,
  ) {
    return _MLDSA65_verify(
      public_key,
      signature,
      signature_len,
      msg,
      msg_len,
      context,
      context_len,
    );
  }

  late final _MLDSA65_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<MLDSA65_public_key>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('MLDSA65_verify');
  late final _MLDSA65_verify =
      _MLDSA65_verifyPtr.asFunction<
        int Function(
          ffi.Pointer<MLDSA65_public_key>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int MLDSA65_marshal_public_key(
    ffi.Pointer<CBB> out,
    ffi.Pointer<MLDSA65_public_key> public_key,
  ) {
    return _MLDSA65_marshal_public_key(out, public_key);
  }

  late final _MLDSA65_marshal_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<MLDSA65_public_key>)
        >
      >('MLDSA65_marshal_public_key');
  late final _MLDSA65_marshal_public_key =
      _MLDSA65_marshal_public_keyPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<MLDSA65_public_key>)
      >();

  int MLDSA65_parse_public_key(
    ffi.Pointer<MLDSA65_public_key> public_key,
    ffi.Pointer<CBS> in1,
  ) {
    return _MLDSA65_parse_public_key(public_key, in1);
  }

  late final _MLDSA65_parse_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<MLDSA65_public_key>, ffi.Pointer<CBS>)
        >
      >('MLDSA65_parse_public_key');
  late final _MLDSA65_parse_public_key =
      _MLDSA65_parse_public_keyPtr.asFunction<
        int Function(ffi.Pointer<MLDSA65_public_key>, ffi.Pointer<CBS>)
      >();

  int MLDSA87_generate_key(
    ffi.Pointer<ffi.Uint8> out_encoded_public_key,
    ffi.Pointer<ffi.Uint8> out_seed,
    ffi.Pointer<MLDSA87_private_key> out_private_key,
  ) {
    return _MLDSA87_generate_key(
      out_encoded_public_key,
      out_seed,
      out_private_key,
    );
  }

  late final _MLDSA87_generate_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<MLDSA87_private_key>,
          )
        >
      >('MLDSA87_generate_key');
  late final _MLDSA87_generate_key =
      _MLDSA87_generate_keyPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<MLDSA87_private_key>,
        )
      >();

  int MLDSA87_private_key_from_seed(
    ffi.Pointer<MLDSA87_private_key> out_private_key,
    ffi.Pointer<ffi.Uint8> seed,
    int seed_len,
  ) {
    return _MLDSA87_private_key_from_seed(out_private_key, seed, seed_len);
  }

  late final _MLDSA87_private_key_from_seedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<MLDSA87_private_key>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('MLDSA87_private_key_from_seed');
  late final _MLDSA87_private_key_from_seed =
      _MLDSA87_private_key_from_seedPtr.asFunction<
        int Function(
          ffi.Pointer<MLDSA87_private_key>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int MLDSA87_public_from_private(
    ffi.Pointer<MLDSA87_public_key> out_public_key,
    ffi.Pointer<MLDSA87_private_key> private_key,
  ) {
    return _MLDSA87_public_from_private(out_public_key, private_key);
  }

  late final _MLDSA87_public_from_privatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<MLDSA87_public_key>,
            ffi.Pointer<MLDSA87_private_key>,
          )
        >
      >('MLDSA87_public_from_private');
  late final _MLDSA87_public_from_private =
      _MLDSA87_public_from_privatePtr.asFunction<
        int Function(
          ffi.Pointer<MLDSA87_public_key>,
          ffi.Pointer<MLDSA87_private_key>,
        )
      >();

  int MLDSA87_sign(
    ffi.Pointer<ffi.Uint8> out_encoded_signature,
    ffi.Pointer<MLDSA87_private_key> private_key,
    ffi.Pointer<ffi.Uint8> msg,
    int msg_len,
    ffi.Pointer<ffi.Uint8> context,
    int context_len,
  ) {
    return _MLDSA87_sign(
      out_encoded_signature,
      private_key,
      msg,
      msg_len,
      context,
      context_len,
    );
  }

  late final _MLDSA87_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<MLDSA87_private_key>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('MLDSA87_sign');
  late final _MLDSA87_sign =
      _MLDSA87_signPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<MLDSA87_private_key>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int MLDSA87_verify(
    ffi.Pointer<MLDSA87_public_key> public_key,
    ffi.Pointer<ffi.Uint8> signature,
    int signature_len,
    ffi.Pointer<ffi.Uint8> msg,
    int msg_len,
    ffi.Pointer<ffi.Uint8> context,
    int context_len,
  ) {
    return _MLDSA87_verify(
      public_key,
      signature,
      signature_len,
      msg,
      msg_len,
      context,
      context_len,
    );
  }

  late final _MLDSA87_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<MLDSA87_public_key>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('MLDSA87_verify');
  late final _MLDSA87_verify =
      _MLDSA87_verifyPtr.asFunction<
        int Function(
          ffi.Pointer<MLDSA87_public_key>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int MLDSA87_marshal_public_key(
    ffi.Pointer<CBB> out,
    ffi.Pointer<MLDSA87_public_key> public_key,
  ) {
    return _MLDSA87_marshal_public_key(out, public_key);
  }

  late final _MLDSA87_marshal_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<MLDSA87_public_key>)
        >
      >('MLDSA87_marshal_public_key');
  late final _MLDSA87_marshal_public_key =
      _MLDSA87_marshal_public_keyPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<MLDSA87_public_key>)
      >();

  int MLDSA87_parse_public_key(
    ffi.Pointer<MLDSA87_public_key> public_key,
    ffi.Pointer<CBS> in1,
  ) {
    return _MLDSA87_parse_public_key(public_key, in1);
  }

  late final _MLDSA87_parse_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<MLDSA87_public_key>, ffi.Pointer<CBS>)
        >
      >('MLDSA87_parse_public_key');
  late final _MLDSA87_parse_public_key =
      _MLDSA87_parse_public_keyPtr.asFunction<
        int Function(ffi.Pointer<MLDSA87_public_key>, ffi.Pointer<CBS>)
      >();

  void MLKEM768_generate_key(
    ffi.Pointer<ffi.Uint8> out_encoded_public_key,
    ffi.Pointer<ffi.Uint8> optional_out_seed,
    ffi.Pointer<MLKEM768_private_key> out_private_key,
  ) {
    return _MLKEM768_generate_key(
      out_encoded_public_key,
      optional_out_seed,
      out_private_key,
    );
  }

  late final _MLKEM768_generate_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<MLKEM768_private_key>,
          )
        >
      >('MLKEM768_generate_key');
  late final _MLKEM768_generate_key =
      _MLKEM768_generate_keyPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<MLKEM768_private_key>,
        )
      >();

  int MLKEM768_private_key_from_seed(
    ffi.Pointer<MLKEM768_private_key> out_private_key,
    ffi.Pointer<ffi.Uint8> seed,
    int seed_len,
  ) {
    return _MLKEM768_private_key_from_seed(out_private_key, seed, seed_len);
  }

  late final _MLKEM768_private_key_from_seedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<MLKEM768_private_key>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('MLKEM768_private_key_from_seed');
  late final _MLKEM768_private_key_from_seed =
      _MLKEM768_private_key_from_seedPtr.asFunction<
        int Function(
          ffi.Pointer<MLKEM768_private_key>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  void MLKEM768_public_from_private(
    ffi.Pointer<MLKEM768_public_key> out_public_key,
    ffi.Pointer<MLKEM768_private_key> private_key,
  ) {
    return _MLKEM768_public_from_private(out_public_key, private_key);
  }

  late final _MLKEM768_public_from_privatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<MLKEM768_public_key>,
            ffi.Pointer<MLKEM768_private_key>,
          )
        >
      >('MLKEM768_public_from_private');
  late final _MLKEM768_public_from_private =
      _MLKEM768_public_from_privatePtr.asFunction<
        void Function(
          ffi.Pointer<MLKEM768_public_key>,
          ffi.Pointer<MLKEM768_private_key>,
        )
      >();

  void MLKEM768_encap(
    ffi.Pointer<ffi.Uint8> out_ciphertext,
    ffi.Pointer<ffi.Uint8> out_shared_secret,
    ffi.Pointer<MLKEM768_public_key> public_key,
  ) {
    return _MLKEM768_encap(out_ciphertext, out_shared_secret, public_key);
  }

  late final _MLKEM768_encapPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<MLKEM768_public_key>,
          )
        >
      >('MLKEM768_encap');
  late final _MLKEM768_encap =
      _MLKEM768_encapPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<MLKEM768_public_key>,
        )
      >();

  int MLKEM768_decap(
    ffi.Pointer<ffi.Uint8> out_shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    int ciphertext_len,
    ffi.Pointer<MLKEM768_private_key> private_key,
  ) {
    return _MLKEM768_decap(
      out_shared_secret,
      ciphertext,
      ciphertext_len,
      private_key,
    );
  }

  late final _MLKEM768_decapPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<MLKEM768_private_key>,
          )
        >
      >('MLKEM768_decap');
  late final _MLKEM768_decap =
      _MLKEM768_decapPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<MLKEM768_private_key>,
        )
      >();

  int MLKEM768_marshal_public_key(
    ffi.Pointer<CBB> out,
    ffi.Pointer<MLKEM768_public_key> public_key,
  ) {
    return _MLKEM768_marshal_public_key(out, public_key);
  }

  late final _MLKEM768_marshal_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<MLKEM768_public_key>)
        >
      >('MLKEM768_marshal_public_key');
  late final _MLKEM768_marshal_public_key =
      _MLKEM768_marshal_public_keyPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<MLKEM768_public_key>)
      >();

  int MLKEM768_parse_public_key(
    ffi.Pointer<MLKEM768_public_key> out_public_key,
    ffi.Pointer<CBS> in1,
  ) {
    return _MLKEM768_parse_public_key(out_public_key, in1);
  }

  late final _MLKEM768_parse_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<MLKEM768_public_key>, ffi.Pointer<CBS>)
        >
      >('MLKEM768_parse_public_key');
  late final _MLKEM768_parse_public_key =
      _MLKEM768_parse_public_keyPtr.asFunction<
        int Function(ffi.Pointer<MLKEM768_public_key>, ffi.Pointer<CBS>)
      >();

  void MLKEM1024_generate_key(
    ffi.Pointer<ffi.Uint8> out_encoded_public_key,
    ffi.Pointer<ffi.Uint8> optional_out_seed,
    ffi.Pointer<MLKEM1024_private_key> out_private_key,
  ) {
    return _MLKEM1024_generate_key(
      out_encoded_public_key,
      optional_out_seed,
      out_private_key,
    );
  }

  late final _MLKEM1024_generate_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<MLKEM1024_private_key>,
          )
        >
      >('MLKEM1024_generate_key');
  late final _MLKEM1024_generate_key =
      _MLKEM1024_generate_keyPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<MLKEM1024_private_key>,
        )
      >();

  int MLKEM1024_private_key_from_seed(
    ffi.Pointer<MLKEM1024_private_key> out_private_key,
    ffi.Pointer<ffi.Uint8> seed,
    int seed_len,
  ) {
    return _MLKEM1024_private_key_from_seed(out_private_key, seed, seed_len);
  }

  late final _MLKEM1024_private_key_from_seedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<MLKEM1024_private_key>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('MLKEM1024_private_key_from_seed');
  late final _MLKEM1024_private_key_from_seed =
      _MLKEM1024_private_key_from_seedPtr.asFunction<
        int Function(
          ffi.Pointer<MLKEM1024_private_key>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  void MLKEM1024_public_from_private(
    ffi.Pointer<MLKEM1024_public_key> out_public_key,
    ffi.Pointer<MLKEM1024_private_key> private_key,
  ) {
    return _MLKEM1024_public_from_private(out_public_key, private_key);
  }

  late final _MLKEM1024_public_from_privatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<MLKEM1024_public_key>,
            ffi.Pointer<MLKEM1024_private_key>,
          )
        >
      >('MLKEM1024_public_from_private');
  late final _MLKEM1024_public_from_private =
      _MLKEM1024_public_from_privatePtr.asFunction<
        void Function(
          ffi.Pointer<MLKEM1024_public_key>,
          ffi.Pointer<MLKEM1024_private_key>,
        )
      >();

  void MLKEM1024_encap(
    ffi.Pointer<ffi.Uint8> out_ciphertext,
    ffi.Pointer<ffi.Uint8> out_shared_secret,
    ffi.Pointer<MLKEM1024_public_key> public_key,
  ) {
    return _MLKEM1024_encap(out_ciphertext, out_shared_secret, public_key);
  }

  late final _MLKEM1024_encapPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<MLKEM1024_public_key>,
          )
        >
      >('MLKEM1024_encap');
  late final _MLKEM1024_encap =
      _MLKEM1024_encapPtr.asFunction<
        void Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<MLKEM1024_public_key>,
        )
      >();

  int MLKEM1024_decap(
    ffi.Pointer<ffi.Uint8> out_shared_secret,
    ffi.Pointer<ffi.Uint8> ciphertext,
    int ciphertext_len,
    ffi.Pointer<MLKEM1024_private_key> private_key,
  ) {
    return _MLKEM1024_decap(
      out_shared_secret,
      ciphertext,
      ciphertext_len,
      private_key,
    );
  }

  late final _MLKEM1024_decapPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<MLKEM1024_private_key>,
          )
        >
      >('MLKEM1024_decap');
  late final _MLKEM1024_decap =
      _MLKEM1024_decapPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<MLKEM1024_private_key>,
        )
      >();

  int MLKEM1024_marshal_public_key(
    ffi.Pointer<CBB> out,
    ffi.Pointer<MLKEM1024_public_key> public_key,
  ) {
    return _MLKEM1024_marshal_public_key(out, public_key);
  }

  late final _MLKEM1024_marshal_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<MLKEM1024_public_key>)
        >
      >('MLKEM1024_marshal_public_key');
  late final _MLKEM1024_marshal_public_key =
      _MLKEM1024_marshal_public_keyPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<MLKEM1024_public_key>)
      >();

  int MLKEM1024_parse_public_key(
    ffi.Pointer<MLKEM1024_public_key> out_public_key,
    ffi.Pointer<CBS> in1,
  ) {
    return _MLKEM1024_parse_public_key(out_public_key, in1);
  }

  late final _MLKEM1024_parse_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<MLKEM1024_public_key>, ffi.Pointer<CBS>)
        >
      >('MLKEM1024_parse_public_key');
  late final _MLKEM1024_parse_public_key =
      _MLKEM1024_parse_public_keyPtr.asFunction<
        int Function(ffi.Pointer<MLKEM1024_public_key>, ffi.Pointer<CBS>)
      >();

  void RC4_set_key(
    ffi.Pointer<RC4_KEY> rc4key,
    int len,
    ffi.Pointer<ffi.Uint8> key,
  ) {
    return _RC4_set_key(rc4key, len, key);
  }

  late final _RC4_set_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<RC4_KEY>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('RC4_set_key');
  late final _RC4_set_key =
      _RC4_set_keyPtr.asFunction<
        void Function(ffi.Pointer<RC4_KEY>, int, ffi.Pointer<ffi.Uint8>)
      >();

  void RC4(
    ffi.Pointer<RC4_KEY> key,
    int len,
    ffi.Pointer<ffi.Uint8> in1,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _RC4(key, len, in1, out);
  }

  late final _RC4Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<RC4_KEY>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('RC4');
  late final _RC4 =
      _RC4Ptr.asFunction<
        void Function(
          ffi.Pointer<RC4_KEY>,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  ffi.Pointer<ffi.Char> RC4_options() {
    return _RC4_options();
  }

  late final _RC4_optionsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
        'RC4_options',
      );
  late final _RC4_options =
      _RC4_optionsPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<RSA> RSA_new_public_key(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> e,
  ) {
    return _RSA_new_public_key(n, e);
  }

  late final _RSA_new_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('RSA_new_public_key');
  late final _RSA_new_public_key =
      _RSA_new_public_keyPtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<RSA> RSA_new_private_key(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BIGNUM> d,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> q,
    ffi.Pointer<BIGNUM> dmp1,
    ffi.Pointer<BIGNUM> dmq1,
    ffi.Pointer<BIGNUM> iqmp,
  ) {
    return _RSA_new_private_key(n, e, d, p, q, dmp1, dmq1, iqmp);
  }

  late final _RSA_new_private_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('RSA_new_private_key');
  late final _RSA_new_private_key =
      _RSA_new_private_keyPtr.asFunction<
        ffi.Pointer<RSA> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  ffi.Pointer<RSA> RSA_new() {
    return _RSA_new();
  }

  late final _RSA_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA> Function()>>('RSA_new');
  late final _RSA_new = _RSA_newPtr.asFunction<ffi.Pointer<RSA> Function()>();

  ffi.Pointer<RSA> RSA_new_method(ffi.Pointer<ENGINE> engine) {
    return _RSA_new_method(engine);
  }

  late final _RSA_new_methodPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<RSA> Function(ffi.Pointer<ENGINE>)>
      >('RSA_new_method');
  late final _RSA_new_method =
      _RSA_new_methodPtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<ENGINE>)
      >();

  void RSA_free(ffi.Pointer<RSA> rsa) {
    return _RSA_free(rsa);
  }

  late final _RSA_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RSA>)>>(
        'RSA_free',
      );
  late final _RSA_free =
      _RSA_freePtr.asFunction<void Function(ffi.Pointer<RSA>)>();

  int RSA_up_ref(ffi.Pointer<RSA> rsa) {
    return _RSA_up_ref(rsa);
  }

  late final _RSA_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
        'RSA_up_ref',
      );
  late final _RSA_up_ref =
      _RSA_up_refPtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  int RSA_bits(ffi.Pointer<RSA> rsa) {
    return _RSA_bits(rsa);
  }

  late final _RSA_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<RSA>)>>(
        'RSA_bits',
      );
  late final _RSA_bits =
      _RSA_bitsPtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<BIGNUM> RSA_get0_n(ffi.Pointer<RSA> rsa) {
    return _RSA_get0_n(rsa);
  }

  late final _RSA_get0_nPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>
      >('RSA_get0_n');
  late final _RSA_get0_n =
      _RSA_get0_nPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)
      >();

  ffi.Pointer<BIGNUM> RSA_get0_e(ffi.Pointer<RSA> rsa) {
    return _RSA_get0_e(rsa);
  }

  late final _RSA_get0_ePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>
      >('RSA_get0_e');
  late final _RSA_get0_e =
      _RSA_get0_ePtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)
      >();

  ffi.Pointer<BIGNUM> RSA_get0_d(ffi.Pointer<RSA> rsa) {
    return _RSA_get0_d(rsa);
  }

  late final _RSA_get0_dPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>
      >('RSA_get0_d');
  late final _RSA_get0_d =
      _RSA_get0_dPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)
      >();

  ffi.Pointer<BIGNUM> RSA_get0_p(ffi.Pointer<RSA> rsa) {
    return _RSA_get0_p(rsa);
  }

  late final _RSA_get0_pPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>
      >('RSA_get0_p');
  late final _RSA_get0_p =
      _RSA_get0_pPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)
      >();

  ffi.Pointer<BIGNUM> RSA_get0_q(ffi.Pointer<RSA> rsa) {
    return _RSA_get0_q(rsa);
  }

  late final _RSA_get0_qPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>
      >('RSA_get0_q');
  late final _RSA_get0_q =
      _RSA_get0_qPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)
      >();

  ffi.Pointer<BIGNUM> RSA_get0_dmp1(ffi.Pointer<RSA> rsa) {
    return _RSA_get0_dmp1(rsa);
  }

  late final _RSA_get0_dmp1Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>
      >('RSA_get0_dmp1');
  late final _RSA_get0_dmp1 =
      _RSA_get0_dmp1Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)
      >();

  ffi.Pointer<BIGNUM> RSA_get0_dmq1(ffi.Pointer<RSA> rsa) {
    return _RSA_get0_dmq1(rsa);
  }

  late final _RSA_get0_dmq1Ptr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>
      >('RSA_get0_dmq1');
  late final _RSA_get0_dmq1 =
      _RSA_get0_dmq1Ptr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)
      >();

  ffi.Pointer<BIGNUM> RSA_get0_iqmp(ffi.Pointer<RSA> rsa) {
    return _RSA_get0_iqmp(rsa);
  }

  late final _RSA_get0_iqmpPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>
      >('RSA_get0_iqmp');
  late final _RSA_get0_iqmp =
      _RSA_get0_iqmpPtr.asFunction<
        ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)
      >();

  void RSA_get0_key(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_n,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_e,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_d,
  ) {
    return _RSA_get0_key(rsa, out_n, out_e, out_d);
  }

  late final _RSA_get0_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
          )
        >
      >('RSA_get0_key');
  late final _RSA_get0_key =
      _RSA_get0_keyPtr.asFunction<
        void Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
        )
      >();

  void RSA_get0_factors(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_p,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_q,
  ) {
    return _RSA_get0_factors(rsa, out_p, out_q);
  }

  late final _RSA_get0_factorsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
          )
        >
      >('RSA_get0_factors');
  late final _RSA_get0_factors =
      _RSA_get0_factorsPtr.asFunction<
        void Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
        )
      >();

  void RSA_get0_crt_params(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_dmp1,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_dmq1,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_iqmp,
  ) {
    return _RSA_get0_crt_params(rsa, out_dmp1, out_dmq1, out_iqmp);
  }

  late final _RSA_get0_crt_paramsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
            ffi.Pointer<ffi.Pointer<BIGNUM>>,
          )
        >
      >('RSA_get0_crt_params');
  late final _RSA_get0_crt_params =
      _RSA_get0_crt_paramsPtr.asFunction<
        void Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
        )
      >();

  int RSA_set0_key(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BIGNUM> d,
  ) {
    return _RSA_set0_key(rsa, n, e, d);
  }

  late final _RSA_set0_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('RSA_set0_key');
  late final _RSA_set0_key =
      _RSA_set0_keyPtr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int RSA_set0_factors(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> q,
  ) {
    return _RSA_set0_factors(rsa, p, q);
  }

  late final _RSA_set0_factorsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('RSA_set0_factors');
  late final _RSA_set0_factors =
      _RSA_set0_factorsPtr.asFunction<
        int Function(ffi.Pointer<RSA>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  int RSA_set0_crt_params(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<BIGNUM> dmp1,
    ffi.Pointer<BIGNUM> dmq1,
    ffi.Pointer<BIGNUM> iqmp,
  ) {
    return _RSA_set0_crt_params(rsa, dmp1, dmq1, iqmp);
  }

  late final _RSA_set0_crt_paramsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('RSA_set0_crt_params');
  late final _RSA_set0_crt_params =
      _RSA_set0_crt_paramsPtr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int RSA_generate_key_ex(
    ffi.Pointer<RSA> rsa,
    int bits,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _RSA_generate_key_ex(rsa, bits, e, cb);
  }

  late final _RSA_generate_key_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Int,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BN_GENCB>,
          )
        >
      >('RSA_generate_key_ex');
  late final _RSA_generate_key_ex =
      _RSA_generate_key_exPtr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_GENCB>,
        )
      >();

  int RSA_generate_key_fips(
    ffi.Pointer<RSA> rsa,
    int bits,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _RSA_generate_key_fips(rsa, bits, cb);
  }

  late final _RSA_generate_key_fipsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA>, ffi.Int, ffi.Pointer<BN_GENCB>)
        >
      >('RSA_generate_key_fips');
  late final _RSA_generate_key_fips =
      _RSA_generate_key_fipsPtr.asFunction<
        int Function(ffi.Pointer<RSA>, int, ffi.Pointer<BN_GENCB>)
      >();

  int RSA_encrypt(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Size> out_len,
    ffi.Pointer<ffi.Uint8> out,
    int max_out,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
    int padding,
  ) {
    return _RSA_encrypt(rsa, out_len, out, max_out, in1, in_len, padding);
  }

  late final _RSA_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
          )
        >
      >('RSA_encrypt');
  late final _RSA_encrypt =
      _RSA_encryptPtr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
        )
      >();

  int RSA_decrypt(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Size> out_len,
    ffi.Pointer<ffi.Uint8> out,
    int max_out,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
    int padding,
  ) {
    return _RSA_decrypt(rsa, out_len, out, max_out, in1, in_len, padding);
  }

  late final _RSA_decryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
          )
        >
      >('RSA_decrypt');
  late final _RSA_decrypt =
      _RSA_decryptPtr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
        )
      >();

  int RSA_public_encrypt(
    int flen,
    ffi.Pointer<ffi.Uint8> from,
    ffi.Pointer<ffi.Uint8> to,
    ffi.Pointer<RSA> rsa,
    int padding,
  ) {
    return _RSA_public_encrypt(flen, from, to, rsa, padding);
  }

  late final _RSA_public_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<RSA>,
            ffi.Int,
          )
        >
      >('RSA_public_encrypt');
  late final _RSA_public_encrypt =
      _RSA_public_encryptPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<RSA>,
          int,
        )
      >();

  int RSA_private_decrypt(
    int flen,
    ffi.Pointer<ffi.Uint8> from,
    ffi.Pointer<ffi.Uint8> to,
    ffi.Pointer<RSA> rsa,
    int padding,
  ) {
    return _RSA_private_decrypt(flen, from, to, rsa, padding);
  }

  late final _RSA_private_decryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<RSA>,
            ffi.Int,
          )
        >
      >('RSA_private_decrypt');
  late final _RSA_private_decrypt =
      _RSA_private_decryptPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<RSA>,
          int,
        )
      >();

  int RSA_sign(
    int hash_nid,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.UnsignedInt> out_len,
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_sign(hash_nid, digest, digest_len, out, out_len, rsa);
  }

  late final _RSA_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<RSA>,
          )
        >
      >('RSA_sign');
  late final _RSA_sign =
      _RSA_signPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<RSA>,
        )
      >();

  int RSA_sign_pss_mgf1(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Size> out_len,
    ffi.Pointer<ffi.Uint8> out,
    int max_out,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<EVP_MD> mgf1_md,
    int salt_len,
  ) {
    return _RSA_sign_pss_mgf1(
      rsa,
      out_len,
      out,
      max_out,
      digest,
      digest_len,
      md,
      mgf1_md,
      salt_len,
    );
  }

  late final _RSA_sign_pss_mgf1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<EVP_MD>,
            ffi.Int,
          )
        >
      >('RSA_sign_pss_mgf1');
  late final _RSA_sign_pss_mgf1 =
      _RSA_sign_pss_mgf1Ptr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<EVP_MD>,
          int,
        )
      >();

  int RSA_sign_raw(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Size> out_len,
    ffi.Pointer<ffi.Uint8> out,
    int max_out,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
    int padding,
  ) {
    return _RSA_sign_raw(rsa, out_len, out, max_out, in1, in_len, padding);
  }

  late final _RSA_sign_rawPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
          )
        >
      >('RSA_sign_raw');
  late final _RSA_sign_raw =
      _RSA_sign_rawPtr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
        )
      >();

  int RSA_verify(
    int hash_nid,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<ffi.Uint8> sig,
    int sig_len,
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_verify(hash_nid, digest, digest_len, sig, sig_len, rsa);
  }

  late final _RSA_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<RSA>,
          )
        >
      >('RSA_verify');
  late final _RSA_verify =
      _RSA_verifyPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<RSA>,
        )
      >();

  int RSA_verify_pss_mgf1(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<EVP_MD> mgf1_md,
    int salt_len,
    ffi.Pointer<ffi.Uint8> sig,
    int sig_len,
  ) {
    return _RSA_verify_pss_mgf1(
      rsa,
      digest,
      digest_len,
      md,
      mgf1_md,
      salt_len,
      sig,
      sig_len,
    );
  }

  late final _RSA_verify_pss_mgf1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<EVP_MD>,
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('RSA_verify_pss_mgf1');
  late final _RSA_verify_pss_mgf1 =
      _RSA_verify_pss_mgf1Ptr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<EVP_MD>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int RSA_verify_raw(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Size> out_len,
    ffi.Pointer<ffi.Uint8> out,
    int max_out,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
    int padding,
  ) {
    return _RSA_verify_raw(rsa, out_len, out, max_out, in1, in_len, padding);
  }

  late final _RSA_verify_rawPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Int,
          )
        >
      >('RSA_verify_raw');
  late final _RSA_verify_raw =
      _RSA_verify_rawPtr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
        )
      >();

  int RSA_private_encrypt(
    int flen,
    ffi.Pointer<ffi.Uint8> from,
    ffi.Pointer<ffi.Uint8> to,
    ffi.Pointer<RSA> rsa,
    int padding,
  ) {
    return _RSA_private_encrypt(flen, from, to, rsa, padding);
  }

  late final _RSA_private_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<RSA>,
            ffi.Int,
          )
        >
      >('RSA_private_encrypt');
  late final _RSA_private_encrypt =
      _RSA_private_encryptPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<RSA>,
          int,
        )
      >();

  int RSA_public_decrypt(
    int flen,
    ffi.Pointer<ffi.Uint8> from,
    ffi.Pointer<ffi.Uint8> to,
    ffi.Pointer<RSA> rsa,
    int padding,
  ) {
    return _RSA_public_decrypt(flen, from, to, rsa, padding);
  }

  late final _RSA_public_decryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<RSA>,
            ffi.Int,
          )
        >
      >('RSA_public_decrypt');
  late final _RSA_public_decrypt =
      _RSA_public_decryptPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<RSA>,
          int,
        )
      >();

  int RSA_size(ffi.Pointer<RSA> rsa) {
    return _RSA_size(rsa);
  }

  late final _RSA_sizePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<RSA>)>>(
        'RSA_size',
      );
  late final _RSA_size =
      _RSA_sizePtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  int RSA_is_opaque(ffi.Pointer<RSA> rsa) {
    return _RSA_is_opaque(rsa);
  }

  late final _RSA_is_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
        'RSA_is_opaque',
      );
  late final _RSA_is_opaque =
      _RSA_is_opaquePtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<RSA> RSAPublicKey_dup(ffi.Pointer<RSA> rsa) {
    return _RSAPublicKey_dup(rsa);
  }

  late final _RSAPublicKey_dupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA> Function(ffi.Pointer<RSA>)>>(
        'RSAPublicKey_dup',
      );
  late final _RSAPublicKey_dup =
      _RSAPublicKey_dupPtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<RSA>)
      >();

  ffi.Pointer<RSA> RSAPrivateKey_dup(ffi.Pointer<RSA> rsa) {
    return _RSAPrivateKey_dup(rsa);
  }

  late final _RSAPrivateKey_dupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA> Function(ffi.Pointer<RSA>)>>(
        'RSAPrivateKey_dup',
      );
  late final _RSAPrivateKey_dup =
      _RSAPrivateKey_dupPtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<RSA>)
      >();

  int RSA_check_key(ffi.Pointer<RSA> rsa) {
    return _RSA_check_key(rsa);
  }

  late final _RSA_check_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
        'RSA_check_key',
      );
  late final _RSA_check_key =
      _RSA_check_keyPtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  int RSA_check_fips(ffi.Pointer<RSA> key) {
    return _RSA_check_fips(key);
  }

  late final _RSA_check_fipsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
        'RSA_check_fips',
      );
  late final _RSA_check_fips =
      _RSA_check_fipsPtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  int RSA_verify_PKCS1_PSS_mgf1(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Uint8> mHash,
    ffi.Pointer<EVP_MD> Hash,
    ffi.Pointer<EVP_MD> mgf1Hash,
    ffi.Pointer<ffi.Uint8> EM,
    int sLen,
  ) {
    return _RSA_verify_PKCS1_PSS_mgf1(rsa, mHash, Hash, mgf1Hash, EM, sLen);
  }

  late final _RSA_verify_PKCS1_PSS_mgf1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Int,
          )
        >
      >('RSA_verify_PKCS1_PSS_mgf1');
  late final _RSA_verify_PKCS1_PSS_mgf1 =
      _RSA_verify_PKCS1_PSS_mgf1Ptr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int RSA_padding_add_PKCS1_PSS_mgf1(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Uint8> EM,
    ffi.Pointer<ffi.Uint8> mHash,
    ffi.Pointer<EVP_MD> Hash,
    ffi.Pointer<EVP_MD> mgf1Hash,
    int sLen,
  ) {
    return _RSA_padding_add_PKCS1_PSS_mgf1(
      rsa,
      EM,
      mHash,
      Hash,
      mgf1Hash,
      sLen,
    );
  }

  late final _RSA_padding_add_PKCS1_PSS_mgf1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<EVP_MD>,
            ffi.Int,
          )
        >
      >('RSA_padding_add_PKCS1_PSS_mgf1');
  late final _RSA_padding_add_PKCS1_PSS_mgf1 =
      _RSA_padding_add_PKCS1_PSS_mgf1Ptr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<EVP_MD>,
          int,
        )
      >();

  int RSA_padding_add_PKCS1_OAEP_mgf1(
    ffi.Pointer<ffi.Uint8> to,
    int to_len,
    ffi.Pointer<ffi.Uint8> from,
    int from_len,
    ffi.Pointer<ffi.Uint8> param,
    int param_len,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<EVP_MD> mgf1md,
  ) {
    return _RSA_padding_add_PKCS1_OAEP_mgf1(
      to,
      to_len,
      from,
      from_len,
      param,
      param_len,
      md,
      mgf1md,
    );
  }

  late final _RSA_padding_add_PKCS1_OAEP_mgf1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<EVP_MD>,
          )
        >
      >('RSA_padding_add_PKCS1_OAEP_mgf1');
  late final _RSA_padding_add_PKCS1_OAEP_mgf1 =
      _RSA_padding_add_PKCS1_OAEP_mgf1Ptr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<EVP_MD>,
        )
      >();

  int RSA_add_pkcs1_prefix(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_msg,
    ffi.Pointer<ffi.Size> out_msg_len,
    ffi.Pointer<ffi.Int> is_alloced,
    int hash_nid,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
  ) {
    return _RSA_add_pkcs1_prefix(
      out_msg,
      out_msg_len,
      is_alloced,
      hash_nid,
      digest,
      digest_len,
    );
  }

  late final _RSA_add_pkcs1_prefixPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Int>,
            ffi.Int,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('RSA_add_pkcs1_prefix');
  late final _RSA_add_pkcs1_prefix =
      _RSA_add_pkcs1_prefixPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Int>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  ffi.Pointer<RSA> RSA_parse_public_key(ffi.Pointer<CBS> cbs) {
    return _RSA_parse_public_key(cbs);
  }

  late final _RSA_parse_public_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA> Function(ffi.Pointer<CBS>)>>(
        'RSA_parse_public_key',
      );
  late final _RSA_parse_public_key =
      _RSA_parse_public_keyPtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<CBS>)
      >();

  ffi.Pointer<RSA> RSA_public_key_from_bytes(
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _RSA_public_key_from_bytes(in1, in_len);
  }

  late final _RSA_public_key_from_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(ffi.Pointer<ffi.Uint8>, ffi.Size)
        >
      >('RSA_public_key_from_bytes');
  late final _RSA_public_key_from_bytes =
      _RSA_public_key_from_bytesPtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<ffi.Uint8>, int)
      >();

  int RSA_marshal_public_key(ffi.Pointer<CBB> cbb, ffi.Pointer<RSA> rsa) {
    return _RSA_marshal_public_key(cbb, rsa);
  }

  late final _RSA_marshal_public_keyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<RSA>)>
      >('RSA_marshal_public_key');
  late final _RSA_marshal_public_key =
      _RSA_marshal_public_keyPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<RSA>)
      >();

  int RSA_public_key_to_bytes(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_bytes,
    ffi.Pointer<ffi.Size> out_len,
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_public_key_to_bytes(out_bytes, out_len, rsa);
  }

  late final _RSA_public_key_to_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<RSA>,
          )
        >
      >('RSA_public_key_to_bytes');
  late final _RSA_public_key_to_bytes =
      _RSA_public_key_to_bytesPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<RSA>,
        )
      >();

  ffi.Pointer<RSA> RSA_parse_private_key(ffi.Pointer<CBS> cbs) {
    return _RSA_parse_private_key(cbs);
  }

  late final _RSA_parse_private_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA> Function(ffi.Pointer<CBS>)>>(
        'RSA_parse_private_key',
      );
  late final _RSA_parse_private_key =
      _RSA_parse_private_keyPtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<CBS>)
      >();

  ffi.Pointer<RSA> RSA_private_key_from_bytes(
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _RSA_private_key_from_bytes(in1, in_len);
  }

  late final _RSA_private_key_from_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(ffi.Pointer<ffi.Uint8>, ffi.Size)
        >
      >('RSA_private_key_from_bytes');
  late final _RSA_private_key_from_bytes =
      _RSA_private_key_from_bytesPtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<ffi.Uint8>, int)
      >();

  int RSA_marshal_private_key(ffi.Pointer<CBB> cbb, ffi.Pointer<RSA> rsa) {
    return _RSA_marshal_private_key(cbb, rsa);
  }

  late final _RSA_marshal_private_keyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<RSA>)>
      >('RSA_marshal_private_key');
  late final _RSA_marshal_private_key =
      _RSA_marshal_private_keyPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<RSA>)
      >();

  int RSA_private_key_to_bytes(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_bytes,
    ffi.Pointer<ffi.Size> out_len,
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_private_key_to_bytes(out_bytes, out_len, rsa);
  }

  late final _RSA_private_key_to_bytesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<RSA>,
          )
        >
      >('RSA_private_key_to_bytes');
  late final _RSA_private_key_to_bytes =
      _RSA_private_key_to_bytesPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<RSA>,
        )
      >();

  ffi.Pointer<RSA> RSA_new_private_key_no_crt(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BIGNUM> d,
  ) {
    return _RSA_new_private_key_no_crt(n, e, d);
  }

  late final _RSA_new_private_key_no_crtPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('RSA_new_private_key_no_crt');
  late final _RSA_new_private_key_no_crt =
      _RSA_new_private_key_no_crtPtr.asFunction<
        ffi.Pointer<RSA> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  ffi.Pointer<RSA> RSA_new_private_key_no_e(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> d,
  ) {
    return _RSA_new_private_key_no_e(n, d);
  }

  late final _RSA_new_private_key_no_ePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('RSA_new_private_key_no_e');
  late final _RSA_new_private_key_no_e =
      _RSA_new_private_key_no_ePtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<RSA> RSA_new_public_key_large_e(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> e,
  ) {
    return _RSA_new_public_key_large_e(n, e);
  }

  late final _RSA_new_public_key_large_ePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
        >
      >('RSA_new_public_key_large_e');
  late final _RSA_new_public_key_large_e =
      _RSA_new_public_key_large_ePtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)
      >();

  ffi.Pointer<RSA> RSA_new_private_key_large_e(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BIGNUM> d,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> q,
    ffi.Pointer<BIGNUM> dmp1,
    ffi.Pointer<BIGNUM> dmq1,
    ffi.Pointer<BIGNUM> iqmp,
  ) {
    return _RSA_new_private_key_large_e(n, e, d, p, q, dmp1, dmq1, iqmp);
  }

  late final _RSA_new_private_key_large_ePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
            ffi.Pointer<BIGNUM>,
          )
        >
      >('RSA_new_private_key_large_e');
  late final _RSA_new_private_key_large_e =
      _RSA_new_private_key_large_ePtr.asFunction<
        ffi.Pointer<RSA> Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
        )
      >();

  int RSA_get_ex_new_index(
    int argl,
    ffi.Pointer<ffi.Void> argp,
    ffi.Pointer<CRYPTO_EX_unused> unused,
    ffi.Pointer<CRYPTO_EX_dup> dup_unused,
    ffi.Pointer<CRYPTO_EX_free> free_func,
  ) {
    return _RSA_get_ex_new_index(argl, argp, unused, dup_unused, free_func);
  }

  late final _RSA_get_ex_new_indexPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Long,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<CRYPTO_EX_unused>,
            ffi.Pointer<CRYPTO_EX_dup>,
            ffi.Pointer<CRYPTO_EX_free>,
          )
        >
      >('RSA_get_ex_new_index');
  late final _RSA_get_ex_new_index =
      _RSA_get_ex_new_indexPtr.asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<CRYPTO_EX_unused>,
          ffi.Pointer<CRYPTO_EX_dup>,
          ffi.Pointer<CRYPTO_EX_free>,
        )
      >();

  int RSA_set_ex_data(
    ffi.Pointer<RSA> rsa,
    int idx,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _RSA_set_ex_data(rsa, idx, arg);
  }

  late final _RSA_set_ex_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA>, ffi.Int, ffi.Pointer<ffi.Void>)
        >
      >('RSA_set_ex_data');
  late final _RSA_set_ex_data =
      _RSA_set_ex_dataPtr.asFunction<
        int Function(ffi.Pointer<RSA>, int, ffi.Pointer<ffi.Void>)
      >();

  ffi.Pointer<ffi.Void> RSA_get_ex_data(ffi.Pointer<RSA> rsa, int idx) {
    return _RSA_get_ex_data(rsa, idx);
  }

  late final _RSA_get_ex_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<RSA>, ffi.Int)
        >
      >('RSA_get_ex_data');
  late final _RSA_get_ex_data =
      _RSA_get_ex_dataPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<RSA>, int)
      >();

  int RSA_flags(ffi.Pointer<RSA> rsa) {
    return _RSA_flags(rsa);
  }

  late final _RSA_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
        'RSA_flags',
      );
  late final _RSA_flags =
      _RSA_flagsPtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  int RSA_test_flags(ffi.Pointer<RSA> rsa, int flags) {
    return _RSA_test_flags(rsa, flags);
  }

  late final _RSA_test_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>, ffi.Int)>>(
        'RSA_test_flags',
      );
  late final _RSA_test_flags =
      _RSA_test_flagsPtr.asFunction<int Function(ffi.Pointer<RSA>, int)>();

  int RSA_blinding_on(ffi.Pointer<RSA> rsa, ffi.Pointer<BN_CTX> ctx) {
    return _RSA_blinding_on(rsa, ctx);
  }

  late final _RSA_blinding_onPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA>, ffi.Pointer<BN_CTX>)
        >
      >('RSA_blinding_on');
  late final _RSA_blinding_on =
      _RSA_blinding_onPtr.asFunction<
        int Function(ffi.Pointer<RSA>, ffi.Pointer<BN_CTX>)
      >();

  void RSA_blinding_off(ffi.Pointer<RSA> rsa) {
    return _RSA_blinding_off(rsa);
  }

  late final _RSA_blinding_offPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RSA>)>>(
        'RSA_blinding_off',
      );
  late final _RSA_blinding_off =
      _RSA_blinding_offPtr.asFunction<void Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<RSA> RSA_generate_key(
    int bits,
    int e,
    ffi.Pointer<ffi.Void> callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _RSA_generate_key(bits, e, callback, cb_arg);
  }

  late final _RSA_generate_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
            ffi.Int,
            ffi.Uint64,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('RSA_generate_key');
  late final _RSA_generate_key =
      _RSA_generate_keyPtr.asFunction<
        ffi.Pointer<RSA> Function(
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
        )
      >();

  ffi.Pointer<RSA> d2i_RSAPublicKey(
    ffi.Pointer<ffi.Pointer<RSA>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_RSAPublicKey(out, inp, len);
  }

  late final _d2i_RSAPublicKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
            ffi.Pointer<ffi.Pointer<RSA>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_RSAPublicKey');
  late final _d2i_RSAPublicKey = _d2i_RSAPublicKeyPtr
      .asFunction<
        ffi.Pointer<RSA> Function(
          ffi.Pointer<ffi.Pointer<RSA>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  int i2d_RSAPublicKey(
    ffi.Pointer<RSA> in1,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_RSAPublicKey(in1, outp);
  }

  late final _i2d_RSAPublicKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_RSAPublicKey');
  late final _i2d_RSAPublicKey = _i2d_RSAPublicKeyPtr
      .asFunction<
        int Function(ffi.Pointer<RSA>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  ffi.Pointer<RSA> d2i_RSAPrivateKey(
    ffi.Pointer<ffi.Pointer<RSA>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_RSAPrivateKey(out, inp, len);
  }

  late final _d2i_RSAPrivateKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
            ffi.Pointer<ffi.Pointer<RSA>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_RSAPrivateKey');
  late final _d2i_RSAPrivateKey = _d2i_RSAPrivateKeyPtr
      .asFunction<
        ffi.Pointer<RSA> Function(
          ffi.Pointer<ffi.Pointer<RSA>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  int i2d_RSAPrivateKey(
    ffi.Pointer<RSA> in1,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_RSAPrivateKey(in1, outp);
  }

  late final _i2d_RSAPrivateKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_RSAPrivateKey');
  late final _i2d_RSAPrivateKey = _i2d_RSAPrivateKeyPtr
      .asFunction<
        int Function(ffi.Pointer<RSA>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  int RSA_padding_add_PKCS1_PSS(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Uint8> EM,
    ffi.Pointer<ffi.Uint8> mHash,
    ffi.Pointer<EVP_MD> Hash,
    int sLen,
  ) {
    return _RSA_padding_add_PKCS1_PSS(rsa, EM, mHash, Hash, sLen);
  }

  late final _RSA_padding_add_PKCS1_PSSPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<EVP_MD>,
            ffi.Int,
          )
        >
      >('RSA_padding_add_PKCS1_PSS');
  late final _RSA_padding_add_PKCS1_PSS =
      _RSA_padding_add_PKCS1_PSSPtr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<EVP_MD>,
          int,
        )
      >();

  int RSA_verify_PKCS1_PSS(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Uint8> mHash,
    ffi.Pointer<EVP_MD> Hash,
    ffi.Pointer<ffi.Uint8> EM,
    int sLen,
  ) {
    return _RSA_verify_PKCS1_PSS(rsa, mHash, Hash, EM, sLen);
  }

  late final _RSA_verify_PKCS1_PSSPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Int,
          )
        >
      >('RSA_verify_PKCS1_PSS');
  late final _RSA_verify_PKCS1_PSS =
      _RSA_verify_PKCS1_PSSPtr.asFunction<
        int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int RSA_padding_add_PKCS1_OAEP(
    ffi.Pointer<ffi.Uint8> to,
    int to_len,
    ffi.Pointer<ffi.Uint8> from,
    int from_len,
    ffi.Pointer<ffi.Uint8> param,
    int param_len,
  ) {
    return _RSA_padding_add_PKCS1_OAEP(
      to,
      to_len,
      from,
      from_len,
      param,
      param_len,
    );
  }

  late final _RSA_padding_add_PKCS1_OAEPPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('RSA_padding_add_PKCS1_OAEP');
  late final _RSA_padding_add_PKCS1_OAEP =
      _RSA_padding_add_PKCS1_OAEPPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int RSA_print(ffi.Pointer<BIO> bio, ffi.Pointer<RSA> rsa, int indent) {
    return _RSA_print(bio, rsa, indent);
  }

  late final _RSA_printPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<RSA>, ffi.Int)
        >
      >('RSA_print');
  late final _RSA_print =
      _RSA_printPtr.asFunction<
        int Function(ffi.Pointer<BIO>, ffi.Pointer<RSA>, int)
      >();

  ffi.Pointer<RSA_PSS_PARAMS> RSA_get0_pss_params(ffi.Pointer<RSA> rsa) {
    return _RSA_get0_pss_params(rsa);
  }

  late final _RSA_get0_pss_paramsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA_PSS_PARAMS> Function(ffi.Pointer<RSA>)
        >
      >('RSA_get0_pss_params');
  late final _RSA_get0_pss_params =
      _RSA_get0_pss_paramsPtr.asFunction<
        ffi.Pointer<RSA_PSS_PARAMS> Function(ffi.Pointer<RSA>)
      >();

  ffi.Pointer<RSA> RSA_new_method_no_e(
    ffi.Pointer<ENGINE> engine,
    ffi.Pointer<BIGNUM> n,
  ) {
    return _RSA_new_method_no_e(engine, n);
  }

  late final _RSA_new_method_no_ePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(ffi.Pointer<ENGINE>, ffi.Pointer<BIGNUM>)
        >
      >('RSA_new_method_no_e');
  late final _RSA_new_method_no_e =
      _RSA_new_method_no_ePtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<ENGINE>, ffi.Pointer<BIGNUM>)
      >();

  int SHA1_Init(ffi.Pointer<SHA_CTX> sha) {
    return _SHA1_Init(sha);
  }

  late final _SHA1_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SHA_CTX>)>>(
        'SHA1_Init',
      );
  late final _SHA1_Init =
      _SHA1_InitPtr.asFunction<int Function(ffi.Pointer<SHA_CTX>)>();

  int SHA1_Update(
    ffi.Pointer<SHA_CTX> sha,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _SHA1_Update(sha, data, len);
  }

  late final _SHA1_UpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<SHA_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('SHA1_Update');
  late final _SHA1_Update =
      _SHA1_UpdatePtr.asFunction<
        int Function(ffi.Pointer<SHA_CTX>, ffi.Pointer<ffi.Void>, int)
      >();

  int SHA1_Final(ffi.Pointer<ffi.Uint8> out, ffi.Pointer<SHA_CTX> sha) {
    return _SHA1_Final(out, sha);
  }

  late final _SHA1_FinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<SHA_CTX>)
        >
      >('SHA1_Final');
  late final _SHA1_Final =
      _SHA1_FinalPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<SHA_CTX>)
      >();

  ffi.Pointer<ffi.Uint8> SHA1(
    ffi.Pointer<ffi.Uint8> data,
    int len,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _SHA1(data, len, out);
  }

  late final _SHA1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('SHA1');
  late final _SHA1 =
      _SHA1Ptr.asFunction<
        ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  void SHA1_Transform(ffi.Pointer<SHA_CTX> sha, ffi.Pointer<ffi.Uint8> block) {
    return _SHA1_Transform(sha, block);
  }

  late final _SHA1_TransformPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<SHA_CTX>, ffi.Pointer<ffi.Uint8>)
        >
      >('SHA1_Transform');
  late final _SHA1_Transform =
      _SHA1_TransformPtr.asFunction<
        void Function(ffi.Pointer<SHA_CTX>, ffi.Pointer<ffi.Uint8>)
      >();

  void CRYPTO_fips_186_2_prf(
    ffi.Pointer<ffi.Uint8> out,
    int out_len,
    ffi.Pointer<ffi.Uint8> xkey,
  ) {
    return _CRYPTO_fips_186_2_prf(out, out_len, xkey);
  }

  late final _CRYPTO_fips_186_2_prfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('CRYPTO_fips_186_2_prf');
  late final _CRYPTO_fips_186_2_prf =
      _CRYPTO_fips_186_2_prfPtr.asFunction<
        void Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)
      >();

  int SHA224_Init(ffi.Pointer<SHA256_CTX> sha) {
    return _SHA224_Init(sha);
  }

  late final _SHA224_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SHA256_CTX>)>>(
        'SHA224_Init',
      );
  late final _SHA224_Init =
      _SHA224_InitPtr.asFunction<int Function(ffi.Pointer<SHA256_CTX>)>();

  int SHA224_Update(
    ffi.Pointer<SHA256_CTX> sha,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _SHA224_Update(sha, data, len);
  }

  late final _SHA224_UpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<SHA256_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('SHA224_Update');
  late final _SHA224_Update =
      _SHA224_UpdatePtr.asFunction<
        int Function(ffi.Pointer<SHA256_CTX>, ffi.Pointer<ffi.Void>, int)
      >();

  int SHA224_Final(ffi.Pointer<ffi.Uint8> out, ffi.Pointer<SHA256_CTX> sha) {
    return _SHA224_Final(out, sha);
  }

  late final _SHA224_FinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<SHA256_CTX>)
        >
      >('SHA224_Final');
  late final _SHA224_Final =
      _SHA224_FinalPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<SHA256_CTX>)
      >();

  ffi.Pointer<ffi.Uint8> SHA224(
    ffi.Pointer<ffi.Uint8> data,
    int len,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _SHA224(data, len, out);
  }

  late final _SHA224Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('SHA224');
  late final _SHA224 =
      _SHA224Ptr.asFunction<
        ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int SHA256_Init(ffi.Pointer<SHA256_CTX> sha) {
    return _SHA256_Init(sha);
  }

  late final _SHA256_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SHA256_CTX>)>>(
        'SHA256_Init',
      );
  late final _SHA256_Init =
      _SHA256_InitPtr.asFunction<int Function(ffi.Pointer<SHA256_CTX>)>();

  int SHA256_Update(
    ffi.Pointer<SHA256_CTX> sha,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _SHA256_Update(sha, data, len);
  }

  late final _SHA256_UpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<SHA256_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('SHA256_Update');
  late final _SHA256_Update =
      _SHA256_UpdatePtr.asFunction<
        int Function(ffi.Pointer<SHA256_CTX>, ffi.Pointer<ffi.Void>, int)
      >();

  int SHA256_Final(ffi.Pointer<ffi.Uint8> out, ffi.Pointer<SHA256_CTX> sha) {
    return _SHA256_Final(out, sha);
  }

  late final _SHA256_FinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<SHA256_CTX>)
        >
      >('SHA256_Final');
  late final _SHA256_Final =
      _SHA256_FinalPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<SHA256_CTX>)
      >();

  ffi.Pointer<ffi.Uint8> SHA256(
    ffi.Pointer<ffi.Uint8> data,
    int len,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _SHA256(data, len, out);
  }

  late final _SHA256Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('SHA256');
  late final _SHA256 =
      _SHA256Ptr.asFunction<
        ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  void SHA256_Transform(
    ffi.Pointer<SHA256_CTX> sha,
    ffi.Pointer<ffi.Uint8> block,
  ) {
    return _SHA256_Transform(sha, block);
  }

  late final _SHA256_TransformPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<SHA256_CTX>, ffi.Pointer<ffi.Uint8>)
        >
      >('SHA256_Transform');
  late final _SHA256_Transform =
      _SHA256_TransformPtr.asFunction<
        void Function(ffi.Pointer<SHA256_CTX>, ffi.Pointer<ffi.Uint8>)
      >();

  void SHA256_TransformBlocks(
    ffi.Pointer<ffi.Uint32> state,
    ffi.Pointer<ffi.Uint8> data,
    int num_blocks,
  ) {
    return _SHA256_TransformBlocks(state, data, num_blocks);
  }

  late final _SHA256_TransformBlocksPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Uint32>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('SHA256_TransformBlocks');
  late final _SHA256_TransformBlocks =
      _SHA256_TransformBlocksPtr.asFunction<
        void Function(ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int SHA384_Init(ffi.Pointer<SHA512_CTX> sha) {
    return _SHA384_Init(sha);
  }

  late final _SHA384_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SHA512_CTX>)>>(
        'SHA384_Init',
      );
  late final _SHA384_Init =
      _SHA384_InitPtr.asFunction<int Function(ffi.Pointer<SHA512_CTX>)>();

  int SHA384_Update(
    ffi.Pointer<SHA512_CTX> sha,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _SHA384_Update(sha, data, len);
  }

  late final _SHA384_UpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<SHA512_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('SHA384_Update');
  late final _SHA384_Update =
      _SHA384_UpdatePtr.asFunction<
        int Function(ffi.Pointer<SHA512_CTX>, ffi.Pointer<ffi.Void>, int)
      >();

  int SHA384_Final(ffi.Pointer<ffi.Uint8> out, ffi.Pointer<SHA512_CTX> sha) {
    return _SHA384_Final(out, sha);
  }

  late final _SHA384_FinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<SHA512_CTX>)
        >
      >('SHA384_Final');
  late final _SHA384_Final =
      _SHA384_FinalPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<SHA512_CTX>)
      >();

  ffi.Pointer<ffi.Uint8> SHA384(
    ffi.Pointer<ffi.Uint8> data,
    int len,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _SHA384(data, len, out);
  }

  late final _SHA384Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('SHA384');
  late final _SHA384 =
      _SHA384Ptr.asFunction<
        ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int SHA512_Init(ffi.Pointer<SHA512_CTX> sha) {
    return _SHA512_Init(sha);
  }

  late final _SHA512_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SHA512_CTX>)>>(
        'SHA512_Init',
      );
  late final _SHA512_Init =
      _SHA512_InitPtr.asFunction<int Function(ffi.Pointer<SHA512_CTX>)>();

  int SHA512_Update(
    ffi.Pointer<SHA512_CTX> sha,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _SHA512_Update(sha, data, len);
  }

  late final _SHA512_UpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<SHA512_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('SHA512_Update');
  late final _SHA512_Update =
      _SHA512_UpdatePtr.asFunction<
        int Function(ffi.Pointer<SHA512_CTX>, ffi.Pointer<ffi.Void>, int)
      >();

  int SHA512_Final(ffi.Pointer<ffi.Uint8> out, ffi.Pointer<SHA512_CTX> sha) {
    return _SHA512_Final(out, sha);
  }

  late final _SHA512_FinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<SHA512_CTX>)
        >
      >('SHA512_Final');
  late final _SHA512_Final =
      _SHA512_FinalPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<SHA512_CTX>)
      >();

  ffi.Pointer<ffi.Uint8> SHA512(
    ffi.Pointer<ffi.Uint8> data,
    int len,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _SHA512(data, len, out);
  }

  late final _SHA512Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('SHA512');
  late final _SHA512 =
      _SHA512Ptr.asFunction<
        ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  void SHA512_Transform(
    ffi.Pointer<SHA512_CTX> sha,
    ffi.Pointer<ffi.Uint8> block,
  ) {
    return _SHA512_Transform(sha, block);
  }

  late final _SHA512_TransformPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<SHA512_CTX>, ffi.Pointer<ffi.Uint8>)
        >
      >('SHA512_Transform');
  late final _SHA512_Transform =
      _SHA512_TransformPtr.asFunction<
        void Function(ffi.Pointer<SHA512_CTX>, ffi.Pointer<ffi.Uint8>)
      >();

  int SHA512_256_Init(ffi.Pointer<SHA512_CTX> sha) {
    return _SHA512_256_Init(sha);
  }

  late final _SHA512_256_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SHA512_CTX>)>>(
        'SHA512_256_Init',
      );
  late final _SHA512_256_Init =
      _SHA512_256_InitPtr.asFunction<int Function(ffi.Pointer<SHA512_CTX>)>();

  int SHA512_256_Update(
    ffi.Pointer<SHA512_CTX> sha,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _SHA512_256_Update(sha, data, len);
  }

  late final _SHA512_256_UpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<SHA512_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('SHA512_256_Update');
  late final _SHA512_256_Update =
      _SHA512_256_UpdatePtr.asFunction<
        int Function(ffi.Pointer<SHA512_CTX>, ffi.Pointer<ffi.Void>, int)
      >();

  int SHA512_256_Final(
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<SHA512_CTX> sha,
  ) {
    return _SHA512_256_Final(out, sha);
  }

  late final _SHA512_256_FinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<SHA512_CTX>)
        >
      >('SHA512_256_Final');
  late final _SHA512_256_Final =
      _SHA512_256_FinalPtr.asFunction<
        int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<SHA512_CTX>)
      >();

  ffi.Pointer<ffi.Uint8> SHA512_256(
    ffi.Pointer<ffi.Uint8> data,
    int len,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _SHA512_256(data, len, out);
  }

  late final _SHA512_256Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('SHA512_256');
  late final _SHA512_256 =
      _SHA512_256Ptr.asFunction<
        ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int SIPHASH_24(
    ffi.Pointer<ffi.Uint64> key,
    ffi.Pointer<ffi.Uint8> input,
    int input_len,
  ) {
    return _SIPHASH_24(key, input, input_len);
  }

  late final _SIPHASH_24Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Uint64 Function(
            ffi.Pointer<ffi.Uint64>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('SIPHASH_24');
  late final _SIPHASH_24 =
      _SIPHASH_24Ptr.asFunction<
        int Function(ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Uint8>, int)
      >();

  ffi.Pointer<EVP_MD> EVP_md4() {
    return _EVP_md4();
  }

  late final _EVP_md4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_md4');
  late final _EVP_md4 =
      _EVP_md4Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_md5() {
    return _EVP_md5();
  }

  late final _EVP_md5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_md5');
  late final _EVP_md5 =
      _EVP_md5Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha1() {
    return _EVP_sha1();
  }

  late final _EVP_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha1');
  late final _EVP_sha1 =
      _EVP_sha1Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha224() {
    return _EVP_sha224();
  }

  late final _EVP_sha224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha224');
  late final _EVP_sha224 =
      _EVP_sha224Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha256() {
    return _EVP_sha256();
  }

  late final _EVP_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha256');
  late final _EVP_sha256 =
      _EVP_sha256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha384() {
    return _EVP_sha384();
  }

  late final _EVP_sha384Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha384');
  late final _EVP_sha384 =
      _EVP_sha384Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha512() {
    return _EVP_sha512();
  }

  late final _EVP_sha512Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha512');
  late final _EVP_sha512 =
      _EVP_sha512Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha512_256() {
    return _EVP_sha512_256();
  }

  late final _EVP_sha512_256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
        'EVP_sha512_256',
      );
  late final _EVP_sha512_256 =
      _EVP_sha512_256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_blake2b256() {
    return _EVP_blake2b256();
  }

  late final _EVP_blake2b256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
        'EVP_blake2b256',
      );
  late final _EVP_blake2b256 =
      _EVP_blake2b256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_md5_sha1() {
    return _EVP_md5_sha1();
  }

  late final _EVP_md5_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
        'EVP_md5_sha1',
      );
  late final _EVP_md5_sha1 =
      _EVP_md5_sha1Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_get_digestbynid(int nid) {
    return _EVP_get_digestbynid(nid);
  }

  late final _EVP_get_digestbynidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function(ffi.Int)>>(
        'EVP_get_digestbynid',
      );
  late final _EVP_get_digestbynid =
      _EVP_get_digestbynidPtr.asFunction<ffi.Pointer<EVP_MD> Function(int)>();

  ffi.Pointer<EVP_MD> EVP_get_digestbyobj(ffi.Pointer<ASN1_OBJECT> obj) {
    return _EVP_get_digestbyobj(obj);
  }

  late final _EVP_get_digestbyobjPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(ffi.Pointer<ASN1_OBJECT>)
        >
      >('EVP_get_digestbyobj');
  late final _EVP_get_digestbyobj =
      _EVP_get_digestbyobjPtr.asFunction<
        ffi.Pointer<EVP_MD> Function(ffi.Pointer<ASN1_OBJECT>)
      >();

  void EVP_MD_CTX_init(ffi.Pointer<EVP_MD_CTX> ctx) {
    return _EVP_MD_CTX_init(ctx);
  }

  late final _EVP_MD_CTX_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD_CTX>)>>(
        'EVP_MD_CTX_init',
      );
  late final _EVP_MD_CTX_init =
      _EVP_MD_CTX_initPtr.asFunction<void Function(ffi.Pointer<EVP_MD_CTX>)>();

  ffi.Pointer<EVP_MD_CTX> EVP_MD_CTX_new() {
    return _EVP_MD_CTX_new();
  }

  late final _EVP_MD_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD_CTX> Function()>>(
        'EVP_MD_CTX_new',
      );
  late final _EVP_MD_CTX_new =
      _EVP_MD_CTX_newPtr.asFunction<ffi.Pointer<EVP_MD_CTX> Function()>();

  int EVP_MD_CTX_cleanup(ffi.Pointer<EVP_MD_CTX> ctx) {
    return _EVP_MD_CTX_cleanup(ctx);
  }

  late final _EVP_MD_CTX_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>(
        'EVP_MD_CTX_cleanup',
      );
  late final _EVP_MD_CTX_cleanup =
      _EVP_MD_CTX_cleanupPtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>)
      >();

  void EVP_MD_CTX_cleanse(ffi.Pointer<EVP_MD_CTX> ctx) {
    return _EVP_MD_CTX_cleanse(ctx);
  }

  late final _EVP_MD_CTX_cleansePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD_CTX>)>>(
        'EVP_MD_CTX_cleanse',
      );
  late final _EVP_MD_CTX_cleanse =
      _EVP_MD_CTX_cleansePtr.asFunction<
        void Function(ffi.Pointer<EVP_MD_CTX>)
      >();

  void EVP_MD_CTX_free(ffi.Pointer<EVP_MD_CTX> ctx) {
    return _EVP_MD_CTX_free(ctx);
  }

  late final _EVP_MD_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD_CTX>)>>(
        'EVP_MD_CTX_free',
      );
  late final _EVP_MD_CTX_free =
      _EVP_MD_CTX_freePtr.asFunction<void Function(ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_MD_CTX_copy_ex(
    ffi.Pointer<EVP_MD_CTX> out,
    ffi.Pointer<EVP_MD_CTX> in1,
  ) {
    return _EVP_MD_CTX_copy_ex(out, in1);
  }

  late final _EVP_MD_CTX_copy_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)
        >
      >('EVP_MD_CTX_copy_ex');
  late final _EVP_MD_CTX_copy_ex =
      _EVP_MD_CTX_copy_exPtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)
      >();

  void EVP_MD_CTX_move(
    ffi.Pointer<EVP_MD_CTX> out,
    ffi.Pointer<EVP_MD_CTX> in1,
  ) {
    return _EVP_MD_CTX_move(out, in1);
  }

  late final _EVP_MD_CTX_movePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)
        >
      >('EVP_MD_CTX_move');
  late final _EVP_MD_CTX_move =
      _EVP_MD_CTX_movePtr.asFunction<
        void Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)
      >();

  int EVP_MD_CTX_reset(ffi.Pointer<EVP_MD_CTX> ctx) {
    return _EVP_MD_CTX_reset(ctx);
  }

  late final _EVP_MD_CTX_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>(
        'EVP_MD_CTX_reset',
      );
  late final _EVP_MD_CTX_reset =
      _EVP_MD_CTX_resetPtr.asFunction<int Function(ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_DigestInit_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> engine,
  ) {
    return _EVP_DigestInit_ex(ctx, type, engine);
  }

  late final _EVP_DigestInit_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ENGINE>,
          )
        >
      >('EVP_DigestInit_ex');
  late final _EVP_DigestInit_ex =
      _EVP_DigestInit_exPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
        )
      >();

  int EVP_DigestInit(ffi.Pointer<EVP_MD_CTX> ctx, ffi.Pointer<EVP_MD> type) {
    return _EVP_DigestInit(ctx, type);
  }

  late final _EVP_DigestInitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)
        >
      >('EVP_DigestInit');
  late final _EVP_DigestInit =
      _EVP_DigestInitPtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)
      >();

  int EVP_DigestUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _EVP_DigestUpdate(ctx, data, len);
  }

  late final _EVP_DigestUpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('EVP_DigestUpdate');
  late final _EVP_DigestUpdate =
      _EVP_DigestUpdatePtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, int)
      >();

  int EVP_DigestFinal_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> md_out,
    ffi.Pointer<ffi.UnsignedInt> out_size,
  ) {
    return _EVP_DigestFinal_ex(ctx, md_out, out_size);
  }

  late final _EVP_DigestFinal_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.UnsignedInt>,
          )
        >
      >('EVP_DigestFinal_ex');
  late final _EVP_DigestFinal_ex =
      _EVP_DigestFinal_exPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedInt>,
        )
      >();

  int EVP_DigestFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> md_out,
    ffi.Pointer<ffi.UnsignedInt> out_size,
  ) {
    return _EVP_DigestFinal(ctx, md_out, out_size);
  }

  late final _EVP_DigestFinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.UnsignedInt>,
          )
        >
      >('EVP_DigestFinal');
  late final _EVP_DigestFinal =
      _EVP_DigestFinalPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedInt>,
        )
      >();

  int EVP_Digest(
    ffi.Pointer<ffi.Void> data,
    int len,
    ffi.Pointer<ffi.Uint8> md_out,
    ffi.Pointer<ffi.UnsignedInt> md_out_size,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> impl,
  ) {
    return _EVP_Digest(data, len, md_out, md_out_size, type, impl);
  }

  late final _EVP_DigestPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Void>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ENGINE>,
          )
        >
      >('EVP_Digest');
  late final _EVP_Digest =
      _EVP_DigestPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
        )
      >();

  int EVP_MD_type(ffi.Pointer<EVP_MD> md) {
    return _EVP_MD_type(md);
  }

  late final _EVP_MD_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
        'EVP_MD_type',
      );
  late final _EVP_MD_type =
      _EVP_MD_typePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_flags(ffi.Pointer<EVP_MD> md) {
    return _EVP_MD_flags(md);
  }

  late final _EVP_MD_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<EVP_MD>)>>(
        'EVP_MD_flags',
      );
  late final _EVP_MD_flags =
      _EVP_MD_flagsPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_size(ffi.Pointer<EVP_MD> md) {
    return _EVP_MD_size(md);
  }

  late final _EVP_MD_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_MD>)>>(
        'EVP_MD_size',
      );
  late final _EVP_MD_size =
      _EVP_MD_sizePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_block_size(ffi.Pointer<EVP_MD> md) {
    return _EVP_MD_block_size(md);
  }

  late final _EVP_MD_block_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_MD>)>>(
        'EVP_MD_block_size',
      );
  late final _EVP_MD_block_size =
      _EVP_MD_block_sizePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<EVP_MD> EVP_MD_CTX_get0_md(ffi.Pointer<EVP_MD_CTX> ctx) {
    return _EVP_MD_CTX_get0_md(ctx);
  }

  late final _EVP_MD_CTX_get0_mdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD_CTX>)
        >
      >('EVP_MD_CTX_get0_md');
  late final _EVP_MD_CTX_get0_md =
      _EVP_MD_CTX_get0_mdPtr.asFunction<
        ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD_CTX>)
      >();

  ffi.Pointer<EVP_MD> EVP_MD_CTX_md(ffi.Pointer<EVP_MD_CTX> ctx) {
    return _EVP_MD_CTX_md(ctx);
  }

  late final _EVP_MD_CTX_mdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD_CTX>)
        >
      >('EVP_MD_CTX_md');
  late final _EVP_MD_CTX_md =
      _EVP_MD_CTX_mdPtr.asFunction<
        ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD_CTX>)
      >();

  int EVP_MD_CTX_size(ffi.Pointer<EVP_MD_CTX> ctx) {
    return _EVP_MD_CTX_size(ctx);
  }

  late final _EVP_MD_CTX_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_MD_CTX>)>>(
        'EVP_MD_CTX_size',
      );
  late final _EVP_MD_CTX_size =
      _EVP_MD_CTX_sizePtr.asFunction<int Function(ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_MD_CTX_block_size(ffi.Pointer<EVP_MD_CTX> ctx) {
    return _EVP_MD_CTX_block_size(ctx);
  }

  late final _EVP_MD_CTX_block_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_MD_CTX>)>>(
        'EVP_MD_CTX_block_size',
      );
  late final _EVP_MD_CTX_block_size =
      _EVP_MD_CTX_block_sizePtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>)
      >();

  int EVP_MD_CTX_type(ffi.Pointer<EVP_MD_CTX> ctx) {
    return _EVP_MD_CTX_type(ctx);
  }

  late final _EVP_MD_CTX_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>(
        'EVP_MD_CTX_type',
      );
  late final _EVP_MD_CTX_type =
      _EVP_MD_CTX_typePtr.asFunction<int Function(ffi.Pointer<EVP_MD_CTX>)>();

  ffi.Pointer<EVP_MD> EVP_parse_digest_algorithm(ffi.Pointer<CBS> cbs) {
    return _EVP_parse_digest_algorithm(cbs);
  }

  late final _EVP_parse_digest_algorithmPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<EVP_MD> Function(ffi.Pointer<CBS>)>
      >('EVP_parse_digest_algorithm');
  late final _EVP_parse_digest_algorithm =
      _EVP_parse_digest_algorithmPtr.asFunction<
        ffi.Pointer<EVP_MD> Function(ffi.Pointer<CBS>)
      >();

  int EVP_marshal_digest_algorithm(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_marshal_digest_algorithm(cbb, md);
  }

  late final _EVP_marshal_digest_algorithmPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<EVP_MD>)
        >
      >('EVP_marshal_digest_algorithm');
  late final _EVP_marshal_digest_algorithm =
      _EVP_marshal_digest_algorithmPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<EVP_MD>)
      >();

  int EVP_marshal_digest_algorithm_no_params(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_marshal_digest_algorithm_no_params(cbb, md);
  }

  late final _EVP_marshal_digest_algorithm_no_paramsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<EVP_MD>)
        >
      >('EVP_marshal_digest_algorithm_no_params');
  late final _EVP_marshal_digest_algorithm_no_params =
      _EVP_marshal_digest_algorithm_no_paramsPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<EVP_MD>)
      >();

  int EVP_MD_CTX_copy(
    ffi.Pointer<EVP_MD_CTX> out,
    ffi.Pointer<EVP_MD_CTX> in1,
  ) {
    return _EVP_MD_CTX_copy(out, in1);
  }

  late final _EVP_MD_CTX_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)
        >
      >('EVP_MD_CTX_copy');
  late final _EVP_MD_CTX_copy =
      _EVP_MD_CTX_copyPtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)
      >();

  int EVP_add_digest(ffi.Pointer<EVP_MD> digest) {
    return _EVP_add_digest(digest);
  }

  late final _EVP_add_digestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
        'EVP_add_digest',
      );
  late final _EVP_add_digest =
      _EVP_add_digestPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<EVP_MD> EVP_get_digestbyname(ffi.Pointer<ffi.Char> arg0) {
    return _EVP_get_digestbyname(arg0);
  }

  late final _EVP_get_digestbynamePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<EVP_MD> Function(ffi.Pointer<ffi.Char>)>
      >('EVP_get_digestbyname');
  late final _EVP_get_digestbyname =
      _EVP_get_digestbynamePtr.asFunction<
        ffi.Pointer<EVP_MD> Function(ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<EVP_MD> EVP_dss1() {
    return _EVP_dss1();
  }

  late final _EVP_dss1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_dss1');
  late final _EVP_dss1 =
      _EVP_dss1Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD_CTX> EVP_MD_CTX_create() {
    return _EVP_MD_CTX_create();
  }

  late final _EVP_MD_CTX_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD_CTX> Function()>>(
        'EVP_MD_CTX_create',
      );
  late final _EVP_MD_CTX_create =
      _EVP_MD_CTX_createPtr.asFunction<ffi.Pointer<EVP_MD_CTX> Function()>();

  void EVP_MD_CTX_destroy(ffi.Pointer<EVP_MD_CTX> ctx) {
    return _EVP_MD_CTX_destroy(ctx);
  }

  late final _EVP_MD_CTX_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD_CTX>)>>(
        'EVP_MD_CTX_destroy',
      );
  late final _EVP_MD_CTX_destroy =
      _EVP_MD_CTX_destroyPtr.asFunction<
        void Function(ffi.Pointer<EVP_MD_CTX>)
      >();

  int EVP_DigestFinalXOF(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    int len,
  ) {
    return _EVP_DigestFinalXOF(ctx, out, len);
  }

  late final _EVP_DigestFinalXOFPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_DigestFinalXOF');
  late final _EVP_DigestFinalXOF =
      _EVP_DigestFinalXOFPtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int EVP_MD_meth_get_flags(ffi.Pointer<EVP_MD> md) {
    return _EVP_MD_meth_get_flags(md);
  }

  late final _EVP_MD_meth_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<EVP_MD>)>>(
        'EVP_MD_meth_get_flags',
      );
  late final _EVP_MD_meth_get_flags =
      _EVP_MD_meth_get_flagsPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  void EVP_MD_CTX_set_flags(ffi.Pointer<EVP_MD_CTX> ctx, int flags) {
    return _EVP_MD_CTX_set_flags(ctx, flags);
  }

  late final _EVP_MD_CTX_set_flagsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int)>
      >('EVP_MD_CTX_set_flags');
  late final _EVP_MD_CTX_set_flags =
      _EVP_MD_CTX_set_flagsPtr.asFunction<
        void Function(ffi.Pointer<EVP_MD_CTX>, int)
      >();

  int EVP_MD_nid(ffi.Pointer<EVP_MD> md) {
    return _EVP_MD_nid(md);
  }

  late final _EVP_MD_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
        'EVP_MD_nid',
      );
  late final _EVP_MD_nid =
      _EVP_MD_nidPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<EVP_CIPHER> EVP_rc4() {
    return _EVP_rc4();
  }

  late final _EVP_rc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_rc4',
      );
  late final _EVP_rc4 =
      _EVP_rc4Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cbc() {
    return _EVP_des_cbc();
  }

  late final _EVP_des_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_des_cbc',
      );
  late final _EVP_des_cbc =
      _EVP_des_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ecb() {
    return _EVP_des_ecb();
  }

  late final _EVP_des_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_des_ecb',
      );
  late final _EVP_des_ecb =
      _EVP_des_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede() {
    return _EVP_des_ede();
  }

  late final _EVP_des_edePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_des_ede',
      );
  late final _EVP_des_ede =
      _EVP_des_edePtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3() {
    return _EVP_des_ede3();
  }

  late final _EVP_des_ede3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_des_ede3',
      );
  late final _EVP_des_ede3 =
      _EVP_des_ede3Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_cbc() {
    return _EVP_des_ede_cbc();
  }

  late final _EVP_des_ede_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_des_ede_cbc',
      );
  late final _EVP_des_ede_cbc =
      _EVP_des_ede_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cbc() {
    return _EVP_des_ede3_cbc();
  }

  late final _EVP_des_ede3_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_des_ede3_cbc',
      );
  late final _EVP_des_ede3_cbc =
      _EVP_des_ede3_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ecb() {
    return _EVP_aes_128_ecb();
  }

  late final _EVP_aes_128_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_128_ecb',
      );
  late final _EVP_aes_128_ecb =
      _EVP_aes_128_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cbc() {
    return _EVP_aes_128_cbc();
  }

  late final _EVP_aes_128_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_128_cbc',
      );
  late final _EVP_aes_128_cbc =
      _EVP_aes_128_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ctr() {
    return _EVP_aes_128_ctr();
  }

  late final _EVP_aes_128_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_128_ctr',
      );
  late final _EVP_aes_128_ctr =
      _EVP_aes_128_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ofb() {
    return _EVP_aes_128_ofb();
  }

  late final _EVP_aes_128_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_128_ofb',
      );
  late final _EVP_aes_128_ofb =
      _EVP_aes_128_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ecb() {
    return _EVP_aes_256_ecb();
  }

  late final _EVP_aes_256_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_256_ecb',
      );
  late final _EVP_aes_256_ecb =
      _EVP_aes_256_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cbc() {
    return _EVP_aes_256_cbc();
  }

  late final _EVP_aes_256_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_256_cbc',
      );
  late final _EVP_aes_256_cbc =
      _EVP_aes_256_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ctr() {
    return _EVP_aes_256_ctr();
  }

  late final _EVP_aes_256_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_256_ctr',
      );
  late final _EVP_aes_256_ctr =
      _EVP_aes_256_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ofb() {
    return _EVP_aes_256_ofb();
  }

  late final _EVP_aes_256_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_256_ofb',
      );
  late final _EVP_aes_256_ofb =
      _EVP_aes_256_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_xts() {
    return _EVP_aes_256_xts();
  }

  late final _EVP_aes_256_xtsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_256_xts',
      );
  late final _EVP_aes_256_xts =
      _EVP_aes_256_xtsPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_enc_null() {
    return _EVP_enc_null();
  }

  late final _EVP_enc_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_enc_null',
      );
  late final _EVP_enc_null =
      _EVP_enc_nullPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_cbc() {
    return _EVP_rc2_cbc();
  }

  late final _EVP_rc2_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_rc2_cbc',
      );
  late final _EVP_rc2_cbc =
      _EVP_rc2_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_40_cbc() {
    return _EVP_rc2_40_cbc();
  }

  late final _EVP_rc2_40_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_rc2_40_cbc',
      );
  late final _EVP_rc2_40_cbc =
      _EVP_rc2_40_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_get_cipherbynid(int nid) {
    return _EVP_get_cipherbynid(nid);
  }

  late final _EVP_get_cipherbynidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function(ffi.Int)>>(
        'EVP_get_cipherbynid',
      );
  late final _EVP_get_cipherbynid =
      _EVP_get_cipherbynidPtr.asFunction<
        ffi.Pointer<EVP_CIPHER> Function(int)
      >();

  void EVP_CIPHER_CTX_init(ffi.Pointer<EVP_CIPHER_CTX> ctx) {
    return _EVP_CIPHER_CTX_init(ctx);
  }

  late final _EVP_CIPHER_CTX_initPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>)>
      >('EVP_CIPHER_CTX_init');
  late final _EVP_CIPHER_CTX_init =
      _EVP_CIPHER_CTX_initPtr.asFunction<
        void Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  ffi.Pointer<EVP_CIPHER_CTX> EVP_CIPHER_CTX_new() {
    return _EVP_CIPHER_CTX_new();
  }

  late final _EVP_CIPHER_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER_CTX> Function()>>(
        'EVP_CIPHER_CTX_new',
      );
  late final _EVP_CIPHER_CTX_new =
      _EVP_CIPHER_CTX_newPtr.asFunction<
        ffi.Pointer<EVP_CIPHER_CTX> Function()
      >();

  int EVP_CIPHER_CTX_cleanup(ffi.Pointer<EVP_CIPHER_CTX> ctx) {
    return _EVP_CIPHER_CTX_cleanup(ctx);
  }

  late final _EVP_CIPHER_CTX_cleanupPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>
      >('EVP_CIPHER_CTX_cleanup');
  late final _EVP_CIPHER_CTX_cleanup =
      _EVP_CIPHER_CTX_cleanupPtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  void EVP_CIPHER_CTX_free(ffi.Pointer<EVP_CIPHER_CTX> ctx) {
    return _EVP_CIPHER_CTX_free(ctx);
  }

  late final _EVP_CIPHER_CTX_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>)>
      >('EVP_CIPHER_CTX_free');
  late final _EVP_CIPHER_CTX_free =
      _EVP_CIPHER_CTX_freePtr.asFunction<
        void Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  int EVP_CIPHER_CTX_copy(
    ffi.Pointer<EVP_CIPHER_CTX> out,
    ffi.Pointer<EVP_CIPHER_CTX> in1,
  ) {
    return _EVP_CIPHER_CTX_copy(out, in1);
  }

  late final _EVP_CIPHER_CTX_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<EVP_CIPHER_CTX>,
          )
        >
      >('EVP_CIPHER_CTX_copy');
  late final _EVP_CIPHER_CTX_copy =
      _EVP_CIPHER_CTX_copyPtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  int EVP_CIPHER_CTX_reset(ffi.Pointer<EVP_CIPHER_CTX> ctx) {
    return _EVP_CIPHER_CTX_reset(ctx);
  }

  late final _EVP_CIPHER_CTX_resetPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>
      >('EVP_CIPHER_CTX_reset');
  late final _EVP_CIPHER_CTX_reset =
      _EVP_CIPHER_CTX_resetPtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  int EVP_CipherInit_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> engine,
    ffi.Pointer<ffi.Uint8> key,
    ffi.Pointer<ffi.Uint8> iv,
    int enc,
  ) {
    return _EVP_CipherInit_ex(ctx, cipher, engine, key, iv, enc);
  }

  late final _EVP_CipherInit_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<EVP_CIPHER>,
            ffi.Pointer<ENGINE>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Int,
          )
        >
      >('EVP_CipherInit_ex');
  late final _EVP_CipherInit_ex =
      _EVP_CipherInit_exPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_EncryptInit_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> impl,
    ffi.Pointer<ffi.Uint8> key,
    ffi.Pointer<ffi.Uint8> iv,
  ) {
    return _EVP_EncryptInit_ex(ctx, cipher, impl, key, iv);
  }

  late final _EVP_EncryptInit_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<EVP_CIPHER>,
            ffi.Pointer<ENGINE>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('EVP_EncryptInit_ex');
  late final _EVP_EncryptInit_ex =
      _EVP_EncryptInit_exPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int EVP_DecryptInit_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> impl,
    ffi.Pointer<ffi.Uint8> key,
    ffi.Pointer<ffi.Uint8> iv,
  ) {
    return _EVP_DecryptInit_ex(ctx, cipher, impl, key, iv);
  }

  late final _EVP_DecryptInit_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<EVP_CIPHER>,
            ffi.Pointer<ENGINE>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('EVP_DecryptInit_ex');
  late final _EVP_DecryptInit_ex =
      _EVP_DecryptInit_exPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int EVP_EncryptUpdate(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _EVP_EncryptUpdate(ctx, out, out_len, in1, in_len);
  }

  late final _EVP_EncryptUpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Int,
          )
        >
      >('EVP_EncryptUpdate');
  late final _EVP_EncryptUpdate =
      _EVP_EncryptUpdatePtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_EncryptFinal_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
  ) {
    return _EVP_EncryptFinal_ex(ctx, out, out_len);
  }

  late final _EVP_EncryptFinal_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('EVP_EncryptFinal_ex');
  late final _EVP_EncryptFinal_ex =
      _EVP_EncryptFinal_exPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int EVP_DecryptUpdate(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _EVP_DecryptUpdate(ctx, out, out_len, in1, in_len);
  }

  late final _EVP_DecryptUpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Int,
          )
        >
      >('EVP_DecryptUpdate');
  late final _EVP_DecryptUpdate =
      _EVP_DecryptUpdatePtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_DecryptFinal_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
  ) {
    return _EVP_DecryptFinal_ex(ctx, out, out_len);
  }

  late final _EVP_DecryptFinal_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('EVP_DecryptFinal_ex');
  late final _EVP_DecryptFinal_ex =
      _EVP_DecryptFinal_exPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int EVP_CipherUpdate(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _EVP_CipherUpdate(ctx, out, out_len, in1, in_len);
  }

  late final _EVP_CipherUpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Int,
          )
        >
      >('EVP_CipherUpdate');
  late final _EVP_CipherUpdate =
      _EVP_CipherUpdatePtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_CipherFinal_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
  ) {
    return _EVP_CipherFinal_ex(ctx, out, out_len);
  }

  late final _EVP_CipherFinal_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('EVP_CipherFinal_ex');
  late final _EVP_CipherFinal_ex =
      _EVP_CipherFinal_exPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_CTX_cipher(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_cipher(ctx);
  }

  late final _EVP_CIPHER_CTX_cipherPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<EVP_CIPHER_CTX>)
        >
      >('EVP_CIPHER_CTX_cipher');
  late final _EVP_CIPHER_CTX_cipher =
      _EVP_CIPHER_CTX_cipherPtr.asFunction<
        ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  int EVP_CIPHER_CTX_nid(ffi.Pointer<EVP_CIPHER_CTX> ctx) {
    return _EVP_CIPHER_CTX_nid(ctx);
  }

  late final _EVP_CIPHER_CTX_nidPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>
      >('EVP_CIPHER_CTX_nid');
  late final _EVP_CIPHER_CTX_nid =
      _EVP_CIPHER_CTX_nidPtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  int EVP_CIPHER_CTX_encrypting(ffi.Pointer<EVP_CIPHER_CTX> ctx) {
    return _EVP_CIPHER_CTX_encrypting(ctx);
  }

  late final _EVP_CIPHER_CTX_encryptingPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>
      >('EVP_CIPHER_CTX_encrypting');
  late final _EVP_CIPHER_CTX_encrypting =
      _EVP_CIPHER_CTX_encryptingPtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  int EVP_CIPHER_CTX_block_size(ffi.Pointer<EVP_CIPHER_CTX> ctx) {
    return _EVP_CIPHER_CTX_block_size(ctx);
  }

  late final _EVP_CIPHER_CTX_block_sizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<EVP_CIPHER_CTX>)
        >
      >('EVP_CIPHER_CTX_block_size');
  late final _EVP_CIPHER_CTX_block_size =
      _EVP_CIPHER_CTX_block_sizePtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  int EVP_CIPHER_CTX_key_length(ffi.Pointer<EVP_CIPHER_CTX> ctx) {
    return _EVP_CIPHER_CTX_key_length(ctx);
  }

  late final _EVP_CIPHER_CTX_key_lengthPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<EVP_CIPHER_CTX>)
        >
      >('EVP_CIPHER_CTX_key_length');
  late final _EVP_CIPHER_CTX_key_length =
      _EVP_CIPHER_CTX_key_lengthPtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  int EVP_CIPHER_CTX_iv_length(ffi.Pointer<EVP_CIPHER_CTX> ctx) {
    return _EVP_CIPHER_CTX_iv_length(ctx);
  }

  late final _EVP_CIPHER_CTX_iv_lengthPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<EVP_CIPHER_CTX>)
        >
      >('EVP_CIPHER_CTX_iv_length');
  late final _EVP_CIPHER_CTX_iv_length =
      _EVP_CIPHER_CTX_iv_lengthPtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  ffi.Pointer<ffi.Void> EVP_CIPHER_CTX_get_app_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_app_data(ctx);
  }

  late final _EVP_CIPHER_CTX_get_app_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_CIPHER_CTX>)
        >
      >('EVP_CIPHER_CTX_get_app_data');
  late final _EVP_CIPHER_CTX_get_app_data =
      _EVP_CIPHER_CTX_get_app_dataPtr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  void EVP_CIPHER_CTX_set_app_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_CIPHER_CTX_set_app_data(ctx, data);
  }

  late final _EVP_CIPHER_CTX_set_app_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.Void>)
        >
      >('EVP_CIPHER_CTX_set_app_data');
  late final _EVP_CIPHER_CTX_set_app_data =
      _EVP_CIPHER_CTX_set_app_dataPtr.asFunction<
        void Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.Void>)
      >();

  int EVP_CIPHER_CTX_flags(ffi.Pointer<EVP_CIPHER_CTX> ctx) {
    return _EVP_CIPHER_CTX_flags(ctx);
  }

  late final _EVP_CIPHER_CTX_flagsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<EVP_CIPHER_CTX>)>
      >('EVP_CIPHER_CTX_flags');
  late final _EVP_CIPHER_CTX_flags =
      _EVP_CIPHER_CTX_flagsPtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  int EVP_CIPHER_CTX_mode(ffi.Pointer<EVP_CIPHER_CTX> ctx) {
    return _EVP_CIPHER_CTX_mode(ctx);
  }

  late final _EVP_CIPHER_CTX_modePtr =
      _lookup<
        ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<EVP_CIPHER_CTX>)>
      >('EVP_CIPHER_CTX_mode');
  late final _EVP_CIPHER_CTX_mode =
      _EVP_CIPHER_CTX_modePtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER_CTX>)
      >();

  int EVP_CIPHER_CTX_ctrl(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int command,
    int arg,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _EVP_CIPHER_CTX_ctrl(ctx, command, arg, ptr);
  }

  late final _EVP_CIPHER_CTX_ctrlPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('EVP_CIPHER_CTX_ctrl');
  late final _EVP_CIPHER_CTX_ctrl =
      _EVP_CIPHER_CTX_ctrlPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
        )
      >();

  int EVP_CIPHER_CTX_set_padding(ffi.Pointer<EVP_CIPHER_CTX> ctx, int pad) {
    return _EVP_CIPHER_CTX_set_padding(ctx, pad);
  }

  late final _EVP_CIPHER_CTX_set_paddingPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int)
        >
      >('EVP_CIPHER_CTX_set_padding');
  late final _EVP_CIPHER_CTX_set_padding =
      _EVP_CIPHER_CTX_set_paddingPtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER_CTX>, int)
      >();

  int EVP_CIPHER_CTX_set_key_length(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int key_len,
  ) {
    return _EVP_CIPHER_CTX_set_key_length(ctx, key_len);
  }

  late final _EVP_CIPHER_CTX_set_key_lengthPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.UnsignedInt)
        >
      >('EVP_CIPHER_CTX_set_key_length');
  late final _EVP_CIPHER_CTX_set_key_length =
      _EVP_CIPHER_CTX_set_key_lengthPtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER_CTX>, int)
      >();

  int EVP_CIPHER_nid(ffi.Pointer<EVP_CIPHER> cipher) {
    return _EVP_CIPHER_nid(cipher);
  }

  late final _EVP_CIPHER_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
        'EVP_CIPHER_nid',
      );
  late final _EVP_CIPHER_nid =
      _EVP_CIPHER_nidPtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_block_size(ffi.Pointer<EVP_CIPHER> cipher) {
    return _EVP_CIPHER_block_size(cipher);
  }

  late final _EVP_CIPHER_block_sizePtr =
      _lookup<
        ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<EVP_CIPHER>)>
      >('EVP_CIPHER_block_size');
  late final _EVP_CIPHER_block_size =
      _EVP_CIPHER_block_sizePtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER>)
      >();

  int EVP_CIPHER_key_length(ffi.Pointer<EVP_CIPHER> cipher) {
    return _EVP_CIPHER_key_length(cipher);
  }

  late final _EVP_CIPHER_key_lengthPtr =
      _lookup<
        ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<EVP_CIPHER>)>
      >('EVP_CIPHER_key_length');
  late final _EVP_CIPHER_key_length =
      _EVP_CIPHER_key_lengthPtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER>)
      >();

  int EVP_CIPHER_iv_length(ffi.Pointer<EVP_CIPHER> cipher) {
    return _EVP_CIPHER_iv_length(cipher);
  }

  late final _EVP_CIPHER_iv_lengthPtr =
      _lookup<
        ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<EVP_CIPHER>)>
      >('EVP_CIPHER_iv_length');
  late final _EVP_CIPHER_iv_length =
      _EVP_CIPHER_iv_lengthPtr.asFunction<
        int Function(ffi.Pointer<EVP_CIPHER>)
      >();

  int EVP_CIPHER_flags(ffi.Pointer<EVP_CIPHER> cipher) {
    return _EVP_CIPHER_flags(cipher);
  }

  late final _EVP_CIPHER_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<EVP_CIPHER>)>>(
        'EVP_CIPHER_flags',
      );
  late final _EVP_CIPHER_flags =
      _EVP_CIPHER_flagsPtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_mode(ffi.Pointer<EVP_CIPHER> cipher) {
    return _EVP_CIPHER_mode(cipher);
  }

  late final _EVP_CIPHER_modePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<EVP_CIPHER>)>>(
        'EVP_CIPHER_mode',
      );
  late final _EVP_CIPHER_mode =
      _EVP_CIPHER_modePtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_BytesToKey(
    ffi.Pointer<EVP_CIPHER> type,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<ffi.Uint8> salt,
    ffi.Pointer<ffi.Uint8> data,
    int data_len,
    int count,
    ffi.Pointer<ffi.Uint8> key,
    ffi.Pointer<ffi.Uint8> iv,
  ) {
    return _EVP_BytesToKey(type, md, salt, data, data_len, count, key, iv);
  }

  late final _EVP_BytesToKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER>,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('EVP_BytesToKey');
  late final _EVP_BytesToKey =
      _EVP_BytesToKeyPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int EVP_CipherInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.Uint8> key,
    ffi.Pointer<ffi.Uint8> iv,
    int enc,
  ) {
    return _EVP_CipherInit(ctx, cipher, key, iv, enc);
  }

  late final _EVP_CipherInitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<EVP_CIPHER>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Int,
          )
        >
      >('EVP_CipherInit');
  late final _EVP_CipherInit =
      _EVP_CipherInitPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_EncryptInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.Uint8> key,
    ffi.Pointer<ffi.Uint8> iv,
  ) {
    return _EVP_EncryptInit(ctx, cipher, key, iv);
  }

  late final _EVP_EncryptInitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<EVP_CIPHER>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('EVP_EncryptInit');
  late final _EVP_EncryptInit =
      _EVP_EncryptInitPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int EVP_DecryptInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.Uint8> key,
    ffi.Pointer<ffi.Uint8> iv,
  ) {
    return _EVP_DecryptInit(ctx, cipher, key, iv);
  }

  late final _EVP_DecryptInitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<EVP_CIPHER>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('EVP_DecryptInit');
  late final _EVP_DecryptInit =
      _EVP_DecryptInitPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int EVP_CipherFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
  ) {
    return _EVP_CipherFinal(ctx, out, out_len);
  }

  late final _EVP_CipherFinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('EVP_CipherFinal');
  late final _EVP_CipherFinal =
      _EVP_CipherFinalPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int EVP_EncryptFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
  ) {
    return _EVP_EncryptFinal(ctx, out, out_len);
  }

  late final _EVP_EncryptFinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('EVP_EncryptFinal');
  late final _EVP_EncryptFinal =
      _EVP_EncryptFinalPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int EVP_DecryptFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int> out_len,
  ) {
    return _EVP_DecryptFinal(ctx, out, out_len);
  }

  late final _EVP_DecryptFinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('EVP_DecryptFinal');
  late final _EVP_DecryptFinal =
      _EVP_DecryptFinalPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  int EVP_Cipher(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _EVP_Cipher(ctx, out, in1, in_len);
  }

  late final _EVP_CipherPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_CIPHER_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_Cipher');
  late final _EVP_Cipher =
      _EVP_CipherPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_add_cipher_alias(ffi.Pointer<ffi.Char> a, ffi.Pointer<ffi.Char> b) {
    return _EVP_add_cipher_alias(a, b);
  }

  late final _EVP_add_cipher_aliasPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
        >
      >('EVP_add_cipher_alias');
  late final _EVP_add_cipher_alias =
      _EVP_add_cipher_aliasPtr.asFunction<
        int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<EVP_CIPHER> EVP_get_cipherbyname(ffi.Pointer<ffi.Char> name) {
    return _EVP_get_cipherbyname(name);
  }

  late final _EVP_get_cipherbynamePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<ffi.Char>)
        >
      >('EVP_get_cipherbyname');
  late final _EVP_get_cipherbyname =
      _EVP_get_cipherbynamePtr.asFunction<
        ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_gcm() {
    return _EVP_aes_128_gcm();
  }

  late final _EVP_aes_128_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_128_gcm',
      );
  late final _EVP_aes_128_gcm =
      _EVP_aes_128_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_gcm() {
    return _EVP_aes_256_gcm();
  }

  late final _EVP_aes_256_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_256_gcm',
      );
  late final _EVP_aes_256_gcm =
      _EVP_aes_256_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ecb() {
    return _EVP_aes_192_ecb();
  }

  late final _EVP_aes_192_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_192_ecb',
      );
  late final _EVP_aes_192_ecb =
      _EVP_aes_192_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cbc() {
    return _EVP_aes_192_cbc();
  }

  late final _EVP_aes_192_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_192_cbc',
      );
  late final _EVP_aes_192_cbc =
      _EVP_aes_192_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ctr() {
    return _EVP_aes_192_ctr();
  }

  late final _EVP_aes_192_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_192_ctr',
      );
  late final _EVP_aes_192_ctr =
      _EVP_aes_192_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_gcm() {
    return _EVP_aes_192_gcm();
  }

  late final _EVP_aes_192_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_192_gcm',
      );
  late final _EVP_aes_192_gcm =
      _EVP_aes_192_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ofb() {
    return _EVP_aes_192_ofb();
  }

  late final _EVP_aes_192_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_192_ofb',
      );
  late final _EVP_aes_192_ofb =
      _EVP_aes_192_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_ecb() {
    return _EVP_des_ede3_ecb();
  }

  late final _EVP_des_ede3_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_des_ede3_ecb',
      );
  late final _EVP_des_ede3_ecb =
      _EVP_des_ede3_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cfb128() {
    return _EVP_aes_128_cfb128();
  }

  late final _EVP_aes_128_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_128_cfb128',
      );
  late final _EVP_aes_128_cfb128 =
      _EVP_aes_128_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cfb() {
    return _EVP_aes_128_cfb();
  }

  late final _EVP_aes_128_cfbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_128_cfb',
      );
  late final _EVP_aes_128_cfb =
      _EVP_aes_128_cfbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cfb128() {
    return _EVP_aes_192_cfb128();
  }

  late final _EVP_aes_192_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_192_cfb128',
      );
  late final _EVP_aes_192_cfb128 =
      _EVP_aes_192_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cfb() {
    return _EVP_aes_192_cfb();
  }

  late final _EVP_aes_192_cfbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_192_cfb',
      );
  late final _EVP_aes_192_cfb =
      _EVP_aes_192_cfbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cfb128() {
    return _EVP_aes_256_cfb128();
  }

  late final _EVP_aes_256_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_256_cfb128',
      );
  late final _EVP_aes_256_cfb128 =
      _EVP_aes_256_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cfb() {
    return _EVP_aes_256_cfb();
  }

  late final _EVP_aes_256_cfbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_aes_256_cfb',
      );
  late final _EVP_aes_256_cfb =
      _EVP_aes_256_cfbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_ecb() {
    return _EVP_bf_ecb();
  }

  late final _EVP_bf_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_bf_ecb',
      );
  late final _EVP_bf_ecb =
      _EVP_bf_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_cbc() {
    return _EVP_bf_cbc();
  }

  late final _EVP_bf_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_bf_cbc',
      );
  late final _EVP_bf_cbc =
      _EVP_bf_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_cfb() {
    return _EVP_bf_cfb();
  }

  late final _EVP_bf_cfbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_bf_cfb',
      );
  late final _EVP_bf_cfb =
      _EVP_bf_cfbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_ecb() {
    return _EVP_cast5_ecb();
  }

  late final _EVP_cast5_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_cast5_ecb',
      );
  late final _EVP_cast5_ecb =
      _EVP_cast5_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_cbc() {
    return _EVP_cast5_cbc();
  }

  late final _EVP_cast5_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
        'EVP_cast5_cbc',
      );
  late final _EVP_cast5_cbc =
      _EVP_cast5_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  void EVP_CIPHER_CTX_set_flags(ffi.Pointer<EVP_CIPHER_CTX> ctx, int flags) {
    return _EVP_CIPHER_CTX_set_flags(ctx, flags);
  }

  late final _EVP_CIPHER_CTX_set_flagsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Uint32)
        >
      >('EVP_CIPHER_CTX_set_flags');
  late final _EVP_CIPHER_CTX_set_flags =
      _EVP_CIPHER_CTX_set_flagsPtr.asFunction<
        void Function(ffi.Pointer<EVP_CIPHER_CTX>, int)
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_gcm() {
    return _EVP_aead_aes_128_gcm();
  }

  late final _EVP_aead_aes_128_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_gcm',
      );
  late final _EVP_aead_aes_128_gcm =
      _EVP_aead_aes_128_gcmPtr.asFunction<ffi.Pointer<EVP_AEAD> Function()>();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_192_gcm() {
    return _EVP_aead_aes_192_gcm();
  }

  late final _EVP_aead_aes_192_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_192_gcm',
      );
  late final _EVP_aead_aes_192_gcm =
      _EVP_aead_aes_192_gcmPtr.asFunction<ffi.Pointer<EVP_AEAD> Function()>();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_256_gcm() {
    return _EVP_aead_aes_256_gcm();
  }

  late final _EVP_aead_aes_256_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_256_gcm',
      );
  late final _EVP_aead_aes_256_gcm =
      _EVP_aead_aes_256_gcmPtr.asFunction<ffi.Pointer<EVP_AEAD> Function()>();

  ffi.Pointer<EVP_AEAD> EVP_aead_chacha20_poly1305() {
    return _EVP_aead_chacha20_poly1305();
  }

  late final _EVP_aead_chacha20_poly1305Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_chacha20_poly1305',
      );
  late final _EVP_aead_chacha20_poly1305 =
      _EVP_aead_chacha20_poly1305Ptr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_xchacha20_poly1305() {
    return _EVP_aead_xchacha20_poly1305();
  }

  late final _EVP_aead_xchacha20_poly1305Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_xchacha20_poly1305',
      );
  late final _EVP_aead_xchacha20_poly1305 =
      _EVP_aead_xchacha20_poly1305Ptr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_ctr_hmac_sha256() {
    return _EVP_aead_aes_128_ctr_hmac_sha256();
  }

  late final _EVP_aead_aes_128_ctr_hmac_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_ctr_hmac_sha256',
      );
  late final _EVP_aead_aes_128_ctr_hmac_sha256 =
      _EVP_aead_aes_128_ctr_hmac_sha256Ptr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_256_ctr_hmac_sha256() {
    return _EVP_aead_aes_256_ctr_hmac_sha256();
  }

  late final _EVP_aead_aes_256_ctr_hmac_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_256_ctr_hmac_sha256',
      );
  late final _EVP_aead_aes_256_ctr_hmac_sha256 =
      _EVP_aead_aes_256_ctr_hmac_sha256Ptr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_gcm_siv() {
    return _EVP_aead_aes_128_gcm_siv();
  }

  late final _EVP_aead_aes_128_gcm_sivPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_gcm_siv',
      );
  late final _EVP_aead_aes_128_gcm_siv =
      _EVP_aead_aes_128_gcm_sivPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_256_gcm_siv() {
    return _EVP_aead_aes_256_gcm_siv();
  }

  late final _EVP_aead_aes_256_gcm_sivPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_256_gcm_siv',
      );
  late final _EVP_aead_aes_256_gcm_siv =
      _EVP_aead_aes_256_gcm_sivPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_gcm_randnonce() {
    return _EVP_aead_aes_128_gcm_randnonce();
  }

  late final _EVP_aead_aes_128_gcm_randnoncePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_gcm_randnonce',
      );
  late final _EVP_aead_aes_128_gcm_randnonce =
      _EVP_aead_aes_128_gcm_randnoncePtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_256_gcm_randnonce() {
    return _EVP_aead_aes_256_gcm_randnonce();
  }

  late final _EVP_aead_aes_256_gcm_randnoncePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_256_gcm_randnonce',
      );
  late final _EVP_aead_aes_256_gcm_randnonce =
      _EVP_aead_aes_256_gcm_randnoncePtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_ccm_bluetooth() {
    return _EVP_aead_aes_128_ccm_bluetooth();
  }

  late final _EVP_aead_aes_128_ccm_bluetoothPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_ccm_bluetooth',
      );
  late final _EVP_aead_aes_128_ccm_bluetooth =
      _EVP_aead_aes_128_ccm_bluetoothPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_ccm_bluetooth_8() {
    return _EVP_aead_aes_128_ccm_bluetooth_8();
  }

  late final _EVP_aead_aes_128_ccm_bluetooth_8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_ccm_bluetooth_8',
      );
  late final _EVP_aead_aes_128_ccm_bluetooth_8 =
      _EVP_aead_aes_128_ccm_bluetooth_8Ptr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_ccm_matter() {
    return _EVP_aead_aes_128_ccm_matter();
  }

  late final _EVP_aead_aes_128_ccm_matterPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_ccm_matter',
      );
  late final _EVP_aead_aes_128_ccm_matter =
      _EVP_aead_aes_128_ccm_matterPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  int EVP_has_aes_hardware() {
    return _EVP_has_aes_hardware();
  }

  late final _EVP_has_aes_hardwarePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('EVP_has_aes_hardware');
  late final _EVP_has_aes_hardware =
      _EVP_has_aes_hardwarePtr.asFunction<int Function()>();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_eax() {
    return _EVP_aead_aes_128_eax();
  }

  late final _EVP_aead_aes_128_eaxPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_eax',
      );
  late final _EVP_aead_aes_128_eax =
      _EVP_aead_aes_128_eaxPtr.asFunction<ffi.Pointer<EVP_AEAD> Function()>();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_256_eax() {
    return _EVP_aead_aes_256_eax();
  }

  late final _EVP_aead_aes_256_eaxPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_256_eax',
      );
  late final _EVP_aead_aes_256_eax =
      _EVP_aead_aes_256_eaxPtr.asFunction<ffi.Pointer<EVP_AEAD> Function()>();

  int EVP_AEAD_key_length(ffi.Pointer<EVP_AEAD> aead) {
    return _EVP_AEAD_key_length(aead);
  }

  late final _EVP_AEAD_key_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_AEAD>)>>(
        'EVP_AEAD_key_length',
      );
  late final _EVP_AEAD_key_length =
      _EVP_AEAD_key_lengthPtr.asFunction<int Function(ffi.Pointer<EVP_AEAD>)>();

  int EVP_AEAD_nonce_length(ffi.Pointer<EVP_AEAD> aead) {
    return _EVP_AEAD_nonce_length(aead);
  }

  late final _EVP_AEAD_nonce_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_AEAD>)>>(
        'EVP_AEAD_nonce_length',
      );
  late final _EVP_AEAD_nonce_length =
      _EVP_AEAD_nonce_lengthPtr.asFunction<
        int Function(ffi.Pointer<EVP_AEAD>)
      >();

  int EVP_AEAD_max_overhead(ffi.Pointer<EVP_AEAD> aead) {
    return _EVP_AEAD_max_overhead(aead);
  }

  late final _EVP_AEAD_max_overheadPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_AEAD>)>>(
        'EVP_AEAD_max_overhead',
      );
  late final _EVP_AEAD_max_overhead =
      _EVP_AEAD_max_overheadPtr.asFunction<
        int Function(ffi.Pointer<EVP_AEAD>)
      >();

  int EVP_AEAD_max_tag_len(ffi.Pointer<EVP_AEAD> aead) {
    return _EVP_AEAD_max_tag_len(aead);
  }

  late final _EVP_AEAD_max_tag_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_AEAD>)>>(
        'EVP_AEAD_max_tag_len',
      );
  late final _EVP_AEAD_max_tag_len =
      _EVP_AEAD_max_tag_lenPtr.asFunction<
        int Function(ffi.Pointer<EVP_AEAD>)
      >();

  void EVP_AEAD_CTX_zero(ffi.Pointer<EVP_AEAD_CTX> ctx) {
    return _EVP_AEAD_CTX_zero(ctx);
  }

  late final _EVP_AEAD_CTX_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_AEAD_CTX>)>>(
        'EVP_AEAD_CTX_zero',
      );
  late final _EVP_AEAD_CTX_zero =
      _EVP_AEAD_CTX_zeroPtr.asFunction<
        void Function(ffi.Pointer<EVP_AEAD_CTX>)
      >();

  ffi.Pointer<EVP_AEAD_CTX> EVP_AEAD_CTX_new(
    ffi.Pointer<EVP_AEAD> aead,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    int tag_len,
  ) {
    return _EVP_AEAD_CTX_new(aead, key, key_len, tag_len);
  }

  late final _EVP_AEAD_CTX_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_AEAD_CTX> Function(
            ffi.Pointer<EVP_AEAD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Size,
          )
        >
      >('EVP_AEAD_CTX_new');
  late final _EVP_AEAD_CTX_new =
      _EVP_AEAD_CTX_newPtr.asFunction<
        ffi.Pointer<EVP_AEAD_CTX> Function(
          ffi.Pointer<EVP_AEAD>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
        )
      >();

  void EVP_AEAD_CTX_free(ffi.Pointer<EVP_AEAD_CTX> ctx) {
    return _EVP_AEAD_CTX_free(ctx);
  }

  late final _EVP_AEAD_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_AEAD_CTX>)>>(
        'EVP_AEAD_CTX_free',
      );
  late final _EVP_AEAD_CTX_free =
      _EVP_AEAD_CTX_freePtr.asFunction<
        void Function(ffi.Pointer<EVP_AEAD_CTX>)
      >();

  int EVP_AEAD_CTX_init(
    ffi.Pointer<EVP_AEAD_CTX> ctx,
    ffi.Pointer<EVP_AEAD> aead,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    int tag_len,
    ffi.Pointer<ENGINE> impl,
  ) {
    return _EVP_AEAD_CTX_init(ctx, aead, key, key_len, tag_len, impl);
  }

  late final _EVP_AEAD_CTX_initPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_AEAD_CTX>,
            ffi.Pointer<EVP_AEAD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Size,
            ffi.Pointer<ENGINE>,
          )
        >
      >('EVP_AEAD_CTX_init');
  late final _EVP_AEAD_CTX_init =
      _EVP_AEAD_CTX_initPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_AEAD_CTX>,
          ffi.Pointer<EVP_AEAD>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ENGINE>,
        )
      >();

  void EVP_AEAD_CTX_cleanup(ffi.Pointer<EVP_AEAD_CTX> ctx) {
    return _EVP_AEAD_CTX_cleanup(ctx);
  }

  late final _EVP_AEAD_CTX_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_AEAD_CTX>)>>(
        'EVP_AEAD_CTX_cleanup',
      );
  late final _EVP_AEAD_CTX_cleanup =
      _EVP_AEAD_CTX_cleanupPtr.asFunction<
        void Function(ffi.Pointer<EVP_AEAD_CTX>)
      >();

  int EVP_AEAD_CTX_seal(
    ffi.Pointer<EVP_AEAD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    int max_out_len,
    ffi.Pointer<ffi.Uint8> nonce,
    int nonce_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
    ffi.Pointer<ffi.Uint8> ad,
    int ad_len,
  ) {
    return _EVP_AEAD_CTX_seal(
      ctx,
      out,
      out_len,
      max_out_len,
      nonce,
      nonce_len,
      in1,
      in_len,
      ad,
      ad_len,
    );
  }

  late final _EVP_AEAD_CTX_sealPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_AEAD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_AEAD_CTX_seal');
  late final _EVP_AEAD_CTX_seal =
      _EVP_AEAD_CTX_sealPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_AEAD_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_AEAD_CTX_open(
    ffi.Pointer<EVP_AEAD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    int max_out_len,
    ffi.Pointer<ffi.Uint8> nonce,
    int nonce_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
    ffi.Pointer<ffi.Uint8> ad,
    int ad_len,
  ) {
    return _EVP_AEAD_CTX_open(
      ctx,
      out,
      out_len,
      max_out_len,
      nonce,
      nonce_len,
      in1,
      in_len,
      ad,
      ad_len,
    );
  }

  late final _EVP_AEAD_CTX_openPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_AEAD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_AEAD_CTX_open');
  late final _EVP_AEAD_CTX_open =
      _EVP_AEAD_CTX_openPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_AEAD_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_AEAD_CTX_seal_scatter(
    ffi.Pointer<EVP_AEAD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> out_tag,
    ffi.Pointer<ffi.Size> out_tag_len,
    int max_out_tag_len,
    ffi.Pointer<ffi.Uint8> nonce,
    int nonce_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
    ffi.Pointer<ffi.Uint8> extra_in,
    int extra_in_len,
    ffi.Pointer<ffi.Uint8> ad,
    int ad_len,
  ) {
    return _EVP_AEAD_CTX_seal_scatter(
      ctx,
      out,
      out_tag,
      out_tag_len,
      max_out_tag_len,
      nonce,
      nonce_len,
      in1,
      in_len,
      extra_in,
      extra_in_len,
      ad,
      ad_len,
    );
  }

  late final _EVP_AEAD_CTX_seal_scatterPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_AEAD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_AEAD_CTX_seal_scatter');
  late final _EVP_AEAD_CTX_seal_scatter =
      _EVP_AEAD_CTX_seal_scatterPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_AEAD_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_AEAD_CTX_open_gather(
    ffi.Pointer<EVP_AEAD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint8> nonce,
    int nonce_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
    ffi.Pointer<ffi.Uint8> in_tag,
    int in_tag_len,
    ffi.Pointer<ffi.Uint8> ad,
    int ad_len,
  ) {
    return _EVP_AEAD_CTX_open_gather(
      ctx,
      out,
      nonce,
      nonce_len,
      in1,
      in_len,
      in_tag,
      in_tag_len,
      ad,
      ad_len,
    );
  }

  late final _EVP_AEAD_CTX_open_gatherPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_AEAD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_AEAD_CTX_open_gather');
  late final _EVP_AEAD_CTX_open_gather =
      _EVP_AEAD_CTX_open_gatherPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_AEAD_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  ffi.Pointer<EVP_AEAD> EVP_AEAD_CTX_aead(ffi.Pointer<EVP_AEAD_CTX> ctx) {
    return _EVP_AEAD_CTX_aead(ctx);
  }

  late final _EVP_AEAD_CTX_aeadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_AEAD> Function(ffi.Pointer<EVP_AEAD_CTX>)
        >
      >('EVP_AEAD_CTX_aead');
  late final _EVP_AEAD_CTX_aead =
      _EVP_AEAD_CTX_aeadPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function(ffi.Pointer<EVP_AEAD_CTX>)
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_cbc_sha1_tls() {
    return _EVP_aead_aes_128_cbc_sha1_tls();
  }

  late final _EVP_aead_aes_128_cbc_sha1_tlsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_cbc_sha1_tls',
      );
  late final _EVP_aead_aes_128_cbc_sha1_tls =
      _EVP_aead_aes_128_cbc_sha1_tlsPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_cbc_sha1_tls_implicit_iv() {
    return _EVP_aead_aes_128_cbc_sha1_tls_implicit_iv();
  }

  late final _EVP_aead_aes_128_cbc_sha1_tls_implicit_ivPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_cbc_sha1_tls_implicit_iv',
      );
  late final _EVP_aead_aes_128_cbc_sha1_tls_implicit_iv =
      _EVP_aead_aes_128_cbc_sha1_tls_implicit_ivPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_cbc_sha256_tls() {
    return _EVP_aead_aes_128_cbc_sha256_tls();
  }

  late final _EVP_aead_aes_128_cbc_sha256_tlsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_cbc_sha256_tls',
      );
  late final _EVP_aead_aes_128_cbc_sha256_tls =
      _EVP_aead_aes_128_cbc_sha256_tlsPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_256_cbc_sha1_tls() {
    return _EVP_aead_aes_256_cbc_sha1_tls();
  }

  late final _EVP_aead_aes_256_cbc_sha1_tlsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_256_cbc_sha1_tls',
      );
  late final _EVP_aead_aes_256_cbc_sha1_tls =
      _EVP_aead_aes_256_cbc_sha1_tlsPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_256_cbc_sha1_tls_implicit_iv() {
    return _EVP_aead_aes_256_cbc_sha1_tls_implicit_iv();
  }

  late final _EVP_aead_aes_256_cbc_sha1_tls_implicit_ivPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_256_cbc_sha1_tls_implicit_iv',
      );
  late final _EVP_aead_aes_256_cbc_sha1_tls_implicit_iv =
      _EVP_aead_aes_256_cbc_sha1_tls_implicit_ivPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_des_ede3_cbc_sha1_tls() {
    return _EVP_aead_des_ede3_cbc_sha1_tls();
  }

  late final _EVP_aead_des_ede3_cbc_sha1_tlsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_des_ede3_cbc_sha1_tls',
      );
  late final _EVP_aead_des_ede3_cbc_sha1_tls =
      _EVP_aead_des_ede3_cbc_sha1_tlsPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_des_ede3_cbc_sha1_tls_implicit_iv() {
    return _EVP_aead_des_ede3_cbc_sha1_tls_implicit_iv();
  }

  late final _EVP_aead_des_ede3_cbc_sha1_tls_implicit_ivPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_des_ede3_cbc_sha1_tls_implicit_iv',
      );
  late final _EVP_aead_des_ede3_cbc_sha1_tls_implicit_iv =
      _EVP_aead_des_ede3_cbc_sha1_tls_implicit_ivPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_gcm_tls12() {
    return _EVP_aead_aes_128_gcm_tls12();
  }

  late final _EVP_aead_aes_128_gcm_tls12Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_gcm_tls12',
      );
  late final _EVP_aead_aes_128_gcm_tls12 =
      _EVP_aead_aes_128_gcm_tls12Ptr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_256_gcm_tls12() {
    return _EVP_aead_aes_256_gcm_tls12();
  }

  late final _EVP_aead_aes_256_gcm_tls12Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_256_gcm_tls12',
      );
  late final _EVP_aead_aes_256_gcm_tls12 =
      _EVP_aead_aes_256_gcm_tls12Ptr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_128_gcm_tls13() {
    return _EVP_aead_aes_128_gcm_tls13();
  }

  late final _EVP_aead_aes_128_gcm_tls13Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_128_gcm_tls13',
      );
  late final _EVP_aead_aes_128_gcm_tls13 =
      _EVP_aead_aes_128_gcm_tls13Ptr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  ffi.Pointer<EVP_AEAD> EVP_aead_aes_256_gcm_tls13() {
    return _EVP_aead_aes_256_gcm_tls13();
  }

  late final _EVP_aead_aes_256_gcm_tls13Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_AEAD> Function()>>(
        'EVP_aead_aes_256_gcm_tls13',
      );
  late final _EVP_aead_aes_256_gcm_tls13 =
      _EVP_aead_aes_256_gcm_tls13Ptr.asFunction<
        ffi.Pointer<EVP_AEAD> Function()
      >();

  int EVP_AEAD_CTX_init_with_direction(
    ffi.Pointer<EVP_AEAD_CTX> ctx,
    ffi.Pointer<EVP_AEAD> aead,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    int tag_len,
    evp_aead_direction_t dir,
  ) {
    return _EVP_AEAD_CTX_init_with_direction(
      ctx,
      aead,
      key,
      key_len,
      tag_len,
      dir.value,
    );
  }

  late final _EVP_AEAD_CTX_init_with_directionPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_AEAD_CTX>,
            ffi.Pointer<EVP_AEAD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Size,
            ffi.UnsignedInt,
          )
        >
      >('EVP_AEAD_CTX_init_with_direction');
  late final _EVP_AEAD_CTX_init_with_direction =
      _EVP_AEAD_CTX_init_with_directionPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_AEAD_CTX>,
          ffi.Pointer<EVP_AEAD>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
        )
      >();

  int EVP_AEAD_CTX_get_iv(
    ffi.Pointer<EVP_AEAD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_iv,
    ffi.Pointer<ffi.Size> out_len,
  ) {
    return _EVP_AEAD_CTX_get_iv(ctx, out_iv, out_len);
  }

  late final _EVP_AEAD_CTX_get_ivPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_AEAD_CTX>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('EVP_AEAD_CTX_get_iv');
  late final _EVP_AEAD_CTX_get_iv =
      _EVP_AEAD_CTX_get_ivPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_AEAD_CTX>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  int EVP_AEAD_CTX_tag_len(
    ffi.Pointer<EVP_AEAD_CTX> ctx,
    ffi.Pointer<ffi.Size> out_tag_len,
    int in_len,
    int extra_in_len,
  ) {
    return _EVP_AEAD_CTX_tag_len(ctx, out_tag_len, in_len, extra_in_len);
  }

  late final _EVP_AEAD_CTX_tag_lenPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_AEAD_CTX>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Size,
          )
        >
      >('EVP_AEAD_CTX_tag_len');
  late final _EVP_AEAD_CTX_tag_len =
      _EVP_AEAD_CTX_tag_lenPtr.asFunction<
        int Function(ffi.Pointer<EVP_AEAD_CTX>, ffi.Pointer<ffi.Size>, int, int)
      >();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new() {
    return _EVP_PKEY_new();
  }

  late final _EVP_PKEY_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_PKEY> Function()>>(
        'EVP_PKEY_new',
      );
  late final _EVP_PKEY_new =
      _EVP_PKEY_newPtr.asFunction<ffi.Pointer<EVP_PKEY> Function()>();

  void EVP_PKEY_free(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_free(pkey);
  }

  late final _EVP_PKEY_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY>)>>(
        'EVP_PKEY_free',
      );
  late final _EVP_PKEY_free =
      _EVP_PKEY_freePtr.asFunction<void Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_up_ref(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_up_ref(pkey);
  }

  late final _EVP_PKEY_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
        'EVP_PKEY_up_ref',
      );
  late final _EVP_PKEY_up_ref =
      _EVP_PKEY_up_refPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_is_opaque(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_is_opaque(pkey);
  }

  late final _EVP_PKEY_is_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
        'EVP_PKEY_is_opaque',
      );
  late final _EVP_PKEY_is_opaque =
      _EVP_PKEY_is_opaquePtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_cmp(ffi.Pointer<EVP_PKEY> a, ffi.Pointer<EVP_PKEY> b) {
    return _EVP_PKEY_cmp(a, b);
  }

  late final _EVP_PKEY_cmpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)
        >
      >('EVP_PKEY_cmp');
  late final _EVP_PKEY_cmp =
      _EVP_PKEY_cmpPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)
      >();

  int EVP_PKEY_copy_parameters(
    ffi.Pointer<EVP_PKEY> to,
    ffi.Pointer<EVP_PKEY> from,
  ) {
    return _EVP_PKEY_copy_parameters(to, from);
  }

  late final _EVP_PKEY_copy_parametersPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)
        >
      >('EVP_PKEY_copy_parameters');
  late final _EVP_PKEY_copy_parameters =
      _EVP_PKEY_copy_parametersPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)
      >();

  int EVP_PKEY_missing_parameters(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_missing_parameters(pkey);
  }

  late final _EVP_PKEY_missing_parametersPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
        'EVP_PKEY_missing_parameters',
      );
  late final _EVP_PKEY_missing_parameters =
      _EVP_PKEY_missing_parametersPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>)
      >();

  int EVP_PKEY_size(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_size(pkey);
  }

  late final _EVP_PKEY_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
        'EVP_PKEY_size',
      );
  late final _EVP_PKEY_size =
      _EVP_PKEY_sizePtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_bits(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_bits(pkey);
  }

  late final _EVP_PKEY_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
        'EVP_PKEY_bits',
      );
  late final _EVP_PKEY_bits =
      _EVP_PKEY_bitsPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_id(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_id(pkey);
  }

  late final _EVP_PKEY_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
        'EVP_PKEY_id',
      );
  late final _EVP_PKEY_id =
      _EVP_PKEY_idPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set1_RSA(ffi.Pointer<EVP_PKEY> pkey, ffi.Pointer<RSA> key) {
    return _EVP_PKEY_set1_RSA(pkey, key);
  }

  late final _EVP_PKEY_set1_RSAPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<RSA>)
        >
      >('EVP_PKEY_set1_RSA');
  late final _EVP_PKEY_set1_RSA =
      _EVP_PKEY_set1_RSAPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<RSA>)
      >();

  int EVP_PKEY_assign_RSA(ffi.Pointer<EVP_PKEY> pkey, ffi.Pointer<RSA> key) {
    return _EVP_PKEY_assign_RSA(pkey, key);
  }

  late final _EVP_PKEY_assign_RSAPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<RSA>)
        >
      >('EVP_PKEY_assign_RSA');
  late final _EVP_PKEY_assign_RSA =
      _EVP_PKEY_assign_RSAPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<RSA>)
      >();

  ffi.Pointer<RSA> EVP_PKEY_get0_RSA(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_get0_RSA(pkey);
  }

  late final _EVP_PKEY_get0_RSAPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<RSA> Function(ffi.Pointer<EVP_PKEY>)>
      >('EVP_PKEY_get0_RSA');
  late final _EVP_PKEY_get0_RSA =
      _EVP_PKEY_get0_RSAPtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<EVP_PKEY>)
      >();

  ffi.Pointer<RSA> EVP_PKEY_get1_RSA(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_get1_RSA(pkey);
  }

  late final _EVP_PKEY_get1_RSAPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<RSA> Function(ffi.Pointer<EVP_PKEY>)>
      >('EVP_PKEY_get1_RSA');
  late final _EVP_PKEY_get1_RSA =
      _EVP_PKEY_get1_RSAPtr.asFunction<
        ffi.Pointer<RSA> Function(ffi.Pointer<EVP_PKEY>)
      >();

  int EVP_PKEY_set1_DSA(ffi.Pointer<EVP_PKEY> pkey, ffi.Pointer<DSA> key) {
    return _EVP_PKEY_set1_DSA(pkey, key);
  }

  late final _EVP_PKEY_set1_DSAPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<DSA>)
        >
      >('EVP_PKEY_set1_DSA');
  late final _EVP_PKEY_set1_DSA =
      _EVP_PKEY_set1_DSAPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<DSA>)
      >();

  int EVP_PKEY_assign_DSA(ffi.Pointer<EVP_PKEY> pkey, ffi.Pointer<DSA> key) {
    return _EVP_PKEY_assign_DSA(pkey, key);
  }

  late final _EVP_PKEY_assign_DSAPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<DSA>)
        >
      >('EVP_PKEY_assign_DSA');
  late final _EVP_PKEY_assign_DSA =
      _EVP_PKEY_assign_DSAPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<DSA>)
      >();

  ffi.Pointer<DSA> EVP_PKEY_get0_DSA(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_get0_DSA(pkey);
  }

  late final _EVP_PKEY_get0_DSAPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<DSA> Function(ffi.Pointer<EVP_PKEY>)>
      >('EVP_PKEY_get0_DSA');
  late final _EVP_PKEY_get0_DSA =
      _EVP_PKEY_get0_DSAPtr.asFunction<
        ffi.Pointer<DSA> Function(ffi.Pointer<EVP_PKEY>)
      >();

  ffi.Pointer<DSA> EVP_PKEY_get1_DSA(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_get1_DSA(pkey);
  }

  late final _EVP_PKEY_get1_DSAPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<DSA> Function(ffi.Pointer<EVP_PKEY>)>
      >('EVP_PKEY_get1_DSA');
  late final _EVP_PKEY_get1_DSA =
      _EVP_PKEY_get1_DSAPtr.asFunction<
        ffi.Pointer<DSA> Function(ffi.Pointer<EVP_PKEY>)
      >();

  int EVP_PKEY_set1_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EVP_PKEY_set1_EC_KEY(pkey, key);
  }

  late final _EVP_PKEY_set1_EC_KEYPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EC_KEY>)
        >
      >('EVP_PKEY_set1_EC_KEY');
  late final _EVP_PKEY_set1_EC_KEY =
      _EVP_PKEY_set1_EC_KEYPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EC_KEY>)
      >();

  int EVP_PKEY_assign_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EVP_PKEY_assign_EC_KEY(pkey, key);
  }

  late final _EVP_PKEY_assign_EC_KEYPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EC_KEY>)
        >
      >('EVP_PKEY_assign_EC_KEY');
  late final _EVP_PKEY_assign_EC_KEY =
      _EVP_PKEY_assign_EC_KEYPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EC_KEY>)
      >();

  ffi.Pointer<EC_KEY> EVP_PKEY_get0_EC_KEY(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_get0_EC_KEY(pkey);
  }

  late final _EVP_PKEY_get0_EC_KEYPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<EC_KEY> Function(ffi.Pointer<EVP_PKEY>)>
      >('EVP_PKEY_get0_EC_KEY');
  late final _EVP_PKEY_get0_EC_KEY =
      _EVP_PKEY_get0_EC_KEYPtr.asFunction<
        ffi.Pointer<EC_KEY> Function(ffi.Pointer<EVP_PKEY>)
      >();

  ffi.Pointer<EC_KEY> EVP_PKEY_get1_EC_KEY(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_get1_EC_KEY(pkey);
  }

  late final _EVP_PKEY_get1_EC_KEYPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<EC_KEY> Function(ffi.Pointer<EVP_PKEY>)>
      >('EVP_PKEY_get1_EC_KEY');
  late final _EVP_PKEY_get1_EC_KEY =
      _EVP_PKEY_get1_EC_KEYPtr.asFunction<
        ffi.Pointer<EC_KEY> Function(ffi.Pointer<EVP_PKEY>)
      >();

  int EVP_PKEY_set1_DH(ffi.Pointer<EVP_PKEY> pkey, ffi.Pointer<DH> key) {
    return _EVP_PKEY_set1_DH(pkey, key);
  }

  late final _EVP_PKEY_set1_DHPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<DH>)
        >
      >('EVP_PKEY_set1_DH');
  late final _EVP_PKEY_set1_DH =
      _EVP_PKEY_set1_DHPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<DH>)
      >();

  int EVP_PKEY_assign_DH(ffi.Pointer<EVP_PKEY> pkey, ffi.Pointer<DH> key) {
    return _EVP_PKEY_assign_DH(pkey, key);
  }

  late final _EVP_PKEY_assign_DHPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<DH>)
        >
      >('EVP_PKEY_assign_DH');
  late final _EVP_PKEY_assign_DH =
      _EVP_PKEY_assign_DHPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<DH>)
      >();

  ffi.Pointer<DH> EVP_PKEY_get0_DH(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_get0_DH(pkey);
  }

  late final _EVP_PKEY_get0_DHPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<DH> Function(ffi.Pointer<EVP_PKEY>)>
      >('EVP_PKEY_get0_DH');
  late final _EVP_PKEY_get0_DH =
      _EVP_PKEY_get0_DHPtr.asFunction<
        ffi.Pointer<DH> Function(ffi.Pointer<EVP_PKEY>)
      >();

  ffi.Pointer<DH> EVP_PKEY_get1_DH(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_get1_DH(pkey);
  }

  late final _EVP_PKEY_get1_DHPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<DH> Function(ffi.Pointer<EVP_PKEY>)>
      >('EVP_PKEY_get1_DH');
  late final _EVP_PKEY_get1_DH =
      _EVP_PKEY_get1_DHPtr.asFunction<
        ffi.Pointer<DH> Function(ffi.Pointer<EVP_PKEY>)
      >();

  int EVP_PKEY_set_type(ffi.Pointer<EVP_PKEY> pkey, int type) {
    return _EVP_PKEY_set_type(pkey, type);
  }

  late final _EVP_PKEY_set_typePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int)>
      >('EVP_PKEY_set_type');
  late final _EVP_PKEY_set_type =
      _EVP_PKEY_set_typePtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, int)
      >();

  int EVP_PKEY_cmp_parameters(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<EVP_PKEY> b,
  ) {
    return _EVP_PKEY_cmp_parameters(a, b);
  }

  late final _EVP_PKEY_cmp_parametersPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)
        >
      >('EVP_PKEY_cmp_parameters');
  late final _EVP_PKEY_cmp_parameters =
      _EVP_PKEY_cmp_parametersPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)
      >();

  ffi.Pointer<EVP_PKEY> EVP_parse_public_key(ffi.Pointer<CBS> cbs) {
    return _EVP_parse_public_key(cbs);
  }

  late final _EVP_parse_public_keyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<CBS>)>
      >('EVP_parse_public_key');
  late final _EVP_parse_public_key =
      _EVP_parse_public_keyPtr.asFunction<
        ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<CBS>)
      >();

  int EVP_marshal_public_key(ffi.Pointer<CBB> cbb, ffi.Pointer<EVP_PKEY> key) {
    return _EVP_marshal_public_key(cbb, key);
  }

  late final _EVP_marshal_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<EVP_PKEY>)
        >
      >('EVP_marshal_public_key');
  late final _EVP_marshal_public_key =
      _EVP_marshal_public_keyPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<EVP_PKEY>)
      >();

  ffi.Pointer<EVP_PKEY> EVP_parse_private_key(ffi.Pointer<CBS> cbs) {
    return _EVP_parse_private_key(cbs);
  }

  late final _EVP_parse_private_keyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<CBS>)>
      >('EVP_parse_private_key');
  late final _EVP_parse_private_key =
      _EVP_parse_private_keyPtr.asFunction<
        ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<CBS>)
      >();

  int EVP_marshal_private_key(ffi.Pointer<CBB> cbb, ffi.Pointer<EVP_PKEY> key) {
    return _EVP_marshal_private_key(cbb, key);
  }

  late final _EVP_marshal_private_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CBB>, ffi.Pointer<EVP_PKEY>)
        >
      >('EVP_marshal_private_key');
  late final _EVP_marshal_private_key =
      _EVP_marshal_private_keyPtr.asFunction<
        int Function(ffi.Pointer<CBB>, ffi.Pointer<EVP_PKEY>)
      >();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_raw_private_key(
    int type,
    ffi.Pointer<ENGINE> unused,
    ffi.Pointer<ffi.Uint8> in1,
    int len,
  ) {
    return _EVP_PKEY_new_raw_private_key(type, unused, in1, len);
  }

  late final _EVP_PKEY_new_raw_private_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
            ffi.Int,
            ffi.Pointer<ENGINE>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PKEY_new_raw_private_key');
  late final _EVP_PKEY_new_raw_private_key =
      _EVP_PKEY_new_raw_private_keyPtr.asFunction<
        ffi.Pointer<EVP_PKEY> Function(
          int,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_raw_public_key(
    int type,
    ffi.Pointer<ENGINE> unused,
    ffi.Pointer<ffi.Uint8> in1,
    int len,
  ) {
    return _EVP_PKEY_new_raw_public_key(type, unused, in1, len);
  }

  late final _EVP_PKEY_new_raw_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
            ffi.Int,
            ffi.Pointer<ENGINE>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PKEY_new_raw_public_key');
  late final _EVP_PKEY_new_raw_public_key =
      _EVP_PKEY_new_raw_public_keyPtr.asFunction<
        ffi.Pointer<EVP_PKEY> Function(
          int,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_PKEY_get_raw_private_key(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
  ) {
    return _EVP_PKEY_get_raw_private_key(pkey, out, out_len);
  }

  late final _EVP_PKEY_get_raw_private_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('EVP_PKEY_get_raw_private_key');
  late final _EVP_PKEY_get_raw_private_key =
      _EVP_PKEY_get_raw_private_keyPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  int EVP_PKEY_get_raw_public_key(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
  ) {
    return _EVP_PKEY_get_raw_public_key(pkey, out, out_len);
  }

  late final _EVP_PKEY_get_raw_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('EVP_PKEY_get_raw_public_key');
  late final _EVP_PKEY_get_raw_public_key =
      _EVP_PKEY_get_raw_public_keyPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  int EVP_DigestSignInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_DigestSignInit(ctx, pctx, type, e, pkey);
  }

  late final _EVP_DigestSignInitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ENGINE>,
            ffi.Pointer<EVP_PKEY>,
          )
        >
      >('EVP_DigestSignInit');
  late final _EVP_DigestSignInit =
      _EVP_DigestSignInitPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<EVP_PKEY>,
        )
      >();

  int EVP_DigestSignUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _EVP_DigestSignUpdate(ctx, data, len);
  }

  late final _EVP_DigestSignUpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('EVP_DigestSignUpdate');
  late final _EVP_DigestSignUpdate =
      _EVP_DigestSignUpdatePtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, int)
      >();

  int EVP_DigestSignFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out_sig,
    ffi.Pointer<ffi.Size> out_sig_len,
  ) {
    return _EVP_DigestSignFinal(ctx, out_sig, out_sig_len);
  }

  late final _EVP_DigestSignFinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('EVP_DigestSignFinal');
  late final _EVP_DigestSignFinal =
      _EVP_DigestSignFinalPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  int EVP_DigestSign(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out_sig,
    ffi.Pointer<ffi.Size> out_sig_len,
    ffi.Pointer<ffi.Uint8> data,
    int data_len,
  ) {
    return _EVP_DigestSign(ctx, out_sig, out_sig_len, data, data_len);
  }

  late final _EVP_DigestSignPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_DigestSign');
  late final _EVP_DigestSign =
      _EVP_DigestSignPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_DigestVerifyInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_DigestVerifyInit(ctx, pctx, type, e, pkey);
  }

  late final _EVP_DigestVerifyInitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ENGINE>,
            ffi.Pointer<EVP_PKEY>,
          )
        >
      >('EVP_DigestVerifyInit');
  late final _EVP_DigestVerifyInit =
      _EVP_DigestVerifyInitPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<EVP_PKEY>,
        )
      >();

  int EVP_DigestVerifyUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _EVP_DigestVerifyUpdate(ctx, data, len);
  }

  late final _EVP_DigestVerifyUpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('EVP_DigestVerifyUpdate');
  late final _EVP_DigestVerifyUpdate =
      _EVP_DigestVerifyUpdatePtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, int)
      >();

  int EVP_DigestVerifyFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> sig,
    int sig_len,
  ) {
    return _EVP_DigestVerifyFinal(ctx, sig, sig_len);
  }

  late final _EVP_DigestVerifyFinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_DigestVerifyFinal');
  late final _EVP_DigestVerifyFinal =
      _EVP_DigestVerifyFinalPtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int EVP_DigestVerify(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> sig,
    int sig_len,
    ffi.Pointer<ffi.Uint8> data,
    int len,
  ) {
    return _EVP_DigestVerify(ctx, sig, sig_len, data, len);
  }

  late final _EVP_DigestVerifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_DigestVerify');
  late final _EVP_DigestVerify =
      _EVP_DigestVerifyPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_SignInit_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> impl,
  ) {
    return _EVP_SignInit_ex(ctx, type, impl);
  }

  late final _EVP_SignInit_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ENGINE>,
          )
        >
      >('EVP_SignInit_ex');
  late final _EVP_SignInit_ex =
      _EVP_SignInit_exPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
        )
      >();

  int EVP_SignInit(ffi.Pointer<EVP_MD_CTX> ctx, ffi.Pointer<EVP_MD> type) {
    return _EVP_SignInit(ctx, type);
  }

  late final _EVP_SignInitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)
        >
      >('EVP_SignInit');
  late final _EVP_SignInit =
      _EVP_SignInitPtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)
      >();

  int EVP_SignUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _EVP_SignUpdate(ctx, data, len);
  }

  late final _EVP_SignUpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('EVP_SignUpdate');
  late final _EVP_SignUpdate =
      _EVP_SignUpdatePtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, int)
      >();

  int EVP_SignFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> sig,
    ffi.Pointer<ffi.UnsignedInt> out_sig_len,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_SignFinal(ctx, sig, out_sig_len, pkey);
  }

  late final _EVP_SignFinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<EVP_PKEY>,
          )
        >
      >('EVP_SignFinal');
  late final _EVP_SignFinal =
      _EVP_SignFinalPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<EVP_PKEY>,
        )
      >();

  int EVP_VerifyInit_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> impl,
  ) {
    return _EVP_VerifyInit_ex(ctx, type, impl);
  }

  late final _EVP_VerifyInit_exPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<EVP_MD>,
            ffi.Pointer<ENGINE>,
          )
        >
      >('EVP_VerifyInit_ex');
  late final _EVP_VerifyInit_ex =
      _EVP_VerifyInit_exPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
        )
      >();

  int EVP_VerifyInit(ffi.Pointer<EVP_MD_CTX> ctx, ffi.Pointer<EVP_MD> type) {
    return _EVP_VerifyInit(ctx, type);
  }

  late final _EVP_VerifyInitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)
        >
      >('EVP_VerifyInit');
  late final _EVP_VerifyInit =
      _EVP_VerifyInitPtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)
      >();

  int EVP_VerifyUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _EVP_VerifyUpdate(ctx, data, len);
  }

  late final _EVP_VerifyUpdatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Void>,
            ffi.Size,
          )
        >
      >('EVP_VerifyUpdate');
  late final _EVP_VerifyUpdate =
      _EVP_VerifyUpdatePtr.asFunction<
        int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, int)
      >();

  int EVP_VerifyFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> sig,
    int sig_len,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_VerifyFinal(ctx, sig, sig_len, pkey);
  }

  late final _EVP_VerifyFinalPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_MD_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<EVP_PKEY>,
          )
        >
      >('EVP_VerifyFinal');
  late final _EVP_VerifyFinal =
      _EVP_VerifyFinalPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<EVP_PKEY>,
        )
      >();

  int EVP_PKEY_print_public(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_public(out, pkey, indent, pctx);
  }

  late final _EVP_PKEY_print_publicPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO>,
            ffi.Pointer<EVP_PKEY>,
            ffi.Int,
            ffi.Pointer<ASN1_PCTX>,
          )
        >
      >('EVP_PKEY_print_public');
  late final _EVP_PKEY_print_public =
      _EVP_PKEY_print_publicPtr.asFunction<
        int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<EVP_PKEY>,
          int,
          ffi.Pointer<ASN1_PCTX>,
        )
      >();

  int EVP_PKEY_print_private(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_private(out, pkey, indent, pctx);
  }

  late final _EVP_PKEY_print_privatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO>,
            ffi.Pointer<EVP_PKEY>,
            ffi.Int,
            ffi.Pointer<ASN1_PCTX>,
          )
        >
      >('EVP_PKEY_print_private');
  late final _EVP_PKEY_print_private =
      _EVP_PKEY_print_privatePtr.asFunction<
        int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<EVP_PKEY>,
          int,
          ffi.Pointer<ASN1_PCTX>,
        )
      >();

  int EVP_PKEY_print_params(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_params(out, pkey, indent, pctx);
  }

  late final _EVP_PKEY_print_paramsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<BIO>,
            ffi.Pointer<EVP_PKEY>,
            ffi.Int,
            ffi.Pointer<ASN1_PCTX>,
          )
        >
      >('EVP_PKEY_print_params');
  late final _EVP_PKEY_print_params =
      _EVP_PKEY_print_paramsPtr.asFunction<
        int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<EVP_PKEY>,
          int,
          ffi.Pointer<ASN1_PCTX>,
        )
      >();

  int PKCS5_PBKDF2_HMAC(
    ffi.Pointer<ffi.Char> password,
    int password_len,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_len,
    int iterations,
    ffi.Pointer<EVP_MD> digest,
    int key_len,
    ffi.Pointer<ffi.Uint8> out_key,
  ) {
    return _PKCS5_PBKDF2_HMAC(
      password,
      password_len,
      salt,
      salt_len,
      iterations,
      digest,
      key_len,
      out_key,
    );
  }

  late final _PKCS5_PBKDF2_HMACPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Uint32,
            ffi.Pointer<EVP_MD>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('PKCS5_PBKDF2_HMAC');
  late final _PKCS5_PBKDF2_HMAC =
      _PKCS5_PBKDF2_HMACPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<EVP_MD>,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int PKCS5_PBKDF2_HMAC_SHA1(
    ffi.Pointer<ffi.Char> password,
    int password_len,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_len,
    int iterations,
    int key_len,
    ffi.Pointer<ffi.Uint8> out_key,
  ) {
    return _PKCS5_PBKDF2_HMAC_SHA1(
      password,
      password_len,
      salt,
      salt_len,
      iterations,
      key_len,
      out_key,
    );
  }

  late final _PKCS5_PBKDF2_HMAC_SHA1Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Uint32,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
          )
        >
      >('PKCS5_PBKDF2_HMAC_SHA1');
  late final _PKCS5_PBKDF2_HMAC_SHA1 =
      _PKCS5_PBKDF2_HMAC_SHA1Ptr.asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
        )
      >();

  int EVP_PBE_scrypt(
    ffi.Pointer<ffi.Char> password,
    int password_len,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_len,
    int N,
    int r,
    int p,
    int max_mem,
    ffi.Pointer<ffi.Uint8> out_key,
    int key_len,
  ) {
    return _EVP_PBE_scrypt(
      password,
      password_len,
      salt,
      salt_len,
      N,
      r,
      p,
      max_mem,
      out_key,
      key_len,
    );
  }

  late final _EVP_PBE_scryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Uint64,
            ffi.Uint64,
            ffi.Uint64,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PBE_scrypt');
  late final _EVP_PBE_scrypt =
      _EVP_PBE_scryptPtr.asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_new(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ENGINE> e,
  ) {
    return _EVP_PKEY_CTX_new(pkey, e);
  }

  late final _EVP_PKEY_CTX_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
            ffi.Pointer<EVP_PKEY>,
            ffi.Pointer<ENGINE>,
          )
        >
      >('EVP_PKEY_CTX_new');
  late final _EVP_PKEY_CTX_new =
      _EVP_PKEY_CTX_newPtr.asFunction<
        ffi.Pointer<EVP_PKEY_CTX> Function(
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<ENGINE>,
        )
      >();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_new_id(int id, ffi.Pointer<ENGINE> e) {
    return _EVP_PKEY_CTX_new_id(id, e);
  }

  late final _EVP_PKEY_CTX_new_idPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(ffi.Int, ffi.Pointer<ENGINE>)
        >
      >('EVP_PKEY_CTX_new_id');
  late final _EVP_PKEY_CTX_new_id =
      _EVP_PKEY_CTX_new_idPtr.asFunction<
        ffi.Pointer<EVP_PKEY_CTX> Function(int, ffi.Pointer<ENGINE>)
      >();

  void EVP_PKEY_CTX_free(ffi.Pointer<EVP_PKEY_CTX> ctx) {
    return _EVP_PKEY_CTX_free(ctx);
  }

  late final _EVP_PKEY_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
        'EVP_PKEY_CTX_free',
      );
  late final _EVP_PKEY_CTX_free =
      _EVP_PKEY_CTX_freePtr.asFunction<
        void Function(ffi.Pointer<EVP_PKEY_CTX>)
      >();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_dup(ffi.Pointer<EVP_PKEY_CTX> ctx) {
    return _EVP_PKEY_CTX_dup(ctx);
  }

  late final _EVP_PKEY_CTX_dupPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(ffi.Pointer<EVP_PKEY_CTX>)
        >
      >('EVP_PKEY_CTX_dup');
  late final _EVP_PKEY_CTX_dup =
      _EVP_PKEY_CTX_dupPtr.asFunction<
        ffi.Pointer<EVP_PKEY_CTX> Function(ffi.Pointer<EVP_PKEY_CTX>)
      >();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_CTX_get0_pkey(ffi.Pointer<EVP_PKEY_CTX> ctx) {
    return _EVP_PKEY_CTX_get0_pkey(ctx);
  }

  late final _EVP_PKEY_CTX_get0_pkeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<EVP_PKEY_CTX>)
        >
      >('EVP_PKEY_CTX_get0_pkey');
  late final _EVP_PKEY_CTX_get0_pkey =
      _EVP_PKEY_CTX_get0_pkeyPtr.asFunction<
        ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<EVP_PKEY_CTX>)
      >();

  int EVP_PKEY_sign_init(ffi.Pointer<EVP_PKEY_CTX> ctx) {
    return _EVP_PKEY_sign_init(ctx);
  }

  late final _EVP_PKEY_sign_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
        'EVP_PKEY_sign_init',
      );
  late final _EVP_PKEY_sign_init =
      _EVP_PKEY_sign_initPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>)
      >();

  int EVP_PKEY_sign(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> sig,
    ffi.Pointer<ffi.Size> sig_len,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
  ) {
    return _EVP_PKEY_sign(ctx, sig, sig_len, digest, digest_len);
  }

  late final _EVP_PKEY_signPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PKEY_sign');
  late final _EVP_PKEY_sign =
      _EVP_PKEY_signPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_PKEY_verify_init(ffi.Pointer<EVP_PKEY_CTX> ctx) {
    return _EVP_PKEY_verify_init(ctx);
  }

  late final _EVP_PKEY_verify_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
        'EVP_PKEY_verify_init',
      );
  late final _EVP_PKEY_verify_init =
      _EVP_PKEY_verify_initPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>)
      >();

  int EVP_PKEY_verify(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> sig,
    int sig_len,
    ffi.Pointer<ffi.Uint8> digest,
    int digest_len,
  ) {
    return _EVP_PKEY_verify(ctx, sig, sig_len, digest, digest_len);
  }

  late final _EVP_PKEY_verifyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PKEY_verify');
  late final _EVP_PKEY_verify =
      _EVP_PKEY_verifyPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_PKEY_encrypt_init(ffi.Pointer<EVP_PKEY_CTX> ctx) {
    return _EVP_PKEY_encrypt_init(ctx);
  }

  late final _EVP_PKEY_encrypt_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
        'EVP_PKEY_encrypt_init',
      );
  late final _EVP_PKEY_encrypt_init =
      _EVP_PKEY_encrypt_initPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>)
      >();

  int EVP_PKEY_encrypt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _EVP_PKEY_encrypt(ctx, out, out_len, in1, in_len);
  }

  late final _EVP_PKEY_encryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PKEY_encrypt');
  late final _EVP_PKEY_encrypt =
      _EVP_PKEY_encryptPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_PKEY_decrypt_init(ffi.Pointer<EVP_PKEY_CTX> ctx) {
    return _EVP_PKEY_decrypt_init(ctx);
  }

  late final _EVP_PKEY_decrypt_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
        'EVP_PKEY_decrypt_init',
      );
  late final _EVP_PKEY_decrypt_init =
      _EVP_PKEY_decrypt_initPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>)
      >();

  int EVP_PKEY_decrypt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
  ) {
    return _EVP_PKEY_decrypt(ctx, out, out_len, in1, in_len);
  }

  late final _EVP_PKEY_decryptPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PKEY_decrypt');
  late final _EVP_PKEY_decrypt =
      _EVP_PKEY_decryptPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_PKEY_verify_recover_init(ffi.Pointer<EVP_PKEY_CTX> ctx) {
    return _EVP_PKEY_verify_recover_init(ctx);
  }

  late final _EVP_PKEY_verify_recover_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
        'EVP_PKEY_verify_recover_init',
      );
  late final _EVP_PKEY_verify_recover_init =
      _EVP_PKEY_verify_recover_initPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>)
      >();

  int EVP_PKEY_verify_recover(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    ffi.Pointer<ffi.Uint8> sig,
    int siglen,
  ) {
    return _EVP_PKEY_verify_recover(ctx, out, out_len, sig, siglen);
  }

  late final _EVP_PKEY_verify_recoverPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PKEY_verify_recover');
  late final _EVP_PKEY_verify_recover =
      _EVP_PKEY_verify_recoverPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_PKEY_derive_init(ffi.Pointer<EVP_PKEY_CTX> ctx) {
    return _EVP_PKEY_derive_init(ctx);
  }

  late final _EVP_PKEY_derive_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
        'EVP_PKEY_derive_init',
      );
  late final _EVP_PKEY_derive_init =
      _EVP_PKEY_derive_initPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>)
      >();

  int EVP_PKEY_derive_set_peer(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_PKEY> peer,
  ) {
    return _EVP_PKEY_derive_set_peer(ctx, peer);
  }

  late final _EVP_PKEY_derive_set_peerPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>)
        >
      >('EVP_PKEY_derive_set_peer');
  late final _EVP_PKEY_derive_set_peer =
      _EVP_PKEY_derive_set_peerPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>)
      >();

  int EVP_PKEY_derive(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> key,
    ffi.Pointer<ffi.Size> out_key_len,
  ) {
    return _EVP_PKEY_derive(ctx, key, out_key_len);
  }

  late final _EVP_PKEY_derivePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('EVP_PKEY_derive');
  late final _EVP_PKEY_derive =
      _EVP_PKEY_derivePtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  int EVP_PKEY_keygen_init(ffi.Pointer<EVP_PKEY_CTX> ctx) {
    return _EVP_PKEY_keygen_init(ctx);
  }

  late final _EVP_PKEY_keygen_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
        'EVP_PKEY_keygen_init',
      );
  late final _EVP_PKEY_keygen_init =
      _EVP_PKEY_keygen_initPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>)
      >();

  int EVP_PKEY_keygen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> out_pkey,
  ) {
    return _EVP_PKEY_keygen(ctx, out_pkey);
  }

  late final _EVP_PKEY_keygenPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          )
        >
      >('EVP_PKEY_keygen');
  late final _EVP_PKEY_keygen =
      _EVP_PKEY_keygenPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
        )
      >();

  int EVP_PKEY_paramgen_init(ffi.Pointer<EVP_PKEY_CTX> ctx) {
    return _EVP_PKEY_paramgen_init(ctx);
  }

  late final _EVP_PKEY_paramgen_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
        'EVP_PKEY_paramgen_init',
      );
  late final _EVP_PKEY_paramgen_init =
      _EVP_PKEY_paramgen_initPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>)
      >();

  int EVP_PKEY_paramgen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> out_pkey,
  ) {
    return _EVP_PKEY_paramgen(ctx, out_pkey);
  }

  late final _EVP_PKEY_paramgenPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          )
        >
      >('EVP_PKEY_paramgen');
  late final _EVP_PKEY_paramgen =
      _EVP_PKEY_paramgenPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
        )
      >();

  int EVP_PKEY_CTX_set_signature_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_PKEY_CTX_set_signature_md(ctx, md);
  }

  late final _EVP_PKEY_CTX_set_signature_mdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)
        >
      >('EVP_PKEY_CTX_set_signature_md');
  late final _EVP_PKEY_CTX_set_signature_md =
      _EVP_PKEY_CTX_set_signature_mdPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)
      >();

  int EVP_PKEY_CTX_get_signature_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_MD>> out_md,
  ) {
    return _EVP_PKEY_CTX_get_signature_md(ctx, out_md);
  }

  late final _EVP_PKEY_CTX_get_signature_mdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Pointer<EVP_MD>>,
          )
        >
      >('EVP_PKEY_CTX_get_signature_md');
  late final _EVP_PKEY_CTX_get_signature_md =
      _EVP_PKEY_CTX_get_signature_mdPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_MD>>,
        )
      >();

  int EVP_PKEY_CTX_set_rsa_padding(ffi.Pointer<EVP_PKEY_CTX> ctx, int padding) {
    return _EVP_PKEY_CTX_set_rsa_padding(ctx, padding);
  }

  late final _EVP_PKEY_CTX_set_rsa_paddingPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int)>
      >('EVP_PKEY_CTX_set_rsa_padding');
  late final _EVP_PKEY_CTX_set_rsa_padding =
      _EVP_PKEY_CTX_set_rsa_paddingPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, int)
      >();

  int EVP_PKEY_CTX_get_rsa_padding(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Int> out_padding,
  ) {
    return _EVP_PKEY_CTX_get_rsa_padding(ctx, out_padding);
  }

  late final _EVP_PKEY_CTX_get_rsa_paddingPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Int>)
        >
      >('EVP_PKEY_CTX_get_rsa_padding');
  late final _EVP_PKEY_CTX_get_rsa_padding =
      _EVP_PKEY_CTX_get_rsa_paddingPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Int>)
      >();

  int EVP_PKEY_CTX_set_rsa_pss_saltlen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int salt_len,
  ) {
    return _EVP_PKEY_CTX_set_rsa_pss_saltlen(ctx, salt_len);
  }

  late final _EVP_PKEY_CTX_set_rsa_pss_saltlenPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int)>
      >('EVP_PKEY_CTX_set_rsa_pss_saltlen');
  late final _EVP_PKEY_CTX_set_rsa_pss_saltlen =
      _EVP_PKEY_CTX_set_rsa_pss_saltlenPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, int)
      >();

  int EVP_PKEY_CTX_get_rsa_pss_saltlen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Int> out_salt_len,
  ) {
    return _EVP_PKEY_CTX_get_rsa_pss_saltlen(ctx, out_salt_len);
  }

  late final _EVP_PKEY_CTX_get_rsa_pss_saltlenPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Int>)
        >
      >('EVP_PKEY_CTX_get_rsa_pss_saltlen');
  late final _EVP_PKEY_CTX_get_rsa_pss_saltlen =
      _EVP_PKEY_CTX_get_rsa_pss_saltlenPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Int>)
      >();

  int EVP_PKEY_CTX_set_rsa_keygen_bits(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int bits,
  ) {
    return _EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, bits);
  }

  late final _EVP_PKEY_CTX_set_rsa_keygen_bitsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int)>
      >('EVP_PKEY_CTX_set_rsa_keygen_bits');
  late final _EVP_PKEY_CTX_set_rsa_keygen_bits =
      _EVP_PKEY_CTX_set_rsa_keygen_bitsPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, int)
      >();

  int EVP_PKEY_CTX_set_rsa_keygen_pubexp(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<BIGNUM> e,
  ) {
    return _EVP_PKEY_CTX_set_rsa_keygen_pubexp(ctx, e);
  }

  late final _EVP_PKEY_CTX_set_rsa_keygen_pubexpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<BIGNUM>)
        >
      >('EVP_PKEY_CTX_set_rsa_keygen_pubexp');
  late final _EVP_PKEY_CTX_set_rsa_keygen_pubexp =
      _EVP_PKEY_CTX_set_rsa_keygen_pubexpPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<BIGNUM>)
      >();

  int EVP_PKEY_CTX_set_rsa_oaep_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_PKEY_CTX_set_rsa_oaep_md(ctx, md);
  }

  late final _EVP_PKEY_CTX_set_rsa_oaep_mdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)
        >
      >('EVP_PKEY_CTX_set_rsa_oaep_md');
  late final _EVP_PKEY_CTX_set_rsa_oaep_md =
      _EVP_PKEY_CTX_set_rsa_oaep_mdPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)
      >();

  int EVP_PKEY_CTX_get_rsa_oaep_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_MD>> out_md,
  ) {
    return _EVP_PKEY_CTX_get_rsa_oaep_md(ctx, out_md);
  }

  late final _EVP_PKEY_CTX_get_rsa_oaep_mdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Pointer<EVP_MD>>,
          )
        >
      >('EVP_PKEY_CTX_get_rsa_oaep_md');
  late final _EVP_PKEY_CTX_get_rsa_oaep_md =
      _EVP_PKEY_CTX_get_rsa_oaep_mdPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_MD>>,
        )
      >();

  int EVP_PKEY_CTX_set_rsa_mgf1_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_PKEY_CTX_set_rsa_mgf1_md(ctx, md);
  }

  late final _EVP_PKEY_CTX_set_rsa_mgf1_mdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)
        >
      >('EVP_PKEY_CTX_set_rsa_mgf1_md');
  late final _EVP_PKEY_CTX_set_rsa_mgf1_md =
      _EVP_PKEY_CTX_set_rsa_mgf1_mdPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)
      >();

  int EVP_PKEY_CTX_get_rsa_mgf1_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_MD>> out_md,
  ) {
    return _EVP_PKEY_CTX_get_rsa_mgf1_md(ctx, out_md);
  }

  late final _EVP_PKEY_CTX_get_rsa_mgf1_mdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Pointer<EVP_MD>>,
          )
        >
      >('EVP_PKEY_CTX_get_rsa_mgf1_md');
  late final _EVP_PKEY_CTX_get_rsa_mgf1_md =
      _EVP_PKEY_CTX_get_rsa_mgf1_mdPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_MD>>,
        )
      >();

  int EVP_PKEY_CTX_set0_rsa_oaep_label(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> label,
    int label_len,
  ) {
    return _EVP_PKEY_CTX_set0_rsa_oaep_label(ctx, label, label_len);
  }

  late final _EVP_PKEY_CTX_set0_rsa_oaep_labelPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PKEY_CTX_set0_rsa_oaep_label');
  late final _EVP_PKEY_CTX_set0_rsa_oaep_label =
      _EVP_PKEY_CTX_set0_rsa_oaep_labelPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int EVP_PKEY_CTX_get0_rsa_oaep_label(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_label,
  ) {
    return _EVP_PKEY_CTX_get0_rsa_oaep_label(ctx, out_label);
  }

  late final _EVP_PKEY_CTX_get0_rsa_oaep_labelPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('EVP_PKEY_CTX_get0_rsa_oaep_label');
  late final _EVP_PKEY_CTX_get0_rsa_oaep_label =
      _EVP_PKEY_CTX_get0_rsa_oaep_labelPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_PKEY_CTX>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
        )
      >();

  int EVP_PKEY_CTX_set_ec_paramgen_curve_nid(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int nid,
  ) {
    return _EVP_PKEY_CTX_set_ec_paramgen_curve_nid(ctx, nid);
  }

  late final _EVP_PKEY_CTX_set_ec_paramgen_curve_nidPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int)>
      >('EVP_PKEY_CTX_set_ec_paramgen_curve_nid');
  late final _EVP_PKEY_CTX_set_ec_paramgen_curve_nid =
      _EVP_PKEY_CTX_set_ec_paramgen_curve_nidPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, int)
      >();

  int EVP_PKEY_CTX_set_dh_pad(ffi.Pointer<EVP_PKEY_CTX> ctx, int pad) {
    return _EVP_PKEY_CTX_set_dh_pad(ctx, pad);
  }

  late final _EVP_PKEY_CTX_set_dh_padPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int)>
      >('EVP_PKEY_CTX_set_dh_pad');
  late final _EVP_PKEY_CTX_set_dh_pad =
      _EVP_PKEY_CTX_set_dh_padPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, int)
      >();

  ffi.Pointer<ffi.Void> EVP_PKEY_get0(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_get0(pkey);
  }

  late final _EVP_PKEY_get0Ptr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_PKEY>)
        >
      >('EVP_PKEY_get0');
  late final _EVP_PKEY_get0 =
      _EVP_PKEY_get0Ptr.asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_PKEY>)
      >();

  void OpenSSL_add_all_algorithms() {
    return _OpenSSL_add_all_algorithms();
  }

  late final _OpenSSL_add_all_algorithmsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'OpenSSL_add_all_algorithms',
      );
  late final _OpenSSL_add_all_algorithms =
      _OpenSSL_add_all_algorithmsPtr.asFunction<void Function()>();

  void OPENSSL_add_all_algorithms_conf() {
    return _OPENSSL_add_all_algorithms_conf();
  }

  late final _OPENSSL_add_all_algorithms_confPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'OPENSSL_add_all_algorithms_conf',
      );
  late final _OPENSSL_add_all_algorithms_conf =
      _OPENSSL_add_all_algorithms_confPtr.asFunction<void Function()>();

  void OpenSSL_add_all_ciphers() {
    return _OpenSSL_add_all_ciphers();
  }

  late final _OpenSSL_add_all_ciphersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'OpenSSL_add_all_ciphers',
      );
  late final _OpenSSL_add_all_ciphers =
      _OpenSSL_add_all_ciphersPtr.asFunction<void Function()>();

  void OpenSSL_add_all_digests() {
    return _OpenSSL_add_all_digests();
  }

  late final _OpenSSL_add_all_digestsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
        'OpenSSL_add_all_digests',
      );
  late final _OpenSSL_add_all_digests =
      _OpenSSL_add_all_digestsPtr.asFunction<void Function()>();

  void EVP_cleanup() {
    return _EVP_cleanup();
  }

  late final _EVP_cleanupPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>(
    'EVP_cleanup',
  );
  late final _EVP_cleanup = _EVP_cleanupPtr.asFunction<void Function()>();

  void EVP_CIPHER_do_all_sorted(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<EVP_CIPHER> cipher,
          ffi.Pointer<ffi.Char> name,
          ffi.Pointer<ffi.Char> unused,
          ffi.Pointer<ffi.Void> arg,
        )
      >
    >
    callback,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_CIPHER_do_all_sorted(callback, arg);
  }

  late final _EVP_CIPHER_do_all_sortedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(
                  ffi.Pointer<EVP_CIPHER> cipher,
                  ffi.Pointer<ffi.Char> name,
                  ffi.Pointer<ffi.Char> unused,
                  ffi.Pointer<ffi.Void> arg,
                )
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('EVP_CIPHER_do_all_sorted');
  late final _EVP_CIPHER_do_all_sorted =
      _EVP_CIPHER_do_all_sortedPtr.asFunction<
        void Function(
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(
                ffi.Pointer<EVP_CIPHER> cipher,
                ffi.Pointer<ffi.Char> name,
                ffi.Pointer<ffi.Char> unused,
                ffi.Pointer<ffi.Void> arg,
              )
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void EVP_MD_do_all_sorted(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<EVP_MD> cipher,
          ffi.Pointer<ffi.Char> name,
          ffi.Pointer<ffi.Char> unused,
          ffi.Pointer<ffi.Void> arg,
        )
      >
    >
    callback,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_MD_do_all_sorted(callback, arg);
  }

  late final _EVP_MD_do_all_sortedPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(
                  ffi.Pointer<EVP_MD> cipher,
                  ffi.Pointer<ffi.Char> name,
                  ffi.Pointer<ffi.Char> unused,
                  ffi.Pointer<ffi.Void> arg,
                )
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('EVP_MD_do_all_sorted');
  late final _EVP_MD_do_all_sorted =
      _EVP_MD_do_all_sortedPtr.asFunction<
        void Function(
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(
                ffi.Pointer<EVP_MD> cipher,
                ffi.Pointer<ffi.Char> name,
                ffi.Pointer<ffi.Char> unused,
                ffi.Pointer<ffi.Void> arg,
              )
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void EVP_MD_do_all(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<EVP_MD> cipher,
          ffi.Pointer<ffi.Char> name,
          ffi.Pointer<ffi.Char> unused,
          ffi.Pointer<ffi.Void> arg,
        )
      >
    >
    callback,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_MD_do_all(callback, arg);
  }

  late final _EVP_MD_do_allPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(
                  ffi.Pointer<EVP_MD> cipher,
                  ffi.Pointer<ffi.Char> name,
                  ffi.Pointer<ffi.Char> unused,
                  ffi.Pointer<ffi.Void> arg,
                )
              >
            >,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('EVP_MD_do_all');
  late final _EVP_MD_do_all =
      _EVP_MD_do_allPtr.asFunction<
        void Function(
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(
                ffi.Pointer<EVP_MD> cipher,
                ffi.Pointer<ffi.Char> name,
                ffi.Pointer<ffi.Char> unused,
                ffi.Pointer<ffi.Void> arg,
              )
            >
          >,
          ffi.Pointer<ffi.Void>,
        )
      >();

  int i2d_PrivateKey(
    ffi.Pointer<EVP_PKEY> key,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_PrivateKey(key, outp);
  }

  late final _i2d_PrivateKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_PrivateKey');
  late final _i2d_PrivateKey = _i2d_PrivateKeyPtr
      .asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  int i2d_PublicKey(
    ffi.Pointer<EVP_PKEY> key,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_PublicKey(key, outp);
  }

  late final _i2d_PublicKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_PublicKey');
  late final _i2d_PublicKey = _i2d_PublicKeyPtr
      .asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  ffi.Pointer<EVP_PKEY> d2i_PrivateKey(
    int type,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_PrivateKey(type, out, inp, len);
  }

  late final _d2i_PrivateKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
            ffi.Int,
            ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_PrivateKey');
  late final _d2i_PrivateKey = _d2i_PrivateKeyPtr
      .asFunction<
        ffi.Pointer<EVP_PKEY> Function(
          int,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  ffi.Pointer<EVP_PKEY> d2i_AutoPrivateKey(
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_AutoPrivateKey(out, inp, len);
  }

  late final _d2i_AutoPrivateKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
            ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_AutoPrivateKey');
  late final _d2i_AutoPrivateKey = _d2i_AutoPrivateKeyPtr
      .asFunction<
        ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  ffi.Pointer<EVP_PKEY> d2i_PublicKey(
    int type,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_PublicKey(type, out, inp, len);
  }

  late final _d2i_PublicKeyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
            ffi.Int,
            ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_PublicKey');
  late final _d2i_PublicKey = _d2i_PublicKeyPtr
      .asFunction<
        ffi.Pointer<EVP_PKEY> Function(
          int,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  int EVP_PKEY_CTX_set_ec_param_enc(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int encoding,
  ) {
    return _EVP_PKEY_CTX_set_ec_param_enc(ctx, encoding);
  }

  late final _EVP_PKEY_CTX_set_ec_param_encPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int)>
      >('EVP_PKEY_CTX_set_ec_param_enc');
  late final _EVP_PKEY_CTX_set_ec_param_enc =
      _EVP_PKEY_CTX_set_ec_param_encPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, int)
      >();

  int EVP_PKEY_set1_tls_encodedpoint(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Uint8> in1,
    int len,
  ) {
    return _EVP_PKEY_set1_tls_encodedpoint(pkey, in1, len);
  }

  late final _EVP_PKEY_set1_tls_encodedpointPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PKEY_set1_tls_encodedpoint');
  late final _EVP_PKEY_set1_tls_encodedpoint =
      _EVP_PKEY_set1_tls_encodedpointPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int EVP_PKEY_get1_tls_encodedpoint(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_ptr,
  ) {
    return _EVP_PKEY_get1_tls_encodedpoint(pkey, out_ptr);
  }

  late final _EVP_PKEY_get1_tls_encodedpointPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<EVP_PKEY>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('EVP_PKEY_get1_tls_encodedpoint');
  late final _EVP_PKEY_get1_tls_encodedpoint =
      _EVP_PKEY_get1_tls_encodedpointPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  int EVP_PKEY_base_id(ffi.Pointer<EVP_PKEY> pkey) {
    return _EVP_PKEY_base_id(pkey);
  }

  late final _EVP_PKEY_base_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
        'EVP_PKEY_base_id',
      );
  late final _EVP_PKEY_base_id =
      _EVP_PKEY_base_idPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_CTX_set_rsa_pss_keygen_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_PKEY_CTX_set_rsa_pss_keygen_md(ctx, md);
  }

  late final _EVP_PKEY_CTX_set_rsa_pss_keygen_mdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)
        >
      >('EVP_PKEY_CTX_set_rsa_pss_keygen_md');
  late final _EVP_PKEY_CTX_set_rsa_pss_keygen_md =
      _EVP_PKEY_CTX_set_rsa_pss_keygen_mdPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)
      >();

  int EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int salt_len,
  ) {
    return _EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(ctx, salt_len);
  }

  late final _EVP_PKEY_CTX_set_rsa_pss_keygen_saltlenPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int)>
      >('EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen');
  late final _EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen =
      _EVP_PKEY_CTX_set_rsa_pss_keygen_saltlenPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, int)
      >();

  int EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(ctx, md);
  }

  late final _EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_mdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)
        >
      >('EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md');
  late final _EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md =
      _EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_mdPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)
      >();

  int i2d_PUBKEY(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_PUBKEY(pkey, outp);
  }

  late final _i2d_PUBKEYPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_PUBKEY');
  late final _i2d_PUBKEY = _i2d_PUBKEYPtr
      .asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  ffi.Pointer<EVP_PKEY> d2i_PUBKEY(
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_PUBKEY(out, inp, len);
  }

  late final _d2i_PUBKEYPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
            ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_PUBKEY');
  late final _d2i_PUBKEY = _d2i_PUBKEYPtr
      .asFunction<
        ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  int i2d_RSA_PUBKEY(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_RSA_PUBKEY(rsa, outp);
  }

  late final _i2d_RSA_PUBKEYPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<RSA>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_RSA_PUBKEY');
  late final _i2d_RSA_PUBKEY = _i2d_RSA_PUBKEYPtr
      .asFunction<
        int Function(ffi.Pointer<RSA>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  ffi.Pointer<RSA> d2i_RSA_PUBKEY(
    ffi.Pointer<ffi.Pointer<RSA>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_RSA_PUBKEY(out, inp, len);
  }

  late final _d2i_RSA_PUBKEYPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
            ffi.Pointer<ffi.Pointer<RSA>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_RSA_PUBKEY');
  late final _d2i_RSA_PUBKEY = _d2i_RSA_PUBKEYPtr
      .asFunction<
        ffi.Pointer<RSA> Function(
          ffi.Pointer<ffi.Pointer<RSA>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  int i2d_DSA_PUBKEY(
    ffi.Pointer<DSA> dsa,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_DSA_PUBKEY(dsa, outp);
  }

  late final _i2d_DSA_PUBKEYPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<DSA>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_DSA_PUBKEY');
  late final _i2d_DSA_PUBKEY = _i2d_DSA_PUBKEYPtr
      .asFunction<
        int Function(ffi.Pointer<DSA>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  ffi.Pointer<DSA> d2i_DSA_PUBKEY(
    ffi.Pointer<ffi.Pointer<DSA>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_DSA_PUBKEY(out, inp, len);
  }

  late final _d2i_DSA_PUBKEYPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
            ffi.Pointer<ffi.Pointer<DSA>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_DSA_PUBKEY');
  late final _d2i_DSA_PUBKEY = _d2i_DSA_PUBKEYPtr
      .asFunction<
        ffi.Pointer<DSA> Function(
          ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  int i2d_EC_PUBKEY(
    ffi.Pointer<EC_KEY> ec_key,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outp,
  ) {
    return _i2d_EC_PUBKEY(ec_key, outp);
  }

  late final _i2d_EC_PUBKEYPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EC_KEY>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          )
        >
      >('i2d_EC_PUBKEY');
  late final _i2d_EC_PUBKEY = _i2d_EC_PUBKEYPtr
      .asFunction<
        int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
      >();

  ffi.Pointer<EC_KEY> d2i_EC_PUBKEY(
    ffi.Pointer<ffi.Pointer<EC_KEY>> out,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> inp,
    int len,
  ) {
    return _d2i_EC_PUBKEY(out, inp, len);
  }

  late final _d2i_EC_PUBKEYPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
            ffi.Pointer<ffi.Pointer<EC_KEY>>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Long,
          )
        >
      >('d2i_EC_PUBKEY');
  late final _d2i_EC_PUBKEY = _d2i_EC_PUBKEYPtr
      .asFunction<
        ffi.Pointer<EC_KEY> Function(
          ffi.Pointer<ffi.Pointer<EC_KEY>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          int,
        )
      >();

  int EVP_PKEY_CTX_set_dsa_paramgen_bits(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int nbits,
  ) {
    return _EVP_PKEY_CTX_set_dsa_paramgen_bits(ctx, nbits);
  }

  late final _EVP_PKEY_CTX_set_dsa_paramgen_bitsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int)>
      >('EVP_PKEY_CTX_set_dsa_paramgen_bits');
  late final _EVP_PKEY_CTX_set_dsa_paramgen_bits =
      _EVP_PKEY_CTX_set_dsa_paramgen_bitsPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, int)
      >();

  int EVP_PKEY_CTX_set_dsa_paramgen_q_bits(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int qbits,
  ) {
    return _EVP_PKEY_CTX_set_dsa_paramgen_q_bits(ctx, qbits);
  }

  late final _EVP_PKEY_CTX_set_dsa_paramgen_q_bitsPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int)>
      >('EVP_PKEY_CTX_set_dsa_paramgen_q_bits');
  late final _EVP_PKEY_CTX_set_dsa_paramgen_q_bits =
      _EVP_PKEY_CTX_set_dsa_paramgen_q_bitsPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, int)
      >();

  int EVP_PKEY_assign(
    ffi.Pointer<EVP_PKEY> pkey,
    int type,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _EVP_PKEY_assign(pkey, type, key);
  }

  late final _EVP_PKEY_assignPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY>,
            ffi.Int,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('EVP_PKEY_assign');
  late final _EVP_PKEY_assign =
      _EVP_PKEY_assignPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY>, int, ffi.Pointer<ffi.Void>)
      >();

  int EVP_PKEY_type(int nid) {
    return _EVP_PKEY_type(nid);
  }

  late final _EVP_PKEY_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('EVP_PKEY_type');
  late final _EVP_PKEY_type = _EVP_PKEY_typePtr.asFunction<int Function(int)>();

  ffi.Pointer<EVP_HPKE_KEM> EVP_hpke_x25519_hkdf_sha256() {
    return _EVP_hpke_x25519_hkdf_sha256();
  }

  late final _EVP_hpke_x25519_hkdf_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_HPKE_KEM> Function()>>(
        'EVP_hpke_x25519_hkdf_sha256',
      );
  late final _EVP_hpke_x25519_hkdf_sha256 =
      _EVP_hpke_x25519_hkdf_sha256Ptr.asFunction<
        ffi.Pointer<EVP_HPKE_KEM> Function()
      >();

  ffi.Pointer<EVP_HPKE_KEM> EVP_hpke_p256_hkdf_sha256() {
    return _EVP_hpke_p256_hkdf_sha256();
  }

  late final _EVP_hpke_p256_hkdf_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_HPKE_KEM> Function()>>(
        'EVP_hpke_p256_hkdf_sha256',
      );
  late final _EVP_hpke_p256_hkdf_sha256 =
      _EVP_hpke_p256_hkdf_sha256Ptr.asFunction<
        ffi.Pointer<EVP_HPKE_KEM> Function()
      >();

  int EVP_HPKE_KEM_id(ffi.Pointer<EVP_HPKE_KEM> kem) {
    return _EVP_HPKE_KEM_id(kem);
  }

  late final _EVP_HPKE_KEM_idPtr =
      _lookup<
        ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<EVP_HPKE_KEM>)>
      >('EVP_HPKE_KEM_id');
  late final _EVP_HPKE_KEM_id =
      _EVP_HPKE_KEM_idPtr.asFunction<int Function(ffi.Pointer<EVP_HPKE_KEM>)>();

  int EVP_HPKE_KEM_public_key_len(ffi.Pointer<EVP_HPKE_KEM> kem) {
    return _EVP_HPKE_KEM_public_key_len(kem);
  }

  late final _EVP_HPKE_KEM_public_key_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_HPKE_KEM>)>>(
        'EVP_HPKE_KEM_public_key_len',
      );
  late final _EVP_HPKE_KEM_public_key_len =
      _EVP_HPKE_KEM_public_key_lenPtr.asFunction<
        int Function(ffi.Pointer<EVP_HPKE_KEM>)
      >();

  int EVP_HPKE_KEM_private_key_len(ffi.Pointer<EVP_HPKE_KEM> kem) {
    return _EVP_HPKE_KEM_private_key_len(kem);
  }

  late final _EVP_HPKE_KEM_private_key_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_HPKE_KEM>)>>(
        'EVP_HPKE_KEM_private_key_len',
      );
  late final _EVP_HPKE_KEM_private_key_len =
      _EVP_HPKE_KEM_private_key_lenPtr.asFunction<
        int Function(ffi.Pointer<EVP_HPKE_KEM>)
      >();

  int EVP_HPKE_KEM_enc_len(ffi.Pointer<EVP_HPKE_KEM> kem) {
    return _EVP_HPKE_KEM_enc_len(kem);
  }

  late final _EVP_HPKE_KEM_enc_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_HPKE_KEM>)>>(
        'EVP_HPKE_KEM_enc_len',
      );
  late final _EVP_HPKE_KEM_enc_len =
      _EVP_HPKE_KEM_enc_lenPtr.asFunction<
        int Function(ffi.Pointer<EVP_HPKE_KEM>)
      >();

  ffi.Pointer<EVP_HPKE_KDF> EVP_hpke_hkdf_sha256() {
    return _EVP_hpke_hkdf_sha256();
  }

  late final _EVP_hpke_hkdf_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_HPKE_KDF> Function()>>(
        'EVP_hpke_hkdf_sha256',
      );
  late final _EVP_hpke_hkdf_sha256 =
      _EVP_hpke_hkdf_sha256Ptr.asFunction<
        ffi.Pointer<EVP_HPKE_KDF> Function()
      >();

  int EVP_HPKE_KDF_id(ffi.Pointer<EVP_HPKE_KDF> kdf) {
    return _EVP_HPKE_KDF_id(kdf);
  }

  late final _EVP_HPKE_KDF_idPtr =
      _lookup<
        ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<EVP_HPKE_KDF>)>
      >('EVP_HPKE_KDF_id');
  late final _EVP_HPKE_KDF_id =
      _EVP_HPKE_KDF_idPtr.asFunction<int Function(ffi.Pointer<EVP_HPKE_KDF>)>();

  ffi.Pointer<EVP_MD> EVP_HPKE_KDF_hkdf_md(ffi.Pointer<EVP_HPKE_KDF> kdf) {
    return _EVP_HPKE_KDF_hkdf_md(kdf);
  }

  late final _EVP_HPKE_KDF_hkdf_mdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_HPKE_KDF>)
        >
      >('EVP_HPKE_KDF_hkdf_md');
  late final _EVP_HPKE_KDF_hkdf_md =
      _EVP_HPKE_KDF_hkdf_mdPtr.asFunction<
        ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_HPKE_KDF>)
      >();

  ffi.Pointer<EVP_HPKE_AEAD> EVP_hpke_aes_128_gcm() {
    return _EVP_hpke_aes_128_gcm();
  }

  late final _EVP_hpke_aes_128_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_HPKE_AEAD> Function()>>(
        'EVP_hpke_aes_128_gcm',
      );
  late final _EVP_hpke_aes_128_gcm =
      _EVP_hpke_aes_128_gcmPtr.asFunction<
        ffi.Pointer<EVP_HPKE_AEAD> Function()
      >();

  ffi.Pointer<EVP_HPKE_AEAD> EVP_hpke_aes_256_gcm() {
    return _EVP_hpke_aes_256_gcm();
  }

  late final _EVP_hpke_aes_256_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_HPKE_AEAD> Function()>>(
        'EVP_hpke_aes_256_gcm',
      );
  late final _EVP_hpke_aes_256_gcm =
      _EVP_hpke_aes_256_gcmPtr.asFunction<
        ffi.Pointer<EVP_HPKE_AEAD> Function()
      >();

  ffi.Pointer<EVP_HPKE_AEAD> EVP_hpke_chacha20_poly1305() {
    return _EVP_hpke_chacha20_poly1305();
  }

  late final _EVP_hpke_chacha20_poly1305Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_HPKE_AEAD> Function()>>(
        'EVP_hpke_chacha20_poly1305',
      );
  late final _EVP_hpke_chacha20_poly1305 =
      _EVP_hpke_chacha20_poly1305Ptr.asFunction<
        ffi.Pointer<EVP_HPKE_AEAD> Function()
      >();

  int EVP_HPKE_AEAD_id(ffi.Pointer<EVP_HPKE_AEAD> aead) {
    return _EVP_HPKE_AEAD_id(aead);
  }

  late final _EVP_HPKE_AEAD_idPtr =
      _lookup<
        ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<EVP_HPKE_AEAD>)>
      >('EVP_HPKE_AEAD_id');
  late final _EVP_HPKE_AEAD_id =
      _EVP_HPKE_AEAD_idPtr.asFunction<
        int Function(ffi.Pointer<EVP_HPKE_AEAD>)
      >();

  ffi.Pointer<EVP_AEAD> EVP_HPKE_AEAD_aead(ffi.Pointer<EVP_HPKE_AEAD> aead) {
    return _EVP_HPKE_AEAD_aead(aead);
  }

  late final _EVP_HPKE_AEAD_aeadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_AEAD> Function(ffi.Pointer<EVP_HPKE_AEAD>)
        >
      >('EVP_HPKE_AEAD_aead');
  late final _EVP_HPKE_AEAD_aead =
      _EVP_HPKE_AEAD_aeadPtr.asFunction<
        ffi.Pointer<EVP_AEAD> Function(ffi.Pointer<EVP_HPKE_AEAD>)
      >();

  void EVP_HPKE_KEY_zero(ffi.Pointer<EVP_HPKE_KEY> key) {
    return _EVP_HPKE_KEY_zero(key);
  }

  late final _EVP_HPKE_KEY_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_HPKE_KEY>)>>(
        'EVP_HPKE_KEY_zero',
      );
  late final _EVP_HPKE_KEY_zero =
      _EVP_HPKE_KEY_zeroPtr.asFunction<
        void Function(ffi.Pointer<EVP_HPKE_KEY>)
      >();

  void EVP_HPKE_KEY_cleanup(ffi.Pointer<EVP_HPKE_KEY> key) {
    return _EVP_HPKE_KEY_cleanup(key);
  }

  late final _EVP_HPKE_KEY_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_HPKE_KEY>)>>(
        'EVP_HPKE_KEY_cleanup',
      );
  late final _EVP_HPKE_KEY_cleanup =
      _EVP_HPKE_KEY_cleanupPtr.asFunction<
        void Function(ffi.Pointer<EVP_HPKE_KEY>)
      >();

  ffi.Pointer<EVP_HPKE_KEY> EVP_HPKE_KEY_new() {
    return _EVP_HPKE_KEY_new();
  }

  late final _EVP_HPKE_KEY_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_HPKE_KEY> Function()>>(
        'EVP_HPKE_KEY_new',
      );
  late final _EVP_HPKE_KEY_new =
      _EVP_HPKE_KEY_newPtr.asFunction<ffi.Pointer<EVP_HPKE_KEY> Function()>();

  void EVP_HPKE_KEY_free(ffi.Pointer<EVP_HPKE_KEY> key) {
    return _EVP_HPKE_KEY_free(key);
  }

  late final _EVP_HPKE_KEY_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_HPKE_KEY>)>>(
        'EVP_HPKE_KEY_free',
      );
  late final _EVP_HPKE_KEY_free =
      _EVP_HPKE_KEY_freePtr.asFunction<
        void Function(ffi.Pointer<EVP_HPKE_KEY>)
      >();

  int EVP_HPKE_KEY_copy(
    ffi.Pointer<EVP_HPKE_KEY> dst,
    ffi.Pointer<EVP_HPKE_KEY> src,
  ) {
    return _EVP_HPKE_KEY_copy(dst, src);
  }

  late final _EVP_HPKE_KEY_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_HPKE_KEY>, ffi.Pointer<EVP_HPKE_KEY>)
        >
      >('EVP_HPKE_KEY_copy');
  late final _EVP_HPKE_KEY_copy =
      _EVP_HPKE_KEY_copyPtr.asFunction<
        int Function(ffi.Pointer<EVP_HPKE_KEY>, ffi.Pointer<EVP_HPKE_KEY>)
      >();

  void EVP_HPKE_KEY_move(
    ffi.Pointer<EVP_HPKE_KEY> out,
    ffi.Pointer<EVP_HPKE_KEY> in1,
  ) {
    return _EVP_HPKE_KEY_move(out, in1);
  }

  late final _EVP_HPKE_KEY_movePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<EVP_HPKE_KEY>,
            ffi.Pointer<EVP_HPKE_KEY>,
          )
        >
      >('EVP_HPKE_KEY_move');
  late final _EVP_HPKE_KEY_move =
      _EVP_HPKE_KEY_movePtr.asFunction<
        void Function(ffi.Pointer<EVP_HPKE_KEY>, ffi.Pointer<EVP_HPKE_KEY>)
      >();

  int EVP_HPKE_KEY_init(
    ffi.Pointer<EVP_HPKE_KEY> key,
    ffi.Pointer<EVP_HPKE_KEM> kem,
    ffi.Pointer<ffi.Uint8> priv_key,
    int priv_key_len,
  ) {
    return _EVP_HPKE_KEY_init(key, kem, priv_key, priv_key_len);
  }

  late final _EVP_HPKE_KEY_initPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_HPKE_KEY>,
            ffi.Pointer<EVP_HPKE_KEM>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_HPKE_KEY_init');
  late final _EVP_HPKE_KEY_init =
      _EVP_HPKE_KEY_initPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_HPKE_KEY>,
          ffi.Pointer<EVP_HPKE_KEM>,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_HPKE_KEY_generate(
    ffi.Pointer<EVP_HPKE_KEY> key,
    ffi.Pointer<EVP_HPKE_KEM> kem,
  ) {
    return _EVP_HPKE_KEY_generate(key, kem);
  }

  late final _EVP_HPKE_KEY_generatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_HPKE_KEY>, ffi.Pointer<EVP_HPKE_KEM>)
        >
      >('EVP_HPKE_KEY_generate');
  late final _EVP_HPKE_KEY_generate =
      _EVP_HPKE_KEY_generatePtr.asFunction<
        int Function(ffi.Pointer<EVP_HPKE_KEY>, ffi.Pointer<EVP_HPKE_KEM>)
      >();

  ffi.Pointer<EVP_HPKE_KEM> EVP_HPKE_KEY_kem(ffi.Pointer<EVP_HPKE_KEY> key) {
    return _EVP_HPKE_KEY_kem(key);
  }

  late final _EVP_HPKE_KEY_kemPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_HPKE_KEM> Function(ffi.Pointer<EVP_HPKE_KEY>)
        >
      >('EVP_HPKE_KEY_kem');
  late final _EVP_HPKE_KEY_kem =
      _EVP_HPKE_KEY_kemPtr.asFunction<
        ffi.Pointer<EVP_HPKE_KEM> Function(ffi.Pointer<EVP_HPKE_KEY>)
      >();

  int EVP_HPKE_KEY_public_key(
    ffi.Pointer<EVP_HPKE_KEY> key,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    int max_out,
  ) {
    return _EVP_HPKE_KEY_public_key(key, out, out_len, max_out);
  }

  late final _EVP_HPKE_KEY_public_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_HPKE_KEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
          )
        >
      >('EVP_HPKE_KEY_public_key');
  late final _EVP_HPKE_KEY_public_key =
      _EVP_HPKE_KEY_public_keyPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_HPKE_KEY>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
        )
      >();

  int EVP_HPKE_KEY_private_key(
    ffi.Pointer<EVP_HPKE_KEY> key,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    int max_out,
  ) {
    return _EVP_HPKE_KEY_private_key(key, out, out_len, max_out);
  }

  late final _EVP_HPKE_KEY_private_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_HPKE_KEY>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
          )
        >
      >('EVP_HPKE_KEY_private_key');
  late final _EVP_HPKE_KEY_private_key =
      _EVP_HPKE_KEY_private_keyPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_HPKE_KEY>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
        )
      >();

  void EVP_HPKE_CTX_zero(ffi.Pointer<EVP_HPKE_CTX> ctx) {
    return _EVP_HPKE_CTX_zero(ctx);
  }

  late final _EVP_HPKE_CTX_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_HPKE_CTX>)>>(
        'EVP_HPKE_CTX_zero',
      );
  late final _EVP_HPKE_CTX_zero =
      _EVP_HPKE_CTX_zeroPtr.asFunction<
        void Function(ffi.Pointer<EVP_HPKE_CTX>)
      >();

  void EVP_HPKE_CTX_cleanup(ffi.Pointer<EVP_HPKE_CTX> ctx) {
    return _EVP_HPKE_CTX_cleanup(ctx);
  }

  late final _EVP_HPKE_CTX_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_HPKE_CTX>)>>(
        'EVP_HPKE_CTX_cleanup',
      );
  late final _EVP_HPKE_CTX_cleanup =
      _EVP_HPKE_CTX_cleanupPtr.asFunction<
        void Function(ffi.Pointer<EVP_HPKE_CTX>)
      >();

  ffi.Pointer<EVP_HPKE_CTX> EVP_HPKE_CTX_new() {
    return _EVP_HPKE_CTX_new();
  }

  late final _EVP_HPKE_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_HPKE_CTX> Function()>>(
        'EVP_HPKE_CTX_new',
      );
  late final _EVP_HPKE_CTX_new =
      _EVP_HPKE_CTX_newPtr.asFunction<ffi.Pointer<EVP_HPKE_CTX> Function()>();

  void EVP_HPKE_CTX_free(ffi.Pointer<EVP_HPKE_CTX> ctx) {
    return _EVP_HPKE_CTX_free(ctx);
  }

  late final _EVP_HPKE_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_HPKE_CTX>)>>(
        'EVP_HPKE_CTX_free',
      );
  late final _EVP_HPKE_CTX_free =
      _EVP_HPKE_CTX_freePtr.asFunction<
        void Function(ffi.Pointer<EVP_HPKE_CTX>)
      >();

  int EVP_HPKE_CTX_setup_sender(
    ffi.Pointer<EVP_HPKE_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out_enc,
    ffi.Pointer<ffi.Size> out_enc_len,
    int max_enc,
    ffi.Pointer<EVP_HPKE_KEM> kem,
    ffi.Pointer<EVP_HPKE_KDF> kdf,
    ffi.Pointer<EVP_HPKE_AEAD> aead,
    ffi.Pointer<ffi.Uint8> peer_public_key,
    int peer_public_key_len,
    ffi.Pointer<ffi.Uint8> info,
    int info_len,
  ) {
    return _EVP_HPKE_CTX_setup_sender(
      ctx,
      out_enc,
      out_enc_len,
      max_enc,
      kem,
      kdf,
      aead,
      peer_public_key,
      peer_public_key_len,
      info,
      info_len,
    );
  }

  late final _EVP_HPKE_CTX_setup_senderPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_HPKE_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<EVP_HPKE_KEM>,
            ffi.Pointer<EVP_HPKE_KDF>,
            ffi.Pointer<EVP_HPKE_AEAD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_HPKE_CTX_setup_sender');
  late final _EVP_HPKE_CTX_setup_sender =
      _EVP_HPKE_CTX_setup_senderPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_HPKE_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<EVP_HPKE_KEM>,
          ffi.Pointer<EVP_HPKE_KDF>,
          ffi.Pointer<EVP_HPKE_AEAD>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_HPKE_CTX_setup_sender_with_seed_for_testing(
    ffi.Pointer<EVP_HPKE_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out_enc,
    ffi.Pointer<ffi.Size> out_enc_len,
    int max_enc,
    ffi.Pointer<EVP_HPKE_KEM> kem,
    ffi.Pointer<EVP_HPKE_KDF> kdf,
    ffi.Pointer<EVP_HPKE_AEAD> aead,
    ffi.Pointer<ffi.Uint8> peer_public_key,
    int peer_public_key_len,
    ffi.Pointer<ffi.Uint8> info,
    int info_len,
    ffi.Pointer<ffi.Uint8> seed,
    int seed_len,
  ) {
    return _EVP_HPKE_CTX_setup_sender_with_seed_for_testing(
      ctx,
      out_enc,
      out_enc_len,
      max_enc,
      kem,
      kdf,
      aead,
      peer_public_key,
      peer_public_key_len,
      info,
      info_len,
      seed,
      seed_len,
    );
  }

  late final _EVP_HPKE_CTX_setup_sender_with_seed_for_testingPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_HPKE_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<EVP_HPKE_KEM>,
            ffi.Pointer<EVP_HPKE_KDF>,
            ffi.Pointer<EVP_HPKE_AEAD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_HPKE_CTX_setup_sender_with_seed_for_testing');
  late final _EVP_HPKE_CTX_setup_sender_with_seed_for_testing =
      _EVP_HPKE_CTX_setup_sender_with_seed_for_testingPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_HPKE_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<EVP_HPKE_KEM>,
          ffi.Pointer<EVP_HPKE_KDF>,
          ffi.Pointer<EVP_HPKE_AEAD>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_HPKE_CTX_setup_recipient(
    ffi.Pointer<EVP_HPKE_CTX> ctx,
    ffi.Pointer<EVP_HPKE_KEY> key,
    ffi.Pointer<EVP_HPKE_KDF> kdf,
    ffi.Pointer<EVP_HPKE_AEAD> aead,
    ffi.Pointer<ffi.Uint8> enc,
    int enc_len,
    ffi.Pointer<ffi.Uint8> info,
    int info_len,
  ) {
    return _EVP_HPKE_CTX_setup_recipient(
      ctx,
      key,
      kdf,
      aead,
      enc,
      enc_len,
      info,
      info_len,
    );
  }

  late final _EVP_HPKE_CTX_setup_recipientPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_HPKE_CTX>,
            ffi.Pointer<EVP_HPKE_KEY>,
            ffi.Pointer<EVP_HPKE_KDF>,
            ffi.Pointer<EVP_HPKE_AEAD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_HPKE_CTX_setup_recipient');
  late final _EVP_HPKE_CTX_setup_recipient =
      _EVP_HPKE_CTX_setup_recipientPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_HPKE_CTX>,
          ffi.Pointer<EVP_HPKE_KEY>,
          ffi.Pointer<EVP_HPKE_KDF>,
          ffi.Pointer<EVP_HPKE_AEAD>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_HPKE_CTX_setup_auth_sender(
    ffi.Pointer<EVP_HPKE_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out_enc,
    ffi.Pointer<ffi.Size> out_enc_len,
    int max_enc,
    ffi.Pointer<EVP_HPKE_KEY> key,
    ffi.Pointer<EVP_HPKE_KDF> kdf,
    ffi.Pointer<EVP_HPKE_AEAD> aead,
    ffi.Pointer<ffi.Uint8> peer_public_key,
    int peer_public_key_len,
    ffi.Pointer<ffi.Uint8> info,
    int info_len,
  ) {
    return _EVP_HPKE_CTX_setup_auth_sender(
      ctx,
      out_enc,
      out_enc_len,
      max_enc,
      key,
      kdf,
      aead,
      peer_public_key,
      peer_public_key_len,
      info,
      info_len,
    );
  }

  late final _EVP_HPKE_CTX_setup_auth_senderPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_HPKE_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<EVP_HPKE_KEY>,
            ffi.Pointer<EVP_HPKE_KDF>,
            ffi.Pointer<EVP_HPKE_AEAD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_HPKE_CTX_setup_auth_sender');
  late final _EVP_HPKE_CTX_setup_auth_sender =
      _EVP_HPKE_CTX_setup_auth_senderPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_HPKE_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<EVP_HPKE_KEY>,
          ffi.Pointer<EVP_HPKE_KDF>,
          ffi.Pointer<EVP_HPKE_AEAD>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_HPKE_CTX_setup_auth_sender_with_seed_for_testing(
    ffi.Pointer<EVP_HPKE_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out_enc,
    ffi.Pointer<ffi.Size> out_enc_len,
    int max_enc,
    ffi.Pointer<EVP_HPKE_KEY> key,
    ffi.Pointer<EVP_HPKE_KDF> kdf,
    ffi.Pointer<EVP_HPKE_AEAD> aead,
    ffi.Pointer<ffi.Uint8> peer_public_key,
    int peer_public_key_len,
    ffi.Pointer<ffi.Uint8> info,
    int info_len,
    ffi.Pointer<ffi.Uint8> seed,
    int seed_len,
  ) {
    return _EVP_HPKE_CTX_setup_auth_sender_with_seed_for_testing(
      ctx,
      out_enc,
      out_enc_len,
      max_enc,
      key,
      kdf,
      aead,
      peer_public_key,
      peer_public_key_len,
      info,
      info_len,
      seed,
      seed_len,
    );
  }

  late final _EVP_HPKE_CTX_setup_auth_sender_with_seed_for_testingPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_HPKE_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<EVP_HPKE_KEY>,
            ffi.Pointer<EVP_HPKE_KDF>,
            ffi.Pointer<EVP_HPKE_AEAD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_HPKE_CTX_setup_auth_sender_with_seed_for_testing');
  late final _EVP_HPKE_CTX_setup_auth_sender_with_seed_for_testing =
      _EVP_HPKE_CTX_setup_auth_sender_with_seed_for_testingPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_HPKE_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<EVP_HPKE_KEY>,
          ffi.Pointer<EVP_HPKE_KDF>,
          ffi.Pointer<EVP_HPKE_AEAD>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_HPKE_CTX_setup_auth_recipient(
    ffi.Pointer<EVP_HPKE_CTX> ctx,
    ffi.Pointer<EVP_HPKE_KEY> key,
    ffi.Pointer<EVP_HPKE_KDF> kdf,
    ffi.Pointer<EVP_HPKE_AEAD> aead,
    ffi.Pointer<ffi.Uint8> enc,
    int enc_len,
    ffi.Pointer<ffi.Uint8> info,
    int info_len,
    ffi.Pointer<ffi.Uint8> peer_public_key,
    int peer_public_key_len,
  ) {
    return _EVP_HPKE_CTX_setup_auth_recipient(
      ctx,
      key,
      kdf,
      aead,
      enc,
      enc_len,
      info,
      info_len,
      peer_public_key,
      peer_public_key_len,
    );
  }

  late final _EVP_HPKE_CTX_setup_auth_recipientPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_HPKE_CTX>,
            ffi.Pointer<EVP_HPKE_KEY>,
            ffi.Pointer<EVP_HPKE_KDF>,
            ffi.Pointer<EVP_HPKE_AEAD>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_HPKE_CTX_setup_auth_recipient');
  late final _EVP_HPKE_CTX_setup_auth_recipient =
      _EVP_HPKE_CTX_setup_auth_recipientPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_HPKE_CTX>,
          ffi.Pointer<EVP_HPKE_KEY>,
          ffi.Pointer<EVP_HPKE_KDF>,
          ffi.Pointer<EVP_HPKE_AEAD>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_HPKE_CTX_open(
    ffi.Pointer<EVP_HPKE_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    int max_out_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
    ffi.Pointer<ffi.Uint8> ad,
    int ad_len,
  ) {
    return _EVP_HPKE_CTX_open(
      ctx,
      out,
      out_len,
      max_out_len,
      in1,
      in_len,
      ad,
      ad_len,
    );
  }

  late final _EVP_HPKE_CTX_openPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_HPKE_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_HPKE_CTX_open');
  late final _EVP_HPKE_CTX_open =
      _EVP_HPKE_CTX_openPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_HPKE_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_HPKE_CTX_seal(
    ffi.Pointer<EVP_HPKE_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Size> out_len,
    int max_out_len,
    ffi.Pointer<ffi.Uint8> in1,
    int in_len,
    ffi.Pointer<ffi.Uint8> ad,
    int ad_len,
  ) {
    return _EVP_HPKE_CTX_seal(
      ctx,
      out,
      out_len,
      max_out_len,
      in1,
      in_len,
      ad,
      ad_len,
    );
  }

  late final _EVP_HPKE_CTX_sealPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_HPKE_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Pointer<ffi.Size>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_HPKE_CTX_seal');
  late final _EVP_HPKE_CTX_seal =
      _EVP_HPKE_CTX_sealPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_HPKE_CTX>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_HPKE_CTX_export(
    ffi.Pointer<EVP_HPKE_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    int secret_len,
    ffi.Pointer<ffi.Uint8> context,
    int context_len,
  ) {
    return _EVP_HPKE_CTX_export(ctx, out, secret_len, context, context_len);
  }

  late final _EVP_HPKE_CTX_exportPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_HPKE_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_HPKE_CTX_export');
  late final _EVP_HPKE_CTX_export =
      _EVP_HPKE_CTX_exportPtr.asFunction<
        int Function(
          ffi.Pointer<EVP_HPKE_CTX>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
        )
      >();

  int EVP_HPKE_CTX_max_overhead(ffi.Pointer<EVP_HPKE_CTX> ctx) {
    return _EVP_HPKE_CTX_max_overhead(ctx);
  }

  late final _EVP_HPKE_CTX_max_overheadPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<EVP_HPKE_CTX>)>>(
        'EVP_HPKE_CTX_max_overhead',
      );
  late final _EVP_HPKE_CTX_max_overhead =
      _EVP_HPKE_CTX_max_overheadPtr.asFunction<
        int Function(ffi.Pointer<EVP_HPKE_CTX>)
      >();

  ffi.Pointer<EVP_HPKE_KEM> EVP_HPKE_CTX_kem(ffi.Pointer<EVP_HPKE_CTX> ctx) {
    return _EVP_HPKE_CTX_kem(ctx);
  }

  late final _EVP_HPKE_CTX_kemPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_HPKE_KEM> Function(ffi.Pointer<EVP_HPKE_CTX>)
        >
      >('EVP_HPKE_CTX_kem');
  late final _EVP_HPKE_CTX_kem =
      _EVP_HPKE_CTX_kemPtr.asFunction<
        ffi.Pointer<EVP_HPKE_KEM> Function(ffi.Pointer<EVP_HPKE_CTX>)
      >();

  ffi.Pointer<EVP_HPKE_AEAD> EVP_HPKE_CTX_aead(ffi.Pointer<EVP_HPKE_CTX> ctx) {
    return _EVP_HPKE_CTX_aead(ctx);
  }

  late final _EVP_HPKE_CTX_aeadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_HPKE_AEAD> Function(ffi.Pointer<EVP_HPKE_CTX>)
        >
      >('EVP_HPKE_CTX_aead');
  late final _EVP_HPKE_CTX_aead =
      _EVP_HPKE_CTX_aeadPtr.asFunction<
        ffi.Pointer<EVP_HPKE_AEAD> Function(ffi.Pointer<EVP_HPKE_CTX>)
      >();

  ffi.Pointer<EVP_HPKE_KDF> EVP_HPKE_CTX_kdf(ffi.Pointer<EVP_HPKE_CTX> ctx) {
    return _EVP_HPKE_CTX_kdf(ctx);
  }

  late final _EVP_HPKE_CTX_kdfPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<EVP_HPKE_KDF> Function(ffi.Pointer<EVP_HPKE_CTX>)
        >
      >('EVP_HPKE_CTX_kdf');
  late final _EVP_HPKE_CTX_kdf =
      _EVP_HPKE_CTX_kdfPtr.asFunction<
        ffi.Pointer<EVP_HPKE_KDF> Function(ffi.Pointer<EVP_HPKE_CTX>)
      >();

  int EVP_PKEY_CTX_hkdf_mode(ffi.Pointer<EVP_PKEY_CTX> ctx, int mode) {
    return _EVP_PKEY_CTX_hkdf_mode(ctx, mode);
  }

  late final _EVP_PKEY_CTX_hkdf_modePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int)>
      >('EVP_PKEY_CTX_hkdf_mode');
  late final _EVP_PKEY_CTX_hkdf_mode =
      _EVP_PKEY_CTX_hkdf_modePtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, int)
      >();

  int EVP_PKEY_CTX_set_hkdf_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_PKEY_CTX_set_hkdf_md(ctx, md);
  }

  late final _EVP_PKEY_CTX_set_hkdf_mdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)
        >
      >('EVP_PKEY_CTX_set_hkdf_md');
  late final _EVP_PKEY_CTX_set_hkdf_md =
      _EVP_PKEY_CTX_set_hkdf_mdPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD>)
      >();

  int EVP_PKEY_CTX_set1_hkdf_key(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
  ) {
    return _EVP_PKEY_CTX_set1_hkdf_key(ctx, key, key_len);
  }

  late final _EVP_PKEY_CTX_set1_hkdf_keyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PKEY_CTX_set1_hkdf_key');
  late final _EVP_PKEY_CTX_set1_hkdf_key =
      _EVP_PKEY_CTX_set1_hkdf_keyPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int EVP_PKEY_CTX_set1_hkdf_salt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_len,
  ) {
    return _EVP_PKEY_CTX_set1_hkdf_salt(ctx, salt, salt_len);
  }

  late final _EVP_PKEY_CTX_set1_hkdf_saltPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PKEY_CTX_set1_hkdf_salt');
  late final _EVP_PKEY_CTX_set1_hkdf_salt =
      _EVP_PKEY_CTX_set1_hkdf_saltPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Uint8>, int)
      >();

  int EVP_PKEY_CTX_add1_hkdf_info(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> info,
    int info_len,
  ) {
    return _EVP_PKEY_CTX_add1_hkdf_info(ctx, info, info_len);
  }

  late final _EVP_PKEY_CTX_add1_hkdf_infoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<EVP_PKEY_CTX>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Size,
          )
        >
      >('EVP_PKEY_CTX_add1_hkdf_info');
  late final _EVP_PKEY_CTX_add1_hkdf_info =
      _EVP_PKEY_CTX_add1_hkdf_infoPtr.asFunction<
        int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Uint8>, int)
      >();
}

typedef EVP_ENCODE_CTX = evp_encode_ctx_st;

final class evp_encode_ctx_st extends ffi.Struct {
  @ffi.UnsignedInt()
  external int data_used;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Uint8> data;

  @ffi.Char()
  external int eof_seen;

  @ffi.Char()
  external int error_encountered;
}

final class buf_mem_st extends ffi.Struct {
  @ffi.Size()
  external int length;

  external ffi.Pointer<ffi.Char> data;

  @ffi.Size()
  external int max;
}

typedef BUF_MEM = buf_mem_st;

final class stack_st_BIO extends ffi.Opaque {}

typedef BIO = bio_st;

final class bio_st extends ffi.Struct {
  external ffi.Pointer<BIO_METHOD> method;

  external CRYPTO_EX_DATA ex_data;

  @ffi.Int()
  external int init;

  @ffi.Int()
  external int shutdown;

  @ffi.Int()
  external int flags;

  @ffi.Int()
  external int retry_reason;

  @ffi.Int()
  external int num;

  @CRYPTO_refcount_t()
  external int references;

  external ffi.Pointer<ffi.Void> ptr;

  external ffi.Pointer<BIO> next_bio;

  @ffi.Uint64()
  external int num_read;

  @ffi.Uint64()
  external int num_write;
}

typedef BIO_METHOD = bio_method_st;

final class bio_method_st extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >
  bwrite;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >
  bread;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)
    >
  >
  bputs;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)
    >
  >
  bgets;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Long Function(
        ffi.Pointer<BIO>,
        ffi.Int,
        ffi.Long,
        ffi.Pointer<ffi.Void>,
      )
    >
  >
  ctrl;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
  create;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
  destroy;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)
    >
  >
  callback_ctrl;
}

typedef BIO_info_cb =
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Int)>;
typedef CRYPTO_EX_DATA = crypto_ex_data_st;

final class crypto_ex_data_st extends ffi.Struct {
  external ffi.Pointer<stack_st_void> sk;
}

final class stack_st_void extends ffi.Opaque {}

typedef CRYPTO_refcount_t = ffi.Uint32;
typedef DartCRYPTO_refcount_t = int;
typedef ossl_ssize_t = ptrdiff_t;
typedef ptrdiff_t = ffi.Long;
typedef Dartptrdiff_t = int;
typedef FILE = _IO_FILE;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef __off_t = ffi.Long;
typedef Dart__off_t = int;
typedef _IO_lock_t = ffi.Void;
typedef Dart_IO_lock_t = void;
typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

typedef CRYPTO_EX_unused = ffi.Int;
typedef DartCRYPTO_EX_unused = int;
typedef CRYPTO_EX_dup =
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<CRYPTO_EX_DATA> to,
        ffi.Pointer<CRYPTO_EX_DATA> from,
        ffi.Pointer<ffi.Pointer<ffi.Void>> from_d,
        ffi.Int index,
        ffi.Long argl,
        ffi.Pointer<ffi.Void> argp,
      )
    >;
typedef CRYPTO_EX_free =
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Void> parent,
        ffi.Pointer<ffi.Void> ptr,
        ffi.Pointer<CRYPTO_EX_DATA> ad,
        ffi.Int index,
        ffi.Long argl,
        ffi.Pointer<ffi.Void> argp,
      )
    >;

final class cbs_st extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @ffi.Size()
  external int len;
}

typedef CBS = cbs_st;
typedef CBS_ASN1_TAG = ffi.Uint32;
typedef DartCBS_ASN1_TAG = int;

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

final class cbb_buffer_st extends ffi.Opaque {}

final class cbb_child_st extends ffi.Opaque {}

final class cbb_st extends ffi.Opaque {}

typedef CBB = cbb_st;
typedef ERR_print_errors_callback_t =
    ffi.Pointer<ffi.NativeFunction<ERR_print_errors_callback_tFunction>>;
typedef ERR_print_errors_callback_tFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Char> str,
      ffi.Size len,
      ffi.Pointer<ffi.Void> ctx,
    );
typedef DartERR_print_errors_callback_tFunction =
    int Function(ffi.Pointer<ffi.Char> str, int len, ffi.Pointer<ffi.Void> ctx);
typedef CRYPTO_THREADID = ffi.Int;
typedef DartCRYPTO_THREADID = int;

enum fips_counter_t {
  fips_counter_evp_aes_128_gcm(0),
  fips_counter_evp_aes_256_gcm(1),
  fips_counter_evp_aes_128_ctr(2),
  fips_counter_evp_aes_256_ctr(3);

  static const fips_counter_max = fips_counter_evp_aes_256_ctr;

  final int value;
  const fips_counter_t(this.value);

  static fips_counter_t fromValue(int value) => switch (value) {
    0 => fips_counter_evp_aes_128_gcm,
    1 => fips_counter_evp_aes_256_gcm,
    2 => fips_counter_evp_aes_128_ctr,
    3 => fips_counter_evp_aes_256_ctr,
    _ => throw ArgumentError("Unknown value for fips_counter_t: $value"),
  };

  @override
  String toString() {
    if (this == fips_counter_evp_aes_256_ctr)
      return "fips_counter_t.fips_counter_evp_aes_256_ctr, fips_counter_t.fips_counter_max";
    return super.toString();
  }
}

typedef OPENSSL_INIT_SETTINGS = ossl_init_settings_st;

final class ossl_init_settings_st extends ffi.Opaque {}

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef ASN1_OBJECT = asn1_object_st;

final class asn1_object_st extends ffi.Opaque {}

final class obj_name_st extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.Int()
  external int alias;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> data;
}

typedef OBJ_NAME = obj_name_st;

final class stack_st_CRYPTO_BUFFER extends ffi.Opaque {}

typedef CRYPTO_BUFFER_POOL = crypto_buffer_pool_st;

final class crypto_buffer_pool_st extends ffi.Opaque {}

typedef CRYPTO_BUFFER = crypto_buffer_st;

final class crypto_buffer_st extends ffi.Opaque {}

typedef time_t = __time_t;
typedef __time_t = ffi.Long;
typedef Dart__time_t = int;

final class rand_meth_st extends ffi.Struct {
  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Void Function(ffi.Pointer<ffi.Void> buf, ffi.Int num)
    >
  >
  seed;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ffi.Uint8> buf, ffi.Size num)
    >
  >
  bytes;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> cleanup;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Void> buf,
        ffi.Int num,
        ffi.Double entropy,
      )
    >
  >
  add;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ffi.Uint8> buf, ffi.Size num)
    >
  >
  pseudorand;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> status;
}

typedef RAND_METHOD = rand_meth_st;

final class stack_st extends ffi.Opaque {}

typedef OPENSSL_STACK = stack_st;
typedef OPENSSL_sk_cmp_func =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_cmp_funcFunction>>;
typedef OPENSSL_sk_cmp_funcFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Pointer<ffi.Void>> a,
      ffi.Pointer<ffi.Pointer<ffi.Void>> b,
    );
typedef DartOPENSSL_sk_cmp_funcFunction =
    int Function(
      ffi.Pointer<ffi.Pointer<ffi.Void>> a,
      ffi.Pointer<ffi.Pointer<ffi.Void>> b,
    );
typedef OPENSSL_sk_call_free_func =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_call_free_funcFunction>>;
typedef OPENSSL_sk_call_free_funcFunction =
    ffi.Void Function(OPENSSL_sk_free_func, ffi.Pointer<ffi.Void>);
typedef DartOPENSSL_sk_call_free_funcFunction =
    void Function(OPENSSL_sk_free_func, ffi.Pointer<ffi.Void>);
typedef OPENSSL_sk_free_func =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_free_funcFunction>>;
typedef OPENSSL_sk_free_funcFunction =
    ffi.Void Function(ffi.Pointer<ffi.Void> ptr);
typedef DartOPENSSL_sk_free_funcFunction =
    void Function(ffi.Pointer<ffi.Void> ptr);
typedef OPENSSL_sk_call_delete_if_func =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_call_delete_if_funcFunction>>;
typedef OPENSSL_sk_call_delete_if_funcFunction =
    ffi.Int Function(
      OPENSSL_sk_delete_if_func,
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<ffi.Void>,
    );
typedef DartOPENSSL_sk_call_delete_if_funcFunction =
    int Function(
      OPENSSL_sk_delete_if_func,
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<ffi.Void>,
    );
typedef OPENSSL_sk_delete_if_func =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_delete_if_funcFunction>>;
typedef OPENSSL_sk_delete_if_funcFunction =
    ffi.Int Function(ffi.Pointer<ffi.Void> obj, ffi.Pointer<ffi.Void> data);
typedef DartOPENSSL_sk_delete_if_funcFunction =
    int Function(ffi.Pointer<ffi.Void> obj, ffi.Pointer<ffi.Void> data);
typedef OPENSSL_sk_call_cmp_func =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_call_cmp_funcFunction>>;
typedef OPENSSL_sk_call_cmp_funcFunction =
    ffi.Int Function(
      OPENSSL_sk_cmp_func,
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<ffi.Void>,
    );
typedef DartOPENSSL_sk_call_cmp_funcFunction =
    int Function(
      OPENSSL_sk_cmp_func,
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<ffi.Void>,
    );
typedef OPENSSL_sk_call_copy_func =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_call_copy_funcFunction>>;
typedef OPENSSL_sk_call_copy_funcFunction =
    ffi.Pointer<ffi.Void> Function(OPENSSL_sk_copy_func, ffi.Pointer<ffi.Void>);
typedef OPENSSL_sk_copy_func =
    ffi.Pointer<ffi.NativeFunction<OPENSSL_sk_copy_funcFunction>>;
typedef OPENSSL_sk_copy_funcFunction =
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> ptr);

final class stack_st_OPENSSL_STRING extends ffi.Opaque {}

final class aes_key_st extends ffi.Struct {
  @ffi.Array.multi([60])
  external ffi.Array<ffi.Uint32> rd_key;

  @ffi.UnsignedInt()
  external int rounds;
}

typedef AES_KEY = aes_key_st;
typedef BIGNUM = bignum_st;

final class bignum_st extends ffi.Struct {
  external ffi.Pointer<BN_ULONG> d;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int dmax;

  @ffi.Int()
  external int neg;

  @ffi.Int()
  external int flags;
}

typedef BN_ULONG = ffi.Uint64;
typedef DartBN_ULONG = int;
typedef BN_CTX = bignum_ctx;

final class bignum_ctx extends ffi.Opaque {}

final class bn_gencb_st extends ffi.Struct {
  external ffi.Pointer<ffi.Void> arg;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<bn_gencb_st>)
    >
  >
  callback;
}

typedef BN_GENCB = bn_gencb_st;

enum bn_primality_result_t {
  bn_probably_prime(0),
  bn_composite(1),
  bn_non_prime_power_composite(2);

  final int value;
  const bn_primality_result_t(this.value);

  static bn_primality_result_t fromValue(int value) => switch (value) {
    0 => bn_probably_prime,
    1 => bn_composite,
    2 => bn_non_prime_power_composite,
    _ => throw ArgumentError("Unknown value for bn_primality_result_t: $value"),
  };
}

typedef BN_MONT_CTX = bn_mont_ctx_st;

final class bn_mont_ctx_st extends ffi.Struct {
  external BIGNUM RR;

  external BIGNUM N;

  @ffi.Array.multi([2])
  external ffi.Array<BN_ULONG> n0;
}

typedef CMAC_CTX = cmac_ctx_st;

final class cmac_ctx_st extends ffi.Opaque {}

typedef EVP_CIPHER = evp_cipher_st;

final class evp_cipher_st extends ffi.Opaque {}

typedef ENGINE = engine_st;

final class engine_st extends ffi.Opaque {}

enum spake2_role_t {
  spake2_role_alice(0),
  spake2_role_bob(1);

  final int value;
  const spake2_role_t(this.value);

  static spake2_role_t fromValue(int value) => switch (value) {
    0 => spake2_role_alice,
    1 => spake2_role_bob,
    _ => throw ArgumentError("Unknown value for spake2_role_t: $value"),
  };
}

typedef SPAKE2_CTX = spake2_ctx_st;

final class spake2_ctx_st extends ffi.Opaque {}

final class DES_cblock_st extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> bytes;
}

final class DES_ks extends ffi.Struct {
  @ffi.Array.multi([16, 2])
  external ffi.Array<ffi.Array<ffi.Uint32>> subkeys;
}

typedef DES_cblock = DES_cblock_st;
typedef DES_key_schedule = DES_ks;
typedef DH = dh_st;

final class dh_st extends ffi.Opaque {}

typedef EVP_MD = env_md_st;

final class env_md_st extends ffi.Opaque {}

typedef DSA = dsa_st;

final class dsa_st extends ffi.Opaque {}

final class DSA_SIG_st extends ffi.Struct {
  external ffi.Pointer<BIGNUM> r;

  external ffi.Pointer<BIGNUM> s;
}

typedef DSA_SIG = DSA_SIG_st;
typedef EC_POINT = ec_point_st;

final class ec_point_st extends ffi.Opaque {}

typedef EC_KEY = ec_key_st;

final class ec_key_st extends ffi.Opaque {}

final class ecdsa_sig_st extends ffi.Struct {
  external ffi.Pointer<BIGNUM> r;

  external ffi.Pointer<BIGNUM> s;
}

typedef ECDSA_SIG = ecdsa_sig_st;
typedef RSA_METHOD = rsa_meth_st;

final class rsa_meth_st extends ffi.Struct {
  external openssl_method_common_st common;

  external ffi.Pointer<ffi.Void> app_data;

  external ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA> rsa)>
  >
  init;

  external ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA> rsa)>
  >
  finish;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Int type,
        ffi.Pointer<ffi.Uint8> m,
        ffi.UnsignedInt m_length,
        ffi.Pointer<ffi.Uint8> sigret,
        ffi.Pointer<ffi.UnsignedInt> siglen,
        ffi.Pointer<RSA> rsa,
      )
    >
  >
  sign;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<RSA> rsa,
        ffi.Pointer<ffi.Size> out_len,
        ffi.Pointer<ffi.Uint8> out,
        ffi.Size max_out,
        ffi.Pointer<ffi.Uint8> in1,
        ffi.Size in_len,
        ffi.Int padding,
      )
    >
  >
  sign_raw;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<RSA> rsa,
        ffi.Pointer<ffi.Size> out_len,
        ffi.Pointer<ffi.Uint8> out,
        ffi.Size max_out,
        ffi.Pointer<ffi.Uint8> in1,
        ffi.Size in_len,
        ffi.Int padding,
      )
    >
  >
  decrypt;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<RSA> rsa,
        ffi.Pointer<ffi.Uint8> out,
        ffi.Pointer<ffi.Uint8> in1,
        ffi.Size len,
      )
    >
  >
  private_transform;

  @ffi.Int()
  external int flags;
}

final class openssl_method_common_st extends ffi.Struct {
  @ffi.Int()
  external int references;

  @ffi.Char()
  external int is_static;
}

typedef RSA = rsa_st;

final class rsa_st extends ffi.Opaque {}

typedef ECDSA_METHOD = ecdsa_method_st;

final class ecdsa_method_st extends ffi.Struct {
  external openssl_method_common_st common;

  external ffi.Pointer<ffi.Void> app_data;

  external ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>
  >
  init;

  external ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY> key)>
  >
  finish;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Uint8> digest,
        ffi.Size digest_len,
        ffi.Pointer<ffi.Uint8> sig,
        ffi.Pointer<ffi.UnsignedInt> sig_len,
        ffi.Pointer<EC_KEY> eckey,
      )
    >
  >
  sign;

  @ffi.Int()
  external int flags;
}

typedef HMAC_CTX = hmac_ctx_st;

final class hmac_ctx_st extends ffi.Struct {
  external ffi.Pointer<EVP_MD> md;

  external EVP_MD_CTX md_ctx;

  external EVP_MD_CTX i_ctx;

  external EVP_MD_CTX o_ctx;
}

typedef EVP_MD_CTX = env_md_ctx_st;

final class env_md_ctx_st extends ffi.Struct {
  external ffi.Pointer<EVP_MD> digest;

  external ffi.Pointer<ffi.Void> md_data;

  external ffi.Pointer<EVP_PKEY_CTX> pctx;

  external ffi.Pointer<evp_md_pctx_ops> pctx_ops;
}

typedef EVP_PKEY_CTX = evp_pkey_ctx_st;

final class evp_pkey_ctx_st extends ffi.Opaque {}

final class evp_md_pctx_ops extends ffi.Opaque {}

typedef MD5_CTX = md5_state_st;

final class md5_state_st extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> h;

  @ffi.Uint32()
  external int Nl;

  @ffi.Uint32()
  external int Nh;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> data;

  @ffi.UnsignedInt()
  external int num;
}

final class MLDSA65_private_key extends ffi.Struct {
  external UnnamedUnion2 opaque;
}

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Array.multi([17536])
  external ffi.Array<ffi.Uint8> bytes;

  @ffi.Uint32()
  external int alignment;
}

final class MLDSA65_public_key extends ffi.Struct {
  external UnnamedUnion3 opaque;
}

final class UnnamedUnion3 extends ffi.Union {
  @ffi.Array.multi([6240])
  external ffi.Array<ffi.Uint8> bytes;

  @ffi.Uint32()
  external int alignment;
}

final class MLDSA87_private_key extends ffi.Struct {
  external UnnamedUnion4 opaque;
}

final class UnnamedUnion4 extends ffi.Union {
  @ffi.Array.multi([23680])
  external ffi.Array<ffi.Uint8> bytes;

  @ffi.Uint32()
  external int alignment;
}

final class MLDSA87_public_key extends ffi.Struct {
  external UnnamedUnion5 opaque;
}

final class UnnamedUnion5 extends ffi.Union {
  @ffi.Array.multi([8288])
  external ffi.Array<ffi.Uint8> bytes;

  @ffi.Uint32()
  external int alignment;
}

final class MLKEM768_public_key extends ffi.Struct {
  external UnnamedUnion6 opaque;
}

final class UnnamedUnion6 extends ffi.Union {
  @ffi.Array.multi([6208])
  external ffi.Array<ffi.Uint8> bytes;

  @ffi.Uint16()
  external int alignment;
}

final class MLKEM768_private_key extends ffi.Struct {
  external UnnamedUnion7 opaque;
}

final class UnnamedUnion7 extends ffi.Union {
  @ffi.Array.multi([7776])
  external ffi.Array<ffi.Uint8> bytes;

  @ffi.Uint16()
  external int alignment;
}

final class MLKEM1024_public_key extends ffi.Struct {
  external UnnamedUnion8 opaque;
}

final class UnnamedUnion8 extends ffi.Union {
  @ffi.Array.multi([10304])
  external ffi.Array<ffi.Uint8> bytes;

  @ffi.Uint16()
  external int alignment;
}

final class MLKEM1024_private_key extends ffi.Struct {
  external UnnamedUnion9 opaque;
}

final class UnnamedUnion9 extends ffi.Union {
  @ffi.Array.multi([12384])
  external ffi.Array<ffi.Uint8> bytes;

  @ffi.Uint16()
  external int alignment;
}

final class rc4_key_st extends ffi.Struct {
  @ffi.Uint32()
  external int x;

  @ffi.Uint32()
  external int y;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Uint32> data;
}

typedef RC4_KEY = rc4_key_st;
typedef RSA_PSS_PARAMS = rsa_pss_params_st;

final class rsa_pss_params_st extends ffi.Opaque {}

typedef SHA_CTX = sha_state_st;

final class sha_state_st extends ffi.Struct {
  external UnnamedUnion10 unnamed;

  @ffi.Uint32()
  external int Nl;

  @ffi.Uint32()
  external int Nh;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> data;

  @ffi.UnsignedInt()
  external int num;
}

final class UnnamedUnion10 extends ffi.Union {
  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint32> h;

  external UnnamedStruct1 unnamed;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.Uint32()
  external int h0;

  @ffi.Uint32()
  external int h1;

  @ffi.Uint32()
  external int h2;

  @ffi.Uint32()
  external int h3;

  @ffi.Uint32()
  external int h4;
}

typedef SHA256_CTX = sha256_state_st;

final class sha256_state_st extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> h;

  @ffi.Uint32()
  external int Nl;

  @ffi.Uint32()
  external int Nh;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> data;

  @ffi.UnsignedInt()
  external int num;

  @ffi.UnsignedInt()
  external int md_len;
}

typedef SHA512_CTX = sha512_state_st;

final class sha512_state_st extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint64> h;

  @ffi.Uint64()
  external int Nl;

  @ffi.Uint64()
  external int Nh;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> p;

  @ffi.UnsignedInt()
  external int num;

  @ffi.UnsignedInt()
  external int md_len;
}

typedef EVP_CIPHER_CTX = evp_cipher_ctx_st;

final class evp_cipher_ctx_st extends ffi.Struct {
  external ffi.Pointer<EVP_CIPHER> cipher;

  external ffi.Pointer<ffi.Void> app_data;

  external ffi.Pointer<ffi.Void> cipher_data;

  @ffi.UnsignedInt()
  external int key_len;

  @ffi.Int()
  external int encrypt;

  @ffi.Uint32()
  external int flags;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> oiv;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> iv;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> buf;

  @ffi.Int()
  external int buf_len;

  @ffi.UnsignedInt()
  external int num;

  @ffi.Int()
  external int final_used;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> final1;

  @ffi.Int()
  external int poisoned;
}

final class evp_cipher_info_st extends ffi.Struct {
  external ffi.Pointer<EVP_CIPHER> cipher;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> iv;
}

typedef EVP_AEAD = evp_aead_st;

final class evp_aead_st extends ffi.Opaque {}

final class evp_aead_ctx_st_state extends ffi.Union {
  @ffi.Array.multi([560])
  external ffi.Array<ffi.Uint8> opaque;

  @ffi.Uint64()
  external int alignment;
}

final class evp_aead_ctx_st extends ffi.Struct {
  external ffi.Pointer<EVP_AEAD> aead;

  external evp_aead_ctx_st_state state;

  @ffi.Uint8()
  external int tag_len;
}

typedef EVP_AEAD_CTX = evp_aead_ctx_st;

enum evp_aead_direction_t {
  evp_aead_open(0),
  evp_aead_seal(1);

  final int value;
  const evp_aead_direction_t(this.value);

  static evp_aead_direction_t fromValue(int value) => switch (value) {
    0 => evp_aead_open,
    1 => evp_aead_seal,
    _ => throw ArgumentError("Unknown value for evp_aead_direction_t: $value"),
  };
}

typedef EVP_PKEY = evp_pkey_st;

final class evp_pkey_st extends ffi.Opaque {}

typedef ASN1_PCTX = asn1_pctx_st;

final class asn1_pctx_st extends ffi.Opaque {}

typedef EVP_HPKE_KEM = evp_hpke_kem_st;

final class evp_hpke_kem_st extends ffi.Opaque {}

typedef EVP_HPKE_KDF = evp_hpke_kdf_st;

final class evp_hpke_kdf_st extends ffi.Opaque {}

typedef EVP_HPKE_AEAD = evp_hpke_aead_st;

final class evp_hpke_aead_st extends ffi.Opaque {}

typedef EVP_HPKE_KEY = evp_hpke_key_st;

final class evp_hpke_key_st extends ffi.Struct {
  external ffi.Pointer<EVP_HPKE_KEM> kem;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> private_key;

  @ffi.Array.multi([65])
  external ffi.Array<ffi.Uint8> public_key;
}

typedef EVP_HPKE_CTX = evp_hpke_ctx_st;

final class evp_hpke_ctx_st extends ffi.Struct {
  external ffi.Pointer<EVP_HPKE_KEM> kem;

  external ffi.Pointer<EVP_HPKE_AEAD> aead;

  external ffi.Pointer<EVP_HPKE_KDF> kdf;

  external EVP_AEAD_CTX aead_ctx;

  @ffi.Array.multi([24])
  external ffi.Array<ffi.Uint8> base_nonce;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint8> exporter_secret;

  @ffi.Uint64()
  external int seq;

  @ffi.Int()
  external int is_sender;
}

const int ERR_LIB_NONE = 1;

const int ERR_LIB_SYS = 2;

const int ERR_LIB_BN = 3;

const int ERR_LIB_RSA = 4;

const int ERR_LIB_DH = 5;

const int ERR_LIB_EVP = 6;

const int ERR_LIB_BUF = 7;

const int ERR_LIB_OBJ = 8;

const int ERR_LIB_PEM = 9;

const int ERR_LIB_DSA = 10;

const int ERR_LIB_X509 = 11;

const int ERR_LIB_ASN1 = 12;

const int ERR_LIB_CONF = 13;

const int ERR_LIB_CRYPTO = 14;

const int ERR_LIB_EC = 15;

const int ERR_LIB_SSL = 16;

const int ERR_LIB_BIO = 17;

const int ERR_LIB_PKCS7 = 18;

const int ERR_LIB_PKCS8 = 19;

const int ERR_LIB_X509V3 = 20;

const int ERR_LIB_RAND = 21;

const int ERR_LIB_ENGINE = 22;

const int ERR_LIB_OCSP = 23;

const int ERR_LIB_UI = 24;

const int ERR_LIB_COMP = 25;

const int ERR_LIB_ECDSA = 26;

const int ERR_LIB_ECDH = 27;

const int ERR_LIB_HMAC = 28;

const int ERR_LIB_DIGEST = 29;

const int ERR_LIB_CIPHER = 30;

const int ERR_LIB_HKDF = 31;

const int ERR_LIB_TRUST_TOKEN = 32;

const int ERR_LIB_CMS = 33;

const int ERR_LIB_USER = 34;

const int ERR_NUM_LIBS = 35;

const int OPENSSL_HEADER_BASE64_H = 1;

const int OPENSSL_HEADER_BIO_H = 1;

const int OPENSSL_HEADER_BUFFER_H = 1;

const int BIO_RR_CONNECT = 2;

const int BIO_RR_ACCEPT = 3;

const int BIO_NOCLOSE = 0;

const int BIO_CLOSE = 1;

const int BIO_FP_TEXT = 16;

const int BIO_CTRL_DGRAM_QUERY_MTU = 40;

const int BIO_CTRL_DGRAM_SET_MTU = 42;

const int BIO_CTRL_DGRAM_MTU_EXCEEDED = 43;

const int BIO_CTRL_DGRAM_GET_PEER = 46;

const int BIO_CTRL_DGRAM_GET_FALLBACK_MTU = 47;

const int BIO_CTRL_RESET = 1;

const int BIO_CTRL_EOF = 2;

const int BIO_CTRL_INFO = 3;

const int BIO_CTRL_GET_CLOSE = 8;

const int BIO_CTRL_SET_CLOSE = 9;

const int BIO_CTRL_PENDING = 10;

const int BIO_CTRL_FLUSH = 11;

const int BIO_CTRL_WPENDING = 13;

const int BIO_CTRL_SET_CALLBACK = 14;

const int BIO_CTRL_GET_CALLBACK = 15;

const int BIO_CTRL_SET = 4;

const int BIO_CTRL_GET = 5;

const int BIO_CTRL_PUSH = 6;

const int BIO_CTRL_POP = 7;

const int BIO_CTRL_DUP = 12;

const int BIO_CTRL_SET_FILENAME = 30;

const int BIO_FLAGS_READ = 1;

const int BIO_FLAGS_WRITE = 2;

const int BIO_FLAGS_IO_SPECIAL = 4;

const int BIO_FLAGS_RWS = 7;

const int BIO_FLAGS_SHOULD_RETRY = 8;

const int BIO_FLAGS_BASE64_NO_NL = 256;

const int BIO_FLAGS_MEM_RDONLY = 512;

const int BIO_TYPE_DESCRIPTOR = 256;

const int BIO_TYPE_FILTER = 512;

const int BIO_TYPE_SOURCE_SINK = 1024;

const int BIO_TYPE_NONE = 0;

const int BIO_TYPE_MEM = 1025;

const int BIO_TYPE_FILE = 1026;

const int BIO_TYPE_FD = 1284;

const int BIO_TYPE_SOCKET = 1285;

const int BIO_TYPE_NULL = 1030;

const int BIO_TYPE_SSL = 519;

const int BIO_TYPE_MD = 520;

const int BIO_TYPE_BUFFER = 521;

const int BIO_TYPE_CIPHER = 522;

const int BIO_TYPE_BASE64 = 523;

const int BIO_TYPE_CONNECT = 1292;

const int BIO_TYPE_ACCEPT = 1293;

const int BIO_TYPE_PROXY_CLIENT = 526;

const int BIO_TYPE_PROXY_SERVER = 527;

const int BIO_TYPE_NBIO_TEST = 528;

const int BIO_TYPE_NULL_FILTER = 529;

const int BIO_TYPE_BER = 530;

const int BIO_TYPE_BIO = 1043;

const int BIO_TYPE_LINEBUFFER = 532;

const int BIO_TYPE_DGRAM = 1301;

const int BIO_TYPE_ASN1 = 534;

const int BIO_TYPE_COMP = 535;

const int BIO_TYPE_START = 128;

const int BIO_C_SET_CONNECT = 100;

const int BIO_C_DO_STATE_MACHINE = 101;

const int BIO_C_SET_NBIO = 102;

const int BIO_C_SET_PROXY_PARAM = 103;

const int BIO_C_SET_FD = 104;

const int BIO_C_GET_FD = 105;

const int BIO_C_SET_FILE_PTR = 106;

const int BIO_C_GET_FILE_PTR = 107;

const int BIO_C_SET_FILENAME = 108;

const int BIO_C_SET_SSL = 109;

const int BIO_C_SET_MD = 111;

const int BIO_C_GET_MD = 112;

const int BIO_C_GET_CIPHER_STATUS = 113;

const int BIO_C_SET_BUF_MEM = 114;

const int BIO_C_GET_BUF_MEM_PTR = 115;

const int BIO_C_GET_BUFF_NUM_LINES = 116;

const int BIO_C_SET_BUFF_SIZE = 117;

const int BIO_C_SET_ACCEPT = 118;

const int BIO_C_SSL_MODE = 119;

const int BIO_C_GET_MD_CTX = 120;

const int BIO_C_GET_PROXY_PARAM = 121;

const int BIO_C_SET_BUFF_READ_DATA = 122;

const int BIO_C_GET_ACCEPT = 124;

const int BIO_C_FILE_SEEK = 128;

const int BIO_C_GET_CIPHER_CTX = 129;

const int BIO_C_SET_BUF_MEM_EOF_RETURN = 130;

const int BIO_C_SET_BIND_MODE = 131;

const int BIO_C_GET_BIND_MODE = 132;

const int BIO_C_FILE_TELL = 133;

const int BIO_C_GET_SOCKS = 134;

const int BIO_C_SET_SOCKS = 135;

const int BIO_C_SET_WRITE_BUF_SIZE = 136;

const int BIO_C_GET_WRITE_BUF_SIZE = 137;

const int BIO_C_GET_WRITE_GUARANTEE = 140;

const int BIO_C_GET_READ_REQUEST = 141;

const int BIO_C_SHUTDOWN_WR = 142;

const int BIO_C_NREAD0 = 143;

const int BIO_C_NREAD = 144;

const int BIO_C_NWRITE0 = 145;

const int BIO_C_NWRITE = 146;

const int BIO_C_RESET_READ_REQUEST = 147;

const int BIO_C_SET_MD_CTX = 148;

const int BIO_C_SET_PREFIX = 149;

const int BIO_C_GET_PREFIX = 150;

const int BIO_C_SET_SUFFIX = 151;

const int BIO_C_GET_SUFFIX = 152;

const int BIO_C_SET_EX_ARG = 153;

const int BIO_C_GET_EX_ARG = 154;

const int BIO_R_BAD_FOPEN_MODE = 100;

const int BIO_R_BROKEN_PIPE = 101;

const int BIO_R_CONNECT_ERROR = 102;

const int BIO_R_ERROR_SETTING_NBIO = 103;

const int BIO_R_INVALID_ARGUMENT = 104;

const int BIO_R_IN_USE = 105;

const int BIO_R_KEEPALIVE = 106;

const int BIO_R_NBIO_CONNECT_ERROR = 107;

const int BIO_R_NO_HOSTNAME_SPECIFIED = 108;

const int BIO_R_NO_PORT_SPECIFIED = 109;

const int BIO_R_NO_SUCH_FILE = 110;

const int BIO_R_NULL_PARAMETER = 111;

const int BIO_R_SYS_LIB = 112;

const int BIO_R_UNABLE_TO_CREATE_SOCKET = 113;

const int BIO_R_UNINITIALIZED = 114;

const int BIO_R_UNSUPPORTED_METHOD = 115;

const int BIO_R_WRITE_TO_READ_ONLY_BIO = 116;

const int OPENSSL_HEADER_BYTESTRING_H = 1;

const int CBS_ASN1_TAG_SHIFT = 24;

const int CBS_ASN1_CONSTRUCTED = 536870912;

const int CBS_ASN1_UNIVERSAL = 0;

const int CBS_ASN1_APPLICATION = 1073741824;

const int CBS_ASN1_CONTEXT_SPECIFIC = 2147483648;

const int CBS_ASN1_PRIVATE = 3221225472;

const int CBS_ASN1_CLASS_MASK = 3221225472;

const int CBS_ASN1_TAG_NUMBER_MASK = 536870911;

const int CBS_ASN1_BOOLEAN = 1;

const int CBS_ASN1_INTEGER = 2;

const int CBS_ASN1_BITSTRING = 3;

const int CBS_ASN1_OCTETSTRING = 4;

const int CBS_ASN1_NULL = 5;

const int CBS_ASN1_OBJECT = 6;

const int CBS_ASN1_ENUMERATED = 10;

const int CBS_ASN1_UTF8STRING = 12;

const int CBS_ASN1_SEQUENCE = 536870928;

const int CBS_ASN1_SET = 536870929;

const int CBS_ASN1_NUMERICSTRING = 18;

const int CBS_ASN1_PRINTABLESTRING = 19;

const int CBS_ASN1_T61STRING = 20;

const int CBS_ASN1_VIDEOTEXSTRING = 21;

const int CBS_ASN1_IA5STRING = 22;

const int CBS_ASN1_UTCTIME = 23;

const int CBS_ASN1_GENERALIZEDTIME = 24;

const int CBS_ASN1_GRAPHICSTRING = 25;

const int CBS_ASN1_VISIBLESTRING = 26;

const int CBS_ASN1_GENERALSTRING = 27;

const int CBS_ASN1_UNIVERSALSTRING = 28;

const int CBS_ASN1_BMPSTRING = 30;

const int OPENSSL_HEADER_ERR_H = 1;

const int ERR_FLAG_STRING = 1;

const int ERR_FLAG_MALLOCED = 2;

const int ERR_R_SYS_LIB = 2;

const int ERR_R_BN_LIB = 3;

const int ERR_R_RSA_LIB = 4;

const int ERR_R_DH_LIB = 5;

const int ERR_R_EVP_LIB = 6;

const int ERR_R_BUF_LIB = 7;

const int ERR_R_OBJ_LIB = 8;

const int ERR_R_PEM_LIB = 9;

const int ERR_R_DSA_LIB = 10;

const int ERR_R_X509_LIB = 11;

const int ERR_R_ASN1_LIB = 12;

const int ERR_R_CONF_LIB = 13;

const int ERR_R_CRYPTO_LIB = 14;

const int ERR_R_EC_LIB = 15;

const int ERR_R_SSL_LIB = 16;

const int ERR_R_BIO_LIB = 17;

const int ERR_R_PKCS7_LIB = 18;

const int ERR_R_PKCS8_LIB = 19;

const int ERR_R_X509V3_LIB = 20;

const int ERR_R_RAND_LIB = 21;

const int ERR_R_DSO_LIB = 0;

const int ERR_R_ENGINE_LIB = 22;

const int ERR_R_OCSP_LIB = 23;

const int ERR_R_UI_LIB = 24;

const int ERR_R_COMP_LIB = 25;

const int ERR_R_ECDSA_LIB = 26;

const int ERR_R_ECDH_LIB = 27;

const int ERR_R_STORE_LIB = 0;

const int ERR_R_FIPS_LIB = 0;

const int ERR_R_CMS_LIB = 33;

const int ERR_R_TS_LIB = 0;

const int ERR_R_HMAC_LIB = 28;

const int ERR_R_JPAKE_LIB = 0;

const int ERR_R_USER_LIB = 34;

const int ERR_R_DIGEST_LIB = 29;

const int ERR_R_CIPHER_LIB = 30;

const int ERR_R_HKDF_LIB = 31;

const int ERR_R_TRUST_TOKEN_LIB = 32;

const int ERR_R_FATAL = 64;

const int ERR_R_MALLOC_FAILURE = 65;

const int ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED = 66;

const int ERR_R_PASSED_NULL_PARAMETER = 67;

const int ERR_R_INTERNAL_ERROR = 68;

const int ERR_R_OVERFLOW = 69;

const int ERR_ERROR_STRING_BUF_LEN = 120;

const int ERR_TXT_STRING = 1;

const int ERR_TXT_MALLOCED = 2;

const int ERR_NUM_ERRORS = 16;

const int OPENSSL_HEADER_CRYPTO_H = 1;

const String OPENSSL_VERSION_TEXT = 'OpenSSL 1.1.1 (compatible; BoringSSL)';

const int OPENSSL_VERSION = 0;

const int OPENSSL_CFLAGS = 1;

const int OPENSSL_BUILT_ON = 2;

const int OPENSSL_PLATFORM = 3;

const int OPENSSL_DIR = 4;

const int SSLEAY_VERSION = 0;

const int SSLEAY_CFLAGS = 1;

const int SSLEAY_BUILT_ON = 2;

const int SSLEAY_PLATFORM = 3;

const int SSLEAY_DIR = 4;

const int OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = 0;

const int OPENSSL_INIT_LOAD_CRYPTO_STRINGS = 0;

const int OPENSSL_INIT_ADD_ALL_CIPHERS = 0;

const int OPENSSL_INIT_ADD_ALL_DIGESTS = 0;

const int OPENSSL_INIT_NO_ADD_ALL_CIPHERS = 0;

const int OPENSSL_INIT_NO_ADD_ALL_DIGESTS = 0;

const int OPENSSL_INIT_LOAD_CONFIG = 0;

const int OPENSSL_INIT_NO_LOAD_CONFIG = 0;

const int OPENSSL_INIT_NO_ATEXIT = 0;

const int OPENSSL_INIT_ATFORK = 0;

const int OPENSSL_INIT_ENGINE_RDRAND = 0;

const int OPENSSL_INIT_ENGINE_DYNAMIC = 0;

const int OPENSSL_INIT_ENGINE_OPENSSL = 0;

const int OPENSSL_INIT_ENGINE_CRYPTODEV = 0;

const int OPENSSL_INIT_ENGINE_CAPI = 0;

const int OPENSSL_INIT_ENGINE_PADLOCK = 0;

const int OPENSSL_INIT_ENGINE_AFALG = 0;

const int OPENSSL_INIT_ENGINE_ALL_BUILTIN = 0;

const int OPENSSL_HEADER_EX_DATA_H = 1;

const int OPENSSL_HEADER_MEM_H = 1;

const int OPENSSL_HEADER_OBJ_H = 1;

const int OBJ_NAME_TYPE_MD_METH = 1;

const int OBJ_NAME_TYPE_CIPHER_METH = 2;

const int OBJ_R_UNKNOWN_NID = 100;

const int OBJ_R_INVALID_OID_STRING = 101;

const int OPENSSL_HEADER_POOL_H = 1;

const int OPENSSL_HEADER_POSIX_TIME_H = 1;

const int OPENSSL_HEADER_RAND_H = 1;

const int OPENSSL_HEADER_STACK_H = 1;

const int OPENSSL_HEADER_AES_H = 1;

const int AES_ENCRYPT = 1;

const int AES_DECRYPT = 0;

const int AES_MAXNR = 14;

const int AES_BLOCK_SIZE = 16;

const int OPENSSL_HEADER_BN_H = 1;

const int BN_BITS2 = 64;

const String BN_DEC_FMT1 = '%lu';

const String BN_HEX_FMT1 = '%lx';

const String BN_HEX_FMT2 = '%016lx';

const int BN_RAND_TOP_ANY = -1;

const int BN_RAND_TOP_ONE = 0;

const int BN_RAND_TOP_TWO = 1;

const int BN_RAND_BOTTOM_ANY = 0;

const int BN_RAND_BOTTOM_ODD = 1;

const int BN_GENCB_GENERATED = 0;

const int BN_GENCB_PRIME_TEST = 1;

const int BN_prime_checks_for_validation = 64;

const int BN_prime_checks_for_generation = 0;

const int BN_prime_checks = 64;

const int BN_FLG_MALLOCED = 1;

const int BN_FLG_STATIC_DATA = 2;

const int BN_R_ARG2_LT_ARG3 = 100;

const int BN_R_BAD_RECIPROCAL = 101;

const int BN_R_BIGNUM_TOO_LONG = 102;

const int BN_R_BITS_TOO_SMALL = 103;

const int BN_R_CALLED_WITH_EVEN_MODULUS = 104;

const int BN_R_DIV_BY_ZERO = 105;

const int BN_R_EXPAND_ON_STATIC_BIGNUM_DATA = 106;

const int BN_R_INPUT_NOT_REDUCED = 107;

const int BN_R_INVALID_RANGE = 108;

const int BN_R_NEGATIVE_NUMBER = 109;

const int BN_R_NOT_A_SQUARE = 110;

const int BN_R_NOT_INITIALIZED = 111;

const int BN_R_NO_INVERSE = 112;

const int BN_R_PRIVATE_KEY_TOO_LARGE = 113;

const int BN_R_P_IS_NOT_PRIME = 114;

const int BN_R_TOO_MANY_ITERATIONS = 115;

const int BN_R_TOO_MANY_TEMPORARY_VARIABLES = 116;

const int BN_R_BAD_ENCODING = 117;

const int BN_R_ENCODE_ERROR = 118;

const int BN_R_INVALID_INPUT = 119;

const int OPENSSL_HEADER_CHACHA_H = 1;

const int OPENSSL_HEADER_CMAC_H = 1;

const int OPENSSL_HEADER_CURVE25519_H = 1;

const int X25519_PRIVATE_KEY_LEN = 32;

const int X25519_PUBLIC_VALUE_LEN = 32;

const int X25519_SHARED_KEY_LEN = 32;

const int ED25519_PRIVATE_KEY_LEN = 64;

const int ED25519_PUBLIC_KEY_LEN = 32;

const int ED25519_SIGNATURE_LEN = 64;

const int SPAKE2_MAX_MSG_SIZE = 32;

const int SPAKE2_MAX_KEY_SIZE = 64;

const int OPENSSL_HEADER_DES_H = 1;

const int DES_KEY_SZ = 8;

const int DES_SCHEDULE_SZ = 128;

const int DES_ENCRYPT = 1;

const int DES_DECRYPT = 0;

const int DES_CBC_MODE = 0;

const int DES_PCBC_MODE = 1;

const int OPENSSL_HEADER_DH_H = 1;

const int OPENSSL_DH_MAX_MODULUS_BITS = 10000;

const int DH_GENERATOR_2 = 2;

const int DH_GENERATOR_5 = 5;

const int DH_CHECK_P_NOT_PRIME = 1;

const int DH_CHECK_P_NOT_SAFE_PRIME = 2;

const int DH_CHECK_UNABLE_TO_CHECK_GENERATOR = 4;

const int DH_CHECK_NOT_SUITABLE_GENERATOR = 8;

const int DH_CHECK_Q_NOT_PRIME = 16;

const int DH_CHECK_INVALID_Q_VALUE = 32;

const int DH_NOT_SUITABLE_GENERATOR = 8;

const int DH_UNABLE_TO_CHECK_GENERATOR = 4;

const int DH_CHECK_PUBKEY_TOO_SMALL = 1;

const int DH_CHECK_PUBKEY_TOO_LARGE = 2;

const int DH_CHECK_PUBKEY_INVALID = 4;

const int DH_R_BAD_GENERATOR = 100;

const int DH_R_INVALID_PUBKEY = 101;

const int DH_R_MODULUS_TOO_LARGE = 102;

const int DH_R_NO_PRIVATE_VALUE = 103;

const int DH_R_DECODE_ERROR = 104;

const int DH_R_ENCODE_ERROR = 105;

const int DH_R_INVALID_PARAMETERS = 106;

const int OPENSSL_HEADER_DSA_H = 1;

const int OPENSSL_DSA_MAX_MODULUS_BITS = 10000;

const int DSA_R_BAD_Q_VALUE = 100;

const int DSA_R_MISSING_PARAMETERS = 101;

const int DSA_R_MODULUS_TOO_LARGE = 102;

const int DSA_R_NEED_NEW_SETUP_VALUES = 103;

const int DSA_R_BAD_VERSION = 104;

const int DSA_R_DECODE_ERROR = 105;

const int DSA_R_ENCODE_ERROR = 106;

const int DSA_R_INVALID_PARAMETERS = 107;

const int DSA_R_TOO_MANY_ITERATIONS = 108;

const int OPENSSL_HEADER_ECDH_H = 1;

const int ECDH_R_KDF_FAILED = 100;

const int ECDH_R_NO_PRIVATE_VALUE = 101;

const int ECDH_R_POINT_ARITHMETIC_FAILURE = 102;

const int ECDH_R_UNKNOWN_DIGEST_LENGTH = 103;

const int OPENSSL_HEADER_ECDSA_H = 1;

const int ECDSA_R_BAD_SIGNATURE = 100;

const int ECDSA_R_MISSING_PARAMETERS = 101;

const int ECDSA_R_NEED_NEW_SETUP_VALUES = 102;

const int ECDSA_R_NOT_IMPLEMENTED = 103;

const int ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED = 104;

const int ECDSA_R_ENCODE_ERROR = 105;

const int ECDSA_R_TOO_MANY_ITERATIONS = 106;

const int OPENSSL_HEADER_ENGINE_H = 1;

const int ENGINE_R_OPERATION_NOT_SUPPORTED = 100;

const int OPENSSL_HEADER_HKDF_H = 1;

const int HKDF_R_OUTPUT_TOO_LARGE = 100;

const int OPENSSL_HEADER_HMAC_H = 1;

const int OPENSSL_HEADER_MD5_H = 1;

const int MD5_CBLOCK = 64;

const int MD5_DIGEST_LENGTH = 16;

const int OPENSSL_HEADER_MLDSA_H_ = 1;

const int MLDSA_SEED_BYTES = 32;

const int MLDSA65_PRIVATE_KEY_BYTES = 4032;

const int MLDSA65_PUBLIC_KEY_BYTES = 1952;

const int MLDSA65_SIGNATURE_BYTES = 3309;

const int MLDSA87_PRIVATE_KEY_BYTES = 4896;

const int MLDSA87_PUBLIC_KEY_BYTES = 2592;

const int MLDSA87_SIGNATURE_BYTES = 4627;

const int OPENSSL_HEADER_MLKEM_H = 1;

const int MLKEM768_PUBLIC_KEY_BYTES = 1184;

const int MLKEM_SEED_BYTES = 64;

const int MLKEM768_CIPHERTEXT_BYTES = 1088;

const int MLKEM_SHARED_SECRET_BYTES = 32;

const int MLKEM1024_PUBLIC_KEY_BYTES = 1568;

const int MLKEM1024_CIPHERTEXT_BYTES = 1568;

const int OPENSSL_HEADER_RC4_H = 1;

const int OPENSSL_HEADER_RSA_H = 1;

const int OPENSSL_RSA_MAX_MODULUS_BITS = 16384;

const int RSA_PKCS1_PADDING = 1;

const int RSA_NO_PADDING = 3;

const int RSA_PKCS1_OAEP_PADDING = 4;

const int RSA_PKCS1_PSS_PADDING = 6;

const int RSA_FLAG_OPAQUE = 1;

const int RSA_FLAG_NO_BLINDING = 8;

const int RSA_FLAG_EXT_PKEY = 32;

const int RSA_FLAG_NO_PUBLIC_EXPONENT = 64;

const int RSA_FLAG_LARGE_PUBLIC_EXPONENT = 128;

const int RSA_3 = 3;

const int RSA_F4 = 65537;

const int RSA_METHOD_FLAG_NO_CHECK = 1;

const int RSA_R_BAD_ENCODING = 100;

const int RSA_R_BAD_E_VALUE = 101;

const int RSA_R_BAD_FIXED_HEADER_DECRYPT = 102;

const int RSA_R_BAD_PAD_BYTE_COUNT = 103;

const int RSA_R_BAD_RSA_PARAMETERS = 104;

const int RSA_R_BAD_SIGNATURE = 105;

const int RSA_R_BAD_VERSION = 106;

const int RSA_R_BLOCK_TYPE_IS_NOT_01 = 107;

const int RSA_R_BN_NOT_INITIALIZED = 108;

const int RSA_R_CANNOT_RECOVER_MULTI_PRIME_KEY = 109;

const int RSA_R_CRT_PARAMS_ALREADY_GIVEN = 110;

const int RSA_R_CRT_VALUES_INCORRECT = 111;

const int RSA_R_DATA_LEN_NOT_EQUAL_TO_MOD_LEN = 112;

const int RSA_R_DATA_TOO_LARGE = 113;

const int RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE = 114;

const int RSA_R_DATA_TOO_LARGE_FOR_MODULUS = 115;

const int RSA_R_DATA_TOO_SMALL = 116;

const int RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE = 117;

const int RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY = 118;

const int RSA_R_D_E_NOT_CONGRUENT_TO_1 = 119;

const int RSA_R_EMPTY_PUBLIC_KEY = 120;

const int RSA_R_ENCODE_ERROR = 121;

const int RSA_R_FIRST_OCTET_INVALID = 122;

const int RSA_R_INCONSISTENT_SET_OF_CRT_VALUES = 123;

const int RSA_R_INTERNAL_ERROR = 124;

const int RSA_R_INVALID_MESSAGE_LENGTH = 125;

const int RSA_R_KEY_SIZE_TOO_SMALL = 126;

const int RSA_R_LAST_OCTET_INVALID = 127;

const int RSA_R_MODULUS_TOO_LARGE = 128;

const int RSA_R_MUST_HAVE_AT_LEAST_TWO_PRIMES = 129;

const int RSA_R_NO_PUBLIC_EXPONENT = 130;

const int RSA_R_NULL_BEFORE_BLOCK_MISSING = 131;

const int RSA_R_N_NOT_EQUAL_P_Q = 132;

const int RSA_R_OAEP_DECODING_ERROR = 133;

const int RSA_R_ONLY_ONE_OF_P_Q_GIVEN = 134;

const int RSA_R_OUTPUT_BUFFER_TOO_SMALL = 135;

const int RSA_R_PADDING_CHECK_FAILED = 136;

const int RSA_R_PKCS_DECODING_ERROR = 137;

const int RSA_R_SLEN_CHECK_FAILED = 138;

const int RSA_R_SLEN_RECOVERY_FAILED = 139;

const int RSA_R_TOO_LONG = 140;

const int RSA_R_TOO_MANY_ITERATIONS = 141;

const int RSA_R_UNKNOWN_ALGORITHM_TYPE = 142;

const int RSA_R_UNKNOWN_PADDING_TYPE = 143;

const int RSA_R_VALUE_MISSING = 144;

const int RSA_R_WRONG_SIGNATURE_LENGTH = 145;

const int RSA_R_PUBLIC_KEY_VALIDATION_FAILED = 146;

const int RSA_R_D_OUT_OF_RANGE = 147;

const int RSA_R_BLOCK_TYPE_IS_NOT_02 = 148;

const int OPENSSL_HEADER_SHA_H = 1;

const int SHA_CBLOCK = 64;

const int SHA_DIGEST_LENGTH = 20;

const int SHA224_CBLOCK = 64;

const int SHA224_DIGEST_LENGTH = 28;

const int SHA256_CBLOCK = 64;

const int SHA256_DIGEST_LENGTH = 32;

const int SHA384_CBLOCK = 128;

const int SHA384_DIGEST_LENGTH = 48;

const int SHA512_CBLOCK = 128;

const int SHA512_DIGEST_LENGTH = 64;

const int SHA512_256_DIGEST_LENGTH = 32;

const int OPENSSL_HEADER_SIPHASH_H = 1;

const int OPENSSL_HEADER_DIGEST_H = 1;

const int EVP_MAX_MD_SIZE = 64;

const int EVP_MAX_MD_BLOCK_SIZE = 128;

const int EVP_MD_FLAG_DIGALGID_ABSENT = 2;

const int EVP_MD_FLAG_XOF = 4;

const int EVP_MD_CTX_FLAG_NON_FIPS_ALLOW = 0;

const int DIGEST_R_INPUT_NOT_INITIALIZED = 100;

const int DIGEST_R_DECODE_ERROR = 101;

const int DIGEST_R_UNKNOWN_HASH = 102;

const int OPENSSL_HEADER_CIPHER_H = 1;

const int EVP_CIPH_STREAM_CIPHER = 0;

const int EVP_CIPH_ECB_MODE = 1;

const int EVP_CIPH_CBC_MODE = 2;

const int EVP_CIPH_CFB_MODE = 3;

const int EVP_CIPH_OFB_MODE = 4;

const int EVP_CIPH_CTR_MODE = 5;

const int EVP_CIPH_GCM_MODE = 6;

const int EVP_CIPH_XTS_MODE = 7;

const int EVP_CIPH_CCM_MODE = 8;

const int EVP_CIPH_OCB_MODE = 9;

const int EVP_CIPH_WRAP_MODE = 10;

const int EVP_CIPH_VARIABLE_LENGTH = 64;

const int EVP_CIPH_ALWAYS_CALL_INIT = 128;

const int EVP_CIPH_CUSTOM_IV = 256;

const int EVP_CIPH_CTRL_INIT = 512;

const int EVP_CIPH_FLAG_CUSTOM_CIPHER = 1024;

const int EVP_CIPH_FLAG_AEAD_CIPHER = 2048;

const int EVP_CIPH_CUSTOM_COPY = 4096;

const int EVP_CIPH_FLAG_NON_FIPS_ALLOW = 0;

const int EVP_CIPHER_CTX_FLAG_WRAP_ALLOW = 0;

const int EVP_CIPH_NO_PADDING = 2048;

const int EVP_CTRL_INIT = 0;

const int EVP_CTRL_SET_KEY_LENGTH = 1;

const int EVP_CTRL_GET_RC2_KEY_BITS = 2;

const int EVP_CTRL_SET_RC2_KEY_BITS = 3;

const int EVP_CTRL_GET_RC5_ROUNDS = 4;

const int EVP_CTRL_SET_RC5_ROUNDS = 5;

const int EVP_CTRL_RAND_KEY = 6;

const int EVP_CTRL_PBE_PRF_NID = 7;

const int EVP_CTRL_COPY = 8;

const int EVP_CTRL_AEAD_SET_IVLEN = 9;

const int EVP_CTRL_AEAD_GET_TAG = 16;

const int EVP_CTRL_AEAD_SET_TAG = 17;

const int EVP_CTRL_AEAD_SET_IV_FIXED = 18;

const int EVP_CTRL_GCM_IV_GEN = 19;

const int EVP_CTRL_AEAD_SET_MAC_KEY = 23;

const int EVP_CTRL_GCM_SET_IV_INV = 24;

const int EVP_CTRL_GET_IVLEN = 25;

const int EVP_GCM_TLS_FIXED_IV_LEN = 4;

const int EVP_GCM_TLS_EXPLICIT_IV_LEN = 8;

const int EVP_GCM_TLS_TAG_LEN = 16;

const int EVP_CTRL_GCM_SET_IVLEN = 9;

const int EVP_CTRL_GCM_GET_TAG = 16;

const int EVP_CTRL_GCM_SET_TAG = 17;

const int EVP_CTRL_GCM_SET_IV_FIXED = 18;

const int EVP_MAX_KEY_LENGTH = 64;

const int EVP_MAX_IV_LENGTH = 16;

const int EVP_MAX_BLOCK_LENGTH = 32;

const int CIPHER_R_AES_KEY_SETUP_FAILED = 100;

const int CIPHER_R_BAD_DECRYPT = 101;

const int CIPHER_R_BAD_KEY_LENGTH = 102;

const int CIPHER_R_BUFFER_TOO_SMALL = 103;

const int CIPHER_R_CTRL_NOT_IMPLEMENTED = 104;

const int CIPHER_R_CTRL_OPERATION_NOT_IMPLEMENTED = 105;

const int CIPHER_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH = 106;

const int CIPHER_R_INITIALIZATION_ERROR = 107;

const int CIPHER_R_INPUT_NOT_INITIALIZED = 108;

const int CIPHER_R_INVALID_AD_SIZE = 109;

const int CIPHER_R_INVALID_KEY_LENGTH = 110;

const int CIPHER_R_INVALID_NONCE_SIZE = 111;

const int CIPHER_R_INVALID_OPERATION = 112;

const int CIPHER_R_IV_TOO_LARGE = 113;

const int CIPHER_R_NO_CIPHER_SET = 114;

const int CIPHER_R_OUTPUT_ALIASES_INPUT = 115;

const int CIPHER_R_TAG_TOO_LARGE = 116;

const int CIPHER_R_TOO_LARGE = 117;

const int CIPHER_R_UNSUPPORTED_AD_SIZE = 118;

const int CIPHER_R_UNSUPPORTED_INPUT_SIZE = 119;

const int CIPHER_R_UNSUPPORTED_KEY_SIZE = 120;

const int CIPHER_R_UNSUPPORTED_NONCE_SIZE = 121;

const int CIPHER_R_UNSUPPORTED_TAG_SIZE = 122;

const int CIPHER_R_WRONG_FINAL_BLOCK_LENGTH = 123;

const int CIPHER_R_NO_DIRECTION_SET = 124;

const int CIPHER_R_INVALID_NONCE = 125;

const int OPENSSL_HEADER_AEAD_H = 1;

const int EVP_AEAD_MAX_KEY_LENGTH = 80;

const int EVP_AEAD_MAX_NONCE_LENGTH = 24;

const int EVP_AEAD_MAX_OVERHEAD = 64;

const int EVP_AEAD_DEFAULT_TAG_LENGTH = 0;

const int OPENSSL_HEADER_EVP_H = 1;

const int EVP_PKEY_NONE = 0;

const int EVP_PKEY_RSA = 6;

const int EVP_PKEY_RSA_PSS = 912;

const int EVP_PKEY_DSA = 116;

const int EVP_PKEY_EC = 408;

const int EVP_PKEY_ED25519 = 949;

const int EVP_PKEY_X25519 = 948;

const int EVP_PKEY_HKDF = 963;

const int EVP_PKEY_DH = 28;

const int EVP_PKEY_RSA2 = 19;

const int EVP_PKEY_X448 = 961;

const int EVP_PKEY_ED448 = 960;

const int OPENSSL_HEADER_HPKE_H = 1;

const int EVP_HPKE_DHKEM_P256_HKDF_SHA256 = 16;

const int EVP_HPKE_DHKEM_X25519_HKDF_SHA256 = 32;

const int EVP_HPKE_MAX_PUBLIC_KEY_LENGTH = 65;

const int EVP_HPKE_MAX_PRIVATE_KEY_LENGTH = 32;

const int EVP_HPKE_MAX_ENC_LENGTH = 65;

const int EVP_HPKE_HKDF_SHA256 = 1;

const int EVP_HPKE_AES_128_GCM = 1;

const int EVP_HPKE_AES_256_GCM = 2;

const int EVP_HPKE_CHACHA20_POLY1305 = 3;

const int EVP_HPKE_MAX_OVERHEAD = 64;

const int OPENSSL_HEADER_KDF_H = 1;

const int EVP_PKEY_HKDEF_MODE_EXTRACT_AND_EXPAND = 0;

const int EVP_PKEY_HKDEF_MODE_EXTRACT_ONLY = 1;

const int EVP_PKEY_HKDEF_MODE_EXPAND_ONLY = 2;
